%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.0.1
-module(down_pb).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_result/1, enum_value_by_symbol_result/1]).
-export(['enum_symbol_by_value_login_reply.login_result'/1, 'enum_value_by_symbol_login_reply.login_result'/1]).
-export(['enum_symbol_by_value_create_role_reply.create_role_result'/1, 'enum_value_by_symbol_create_role_reply.create_role_result'/1]).
-export([enum_symbol_by_value_match_result/1, enum_value_by_symbol_match_result/1]).
-export(['enum_symbol_by_value_reward.reward_type'/1, 'enum_value_by_symbol_reward.reward_type'/1]).
-export([enum_symbol_by_value_team_member_state/1, enum_value_by_symbol_team_member_state/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("down_pb.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'result'() :: 'success' | 'fail'.
-type 'login_reply.login_result'() :: 'new_user' | 'default_role' | 'role_list'.
-type 'create_role_reply.create_role_result'() :: 'success' | 'nickname_repeat' | 'nickname_error' | 'nickname_dirty'.
-type 'match_result'() :: 'success' | 'matching' | 'matched'.
-type 'reward.reward_type'() :: 'element'.
-type 'team_member_state'() :: 'inviting' | 'unready' | 'ready'.
-export_type(['result'/0, 'login_reply.login_result'/0, 'create_role_reply.create_role_result'/0, 'match_result'/0, 'reward.reward_type'/0, 'team_member_state'/0]).

%% message types
-type name_card_st() :: #name_card_st{}.
-type role_st() :: #role_st{}.
-type create_role_reply() :: #create_role_reply{}.
-type match_reply() :: #match_reply{}.
-type team_member_st() :: #team_member_st{}.
-type team_info_st() :: #team_info_st{}.
-type team_reply() :: #team_reply{}.
-type select_magic_reply() :: #select_magic_reply{}.
-type magic_reply() :: #magic_reply{}.
-type rtnotify_callback_reply() :: #rtnotify_callback_reply{}.
-type rtnotify_keepalive_reply() :: #rtnotify_keepalive_reply{}.
-type rtnotify_reply() :: #rtnotify_reply{}.
-type lookup_role_reply() :: #lookup_role_reply{}.
-type select_role_reply() :: #select_role_reply{}.
-type role_reply() :: #role_reply{}.
-type role_summary_st() :: #role_summary_st{}.
-type login_reply() :: #login_reply{}.
-type reward() :: #reward{}.
-type battle_reward() :: #battle_reward{}.
-type battle_result_notify() :: #battle_result_notify{}.
-type battle_team_member() :: #battle_team_member{}.
-type battle_team() :: #battle_team{}.
-type battle_match_notify() :: #battle_match_notify{}.
-type team_notify() :: #team_notify{}.
-type notify_msg() :: #notify_msg{}.
-type error_info() :: #error_info{}.
-type down_msg() :: #down_msg{}.
-type battle_stat() :: #battle_stat{}.
-export_type(['name_card_st'/0, 'role_st'/0, 'create_role_reply'/0, 'match_reply'/0, 'team_member_st'/0, 'team_info_st'/0, 'team_reply'/0, 'select_magic_reply'/0, 'magic_reply'/0, 'rtnotify_callback_reply'/0, 'rtnotify_keepalive_reply'/0, 'rtnotify_reply'/0, 'lookup_role_reply'/0, 'select_role_reply'/0, 'role_reply'/0, 'role_summary_st'/0, 'login_reply'/0, 'reward'/0, 'battle_reward'/0, 'battle_result_notify'/0, 'battle_team_member'/0, 'battle_team'/0, 'battle_match_notify'/0, 'team_notify'/0, 'notify_msg'/0, 'error_info'/0, 'down_msg'/0, 'battle_stat'/0]).

-spec encode_msg(#name_card_st{} | #role_st{} | #create_role_reply{} | #match_reply{} | #team_member_st{} | #team_info_st{} | #team_reply{} | #select_magic_reply{} | #magic_reply{} | #rtnotify_callback_reply{} | #rtnotify_keepalive_reply{} | #rtnotify_reply{} | #lookup_role_reply{} | #select_role_reply{} | #role_reply{} | #role_summary_st{} | #login_reply{} | #reward{} | #battle_reward{} | #battle_result_notify{} | #battle_team_member{} | #battle_team{} | #battle_match_notify{} | #team_notify{} | #notify_msg{} | #error_info{} | #down_msg{} | #battle_stat{}) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(#name_card_st{} | #role_st{} | #create_role_reply{} | #match_reply{} | #team_member_st{} | #team_info_st{} | #team_reply{} | #select_magic_reply{} | #magic_reply{} | #rtnotify_callback_reply{} | #rtnotify_keepalive_reply{} | #rtnotify_reply{} | #lookup_role_reply{} | #select_role_reply{} | #role_reply{} | #role_summary_st{} | #login_reply{} | #reward{} | #battle_reward{} | #battle_result_notify{} | #battle_team_member{} | #battle_team{} | #battle_match_notify{} | #team_notify{} | #notify_msg{} | #error_info{} | #down_msg{} | #battle_stat{}, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #name_card_st{} -> e_msg_name_card_st(Msg, TrUserData);
      #role_st{} -> e_msg_role_st(Msg, TrUserData);
      #create_role_reply{} ->
	  e_msg_create_role_reply(Msg, TrUserData);
      #match_reply{} -> e_msg_match_reply(Msg, TrUserData);
      #team_member_st{} ->
	  e_msg_team_member_st(Msg, TrUserData);
      #team_info_st{} -> e_msg_team_info_st(Msg, TrUserData);
      #team_reply{} -> e_msg_team_reply(Msg, TrUserData);
      #select_magic_reply{} ->
	  e_msg_select_magic_reply(Msg, TrUserData);
      #magic_reply{} -> e_msg_magic_reply(Msg, TrUserData);
      #rtnotify_callback_reply{} ->
	  e_msg_rtnotify_callback_reply(Msg, TrUserData);
      #rtnotify_keepalive_reply{} ->
	  e_msg_rtnotify_keepalive_reply(Msg, TrUserData);
      #rtnotify_reply{} ->
	  e_msg_rtnotify_reply(Msg, TrUserData);
      #lookup_role_reply{} ->
	  e_msg_lookup_role_reply(Msg, TrUserData);
      #select_role_reply{} ->
	  e_msg_select_role_reply(Msg, TrUserData);
      #role_reply{} -> e_msg_role_reply(Msg, TrUserData);
      #role_summary_st{} ->
	  e_msg_role_summary_st(Msg, TrUserData);
      #login_reply{} -> e_msg_login_reply(Msg, TrUserData);
      #reward{} -> e_msg_reward(Msg, TrUserData);
      #battle_reward{} ->
	  e_msg_battle_reward(Msg, TrUserData);
      #battle_result_notify{} ->
	  e_msg_battle_result_notify(Msg, TrUserData);
      #battle_team_member{} ->
	  e_msg_battle_team_member(Msg, TrUserData);
      #battle_team{} -> e_msg_battle_team(Msg, TrUserData);
      #battle_match_notify{} ->
	  e_msg_battle_match_notify(Msg, TrUserData);
      #team_notify{} -> e_msg_team_notify(Msg, TrUserData);
      #notify_msg{} -> e_msg_notify_msg(Msg, TrUserData);
      #error_info{} -> e_msg_error_info(Msg, TrUserData);
      #down_msg{} -> e_msg_down_msg(Msg, TrUserData);
      #battle_stat{} -> e_msg_battle_stat(Msg, TrUserData)
    end.



e_msg_name_card_st(Msg, TrUserData) ->
    e_msg_name_card_st(Msg, <<>>, TrUserData).


e_msg_name_card_st(#name_card_st{name = F1,
				 last_set_time = F2},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_string(TrF1, <<Bin/binary, 10>>)
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_varint(TrF2, <<B1/binary, 16>>)
	   end
    end.

e_msg_role_st(Msg, TrUserData) ->
    e_msg_role_st(Msg, <<>>, TrUserData).


e_msg_role_st(#role_st{role_id = F1, elf_id = F2,
		       name_card = F3, level = F4, exp = F5},
	      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_varint(TrF1, <<Bin/binary, 8>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_varint(TrF2, <<B1/binary, 16>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_mfield_role_st_name_card(TrF3, <<B2/binary, 26>>,
					     TrUserData)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_varint(TrF4, <<B3/binary, 32>>)
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     e_varint(TrF5, <<B4/binary, 40>>)
	   end
    end.

e_msg_create_role_reply(Msg, TrUserData) ->
    e_msg_create_role_reply(Msg, <<>>, TrUserData).


e_msg_create_role_reply(#create_role_reply{result = F1,
					   role = F2},
			Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   'e_enum_create_role_reply.create_role_result'(TrF1,
							 <<Bin/binary, 8>>)
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_mfield_create_role_reply_role(TrF2, <<B1/binary, 18>>,
					     TrUserData)
	   end
    end.

e_msg_match_reply(Msg, TrUserData) ->
    e_msg_match_reply(Msg, <<>>, TrUserData).


e_msg_match_reply(#match_reply{start = F1, cancel = F2},
		  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_enum_match_result(TrF1, <<Bin/binary, 8>>)
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_enum_match_result(TrF2, <<B1/binary, 16>>)
	   end
    end.

e_msg_team_member_st(Msg, TrUserData) ->
    e_msg_team_member_st(Msg, <<>>, TrUserData).


e_msg_team_member_st(#team_member_st{user_id = F1,
				     state = F2, elf_id = F3, name = F4,
				     level = F5},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_varint(TrF1, <<Bin/binary, 8>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_enum_team_member_state(TrF2, <<B1/binary, 16>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_varint(TrF3, <<B2/binary, 24>>)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_string(TrF4, <<B3/binary, 34>>)
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     e_varint(TrF5, <<B4/binary, 40>>)
	   end
    end.

e_msg_team_info_st(Msg, TrUserData) ->
    e_msg_team_info_st(Msg, <<>>, TrUserData).


e_msg_team_info_st(#team_info_st{members = F1,
				 leader_id = F2},
		   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  e_field_team_info_st_members(TrF1, Bin, TrUserData)
	   end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_varint(TrF2, <<B1/binary, 16>>)
	   end
    end.

e_msg_team_reply(Msg, TrUserData) ->
    e_msg_team_reply(Msg, <<>>, TrUserData).


e_msg_team_reply(#team_reply{invite = F1, accept = F2,
			     refuse = F3, state = F4, leave = F5},
		 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_mfield_team_reply_invite(TrF1, <<Bin/binary, 10>>,
					     TrUserData)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_mfield_team_reply_accept(TrF2, <<B1/binary, 18>>,
					     TrUserData)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_enum_result(TrF3, <<B2/binary, 24>>)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_enum_result(TrF4, <<B3/binary, 32>>)
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     e_enum_result(TrF5, <<B4/binary, 40>>)
	   end
    end.

e_msg_select_magic_reply(Msg, TrUserData) ->
    e_msg_select_magic_reply(Msg, <<>>, TrUserData).


e_msg_select_magic_reply(#select_magic_reply{result =
						 F1},
			 Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     e_enum_result(TrF1, <<Bin/binary, 8>>)
	   end
    end.

e_msg_magic_reply(Msg, TrUserData) ->
    e_msg_magic_reply(Msg, <<>>, TrUserData).


e_msg_magic_reply(#magic_reply{select = F1}, Bin,
		  TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     e_mfield_magic_reply_select(TrF1, <<Bin/binary, 10>>,
					 TrUserData)
	   end
    end.

e_msg_rtnotify_callback_reply(Msg, TrUserData) ->
    e_msg_rtnotify_callback_reply(Msg, <<>>, TrUserData).


e_msg_rtnotify_callback_reply(#rtnotify_callback_reply{string
							   = F1},
			      Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     e_varint(TrF1, <<Bin/binary, 8>>)
	   end
    end.

e_msg_rtnotify_keepalive_reply(Msg, TrUserData) ->
    e_msg_rtnotify_keepalive_reply(Msg, <<>>, TrUserData).


e_msg_rtnotify_keepalive_reply(#rtnotify_keepalive_reply{time
							     = F1},
			       Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     e_varint(TrF1, <<Bin/binary, 8>>)
	   end
    end.

e_msg_rtnotify_reply(Msg, TrUserData) ->
    e_msg_rtnotify_reply(Msg, <<>>, TrUserData).


e_msg_rtnotify_reply(#rtnotify_reply{register = F1,
				     keepalive = F2, callback = F3},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_enum_result(TrF1, <<Bin/binary, 8>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_mfield_rtnotify_reply_keepalive(TrF2,
						    <<B1/binary, 18>>,
						    TrUserData)
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_mfield_rtnotify_reply_callback(TrF3,
					      <<B2/binary, 26>>, TrUserData)
	   end
    end.

e_msg_lookup_role_reply(Msg, TrUserData) ->
    e_msg_lookup_role_reply(Msg, <<>>, TrUserData).


e_msg_lookup_role_reply(#lookup_role_reply{roles = F1},
			Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_lookup_role_reply_roles(TrF1, Bin, TrUserData)
      end
    end.

e_msg_select_role_reply(Msg, TrUserData) ->
    e_msg_select_role_reply(Msg, <<>>, TrUserData).


e_msg_select_role_reply(#select_role_reply{role = F1},
			Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_mfield_select_role_reply_role(TrF1,
				      <<Bin/binary, 10>>, TrUserData)
    end.

e_msg_role_reply(Msg, TrUserData) ->
    e_msg_role_reply(Msg, <<>>, TrUserData).


e_msg_role_reply(#role_reply{create = F1, select = F2,
			     lookup = F3},
		 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_mfield_role_reply_create(TrF1, <<Bin/binary, 10>>,
					     TrUserData)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_mfield_role_reply_select(TrF2, <<B1/binary, 18>>,
					     TrUserData)
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_mfield_role_reply_lookup(TrF3, <<B2/binary, 26>>,
					TrUserData)
	   end
    end.

e_msg_role_summary_st(Msg, TrUserData) ->
    e_msg_role_summary_st(Msg, <<>>, TrUserData).


e_msg_role_summary_st(#role_summary_st{role_id = F1,
				       elf_id = F2, name = F3, level = F4},
		      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_varint(TrF1, <<Bin/binary, 8>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_varint(TrF2, <<B1/binary, 16>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_string(TrF3, <<B2/binary, 26>>)
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     e_varint(TrF4, <<B3/binary, 32>>)
	   end
    end.

e_msg_login_reply(Msg, TrUserData) ->
    e_msg_login_reply(Msg, <<>>, TrUserData).


e_msg_login_reply(#login_reply{result = F1,
			       user_id = F2, role = F3, roles = F4},
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   'e_enum_login_reply.login_result'(TrF1,
					     <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_varint(TrF2, <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_mfield_login_reply_role(TrF3, <<B2/binary, 26>>,
					    TrUserData)
		end
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      if TrF4 == [] -> B3;
	 true -> e_field_login_reply_roles(TrF4, B3, TrUserData)
      end
    end.

e_msg_reward(Msg, TrUserData) ->
    e_msg_reward(Msg, <<>>, TrUserData).


e_msg_reward(#reward{type = F1, id = F2, level = F3,
		     amount = F4},
	     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  'e_enum_reward.reward_type'(TrF1, <<Bin/binary, 8>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_varint(TrF2, <<B1/binary, 16>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_varint(TrF3, <<B2/binary, 24>>)
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     e_varint(TrF4, <<B3/binary, 32>>)
	   end
    end.

e_msg_battle_reward(Msg, TrUserData) ->
    e_msg_battle_reward(Msg, <<>>, TrUserData).


e_msg_battle_reward(#battle_reward{rewards = F1}, Bin,
		    TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_battle_reward_rewards(TrF1, Bin, TrUserData)
      end
    end.

e_msg_battle_result_notify(Msg, TrUserData) ->
    e_msg_battle_result_notify(Msg, <<>>, TrUserData).


e_msg_battle_result_notify(#battle_result_notify{battle_id
						     = F1,
						 result = F2, reward = F3},
			   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_varint(TrF1, <<Bin/binary, 8>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_varint(TrF2, <<B1/binary, 16>>)
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_mfield_battle_result_notify_reward(TrF3,
						  <<B2/binary, 26>>, TrUserData)
	   end
    end.

e_msg_battle_team_member(Msg, TrUserData) ->
    e_msg_battle_team_member(Msg, <<>>, TrUserData).


e_msg_battle_team_member(#battle_team_member{role_id =
						 F1,
					     elf_id = F2, name = F3, level = F4,
					     team_id = F5},
			 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_varint(TrF1, <<Bin/binary, 8>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_varint(TrF2, <<B1/binary, 16>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_string(TrF3, <<B2/binary, 26>>)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_varint(TrF4, <<B3/binary, 32>>)
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     e_varint(TrF5, <<B4/binary, 40>>)
	   end
    end.

e_msg_battle_team(Msg, TrUserData) ->
    e_msg_battle_team(Msg, <<>>, TrUserData).


e_msg_battle_team(#battle_team{members = F1}, Bin,
		  TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_battle_team_members(TrF1, Bin, TrUserData)
      end
    end.

e_msg_battle_match_notify(Msg, TrUserData) ->
    e_msg_battle_match_notify(Msg, <<>>, TrUserData).


e_msg_battle_match_notify(#battle_match_notify{team_a =
						   F1,
					       team_b = F2, battle_ip = F3,
					       battle_port = F4},
			  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_mfield_battle_match_notify_team_a(TrF1,
						      <<Bin/binary, 10>>,
						      TrUserData)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_mfield_battle_match_notify_team_b(TrF2,
						      <<B1/binary, 18>>,
						      TrUserData)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_string(TrF3, <<B2/binary, 26>>)
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     e_varint(TrF4, <<B3/binary, 32>>)
	   end
    end.

e_msg_team_notify(_Msg, _TrUserData) -> <<>>.

e_msg_notify_msg(Msg, TrUserData) ->
    e_msg_notify_msg(Msg, <<>>, TrUserData).


e_msg_notify_msg(#notify_msg{notify = F1,
			     battle_match = F2, battle_result = F3},
		 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_mfield_notify_msg_notify(TrF1, <<Bin/binary, 10>>,
					     TrUserData)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_mfield_notify_msg_battle_match(TrF2,
						   <<B1/binary, 18>>,
						   TrUserData)
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_mfield_notify_msg_battle_result(TrF3,
					       <<B2/binary, 26>>, TrUserData)
	   end
    end.

e_msg_error_info(Msg, TrUserData) ->
    e_msg_error_info(Msg, <<>>, TrUserData).


e_msg_error_info(#error_info{msg = F1}, Bin,
		 TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     e_type_string(TrF1, <<Bin/binary, 10>>)
	   end
    end.

e_msg_down_msg(Msg, TrUserData) ->
    e_msg_down_msg(Msg, <<>>, TrUserData).


e_msg_down_msg(#down_msg{error = F1, notify = F2,
			 login = F3, role = F4, rtnotify = F5, magic = F6,
			 team = F7, match = F8},
	       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_mfield_down_msg_error(TrF1, <<Bin/binary, 10>>,
					  TrUserData)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_mfield_down_msg_notify(TrF2, <<B1/binary, 18>>,
					   TrUserData)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_mfield_down_msg_login(TrF3, <<B2/binary, 26>>,
					  TrUserData)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_mfield_down_msg_role(TrF4, <<B3/binary, 34>>,
					 TrUserData)
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_mfield_down_msg_rtnotify(TrF5, <<B4/binary, 42>>,
					     TrUserData)
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  e_mfield_down_msg_magic(TrF6, <<B5/binary, 50>>,
					  TrUserData)
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  e_mfield_down_msg_team(TrF7, <<B6/binary, 58>>,
					 TrUserData)
		end
	 end,
    if F8 == undefined -> B7;
       true ->
	   begin
	     TrF8 = id(F8, TrUserData),
	     e_mfield_down_msg_match(TrF8, <<B7/binary, 66>>,
				     TrUserData)
	   end
    end.

e_msg_battle_stat(_Msg, _TrUserData) -> <<>>.

e_mfield_role_st_name_card(Msg, Bin, TrUserData) ->
    SubBin = e_msg_name_card_st(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_create_role_reply_role(Msg, Bin, TrUserData) ->
    SubBin = e_msg_role_st(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_team_info_st_members(Msg, Bin, TrUserData) ->
    SubBin = e_msg_team_member_st(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_team_info_st_members([Elem | Rest], Bin,
			     TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_team_info_st_members(id(Elem,
					    TrUserData),
					 Bin2, TrUserData),
    e_field_team_info_st_members(Rest, Bin3, TrUserData);
e_field_team_info_st_members([], Bin, _TrUserData) ->
    Bin.

e_mfield_team_reply_invite(Msg, Bin, TrUserData) ->
    SubBin = e_msg_team_member_st(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_team_reply_accept(Msg, Bin, TrUserData) ->
    SubBin = e_msg_team_info_st(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_magic_reply_select(Msg, Bin, TrUserData) ->
    SubBin = e_msg_select_magic_reply(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_rtnotify_reply_keepalive(Msg, Bin,
				  TrUserData) ->
    SubBin = e_msg_rtnotify_keepalive_reply(Msg, <<>>,
					    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_rtnotify_reply_callback(Msg, Bin,
				 TrUserData) ->
    SubBin = e_msg_rtnotify_callback_reply(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_lookup_role_reply_roles(Msg, Bin,
				 TrUserData) ->
    SubBin = e_msg_role_st(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_lookup_role_reply_roles([Elem | Rest], Bin,
				TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_lookup_role_reply_roles(id(Elem,
					       TrUserData),
					    Bin2, TrUserData),
    e_field_lookup_role_reply_roles(Rest, Bin3, TrUserData);
e_field_lookup_role_reply_roles([], Bin, _TrUserData) ->
    Bin.

e_mfield_select_role_reply_role(Msg, Bin, TrUserData) ->
    SubBin = e_msg_role_st(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_role_reply_create(Msg, Bin, TrUserData) ->
    SubBin = e_msg_create_role_reply(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_role_reply_select(Msg, Bin, TrUserData) ->
    SubBin = e_msg_select_role_reply(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_role_reply_lookup(Msg, Bin, TrUserData) ->
    SubBin = e_msg_lookup_role_reply(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_login_reply_role(Msg, Bin, TrUserData) ->
    SubBin = e_msg_role_st(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_login_reply_roles(Msg, Bin, TrUserData) ->
    SubBin = e_msg_role_summary_st(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_login_reply_roles([Elem | Rest], Bin,
			  TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_login_reply_roles(id(Elem, TrUserData),
				      Bin2, TrUserData),
    e_field_login_reply_roles(Rest, Bin3, TrUserData);
e_field_login_reply_roles([], Bin, _TrUserData) -> Bin.

e_mfield_battle_reward_rewards(Msg, Bin, TrUserData) ->
    SubBin = e_msg_reward(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_battle_reward_rewards([Elem | Rest], Bin,
			      TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_battle_reward_rewards(id(Elem,
					     TrUserData),
					  Bin2, TrUserData),
    e_field_battle_reward_rewards(Rest, Bin3, TrUserData);
e_field_battle_reward_rewards([], Bin, _TrUserData) ->
    Bin.

e_mfield_battle_result_notify_reward(Msg, Bin,
				     TrUserData) ->
    SubBin = e_msg_battle_reward(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_battle_team_members(Msg, Bin, TrUserData) ->
    SubBin = e_msg_battle_team_member(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_battle_team_members([Elem | Rest], Bin,
			    TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_battle_team_members(id(Elem,
					   TrUserData),
					Bin2, TrUserData),
    e_field_battle_team_members(Rest, Bin3, TrUserData);
e_field_battle_team_members([], Bin, _TrUserData) ->
    Bin.

e_mfield_battle_match_notify_team_a(Msg, Bin,
				    TrUserData) ->
    SubBin = e_msg_battle_team(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_battle_match_notify_team_b(Msg, Bin,
				    TrUserData) ->
    SubBin = e_msg_battle_team(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_notify_msg_notify(_Msg, Bin, _TrUserData) ->
    <<Bin/binary, 0>>.

e_mfield_notify_msg_battle_match(Msg, Bin,
				 TrUserData) ->
    SubBin = e_msg_battle_match_notify(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_notify_msg_battle_result(Msg, Bin,
				  TrUserData) ->
    SubBin = e_msg_battle_result_notify(Msg, <<>>,
					TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_down_msg_error(Msg, Bin, TrUserData) ->
    SubBin = e_msg_error_info(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_down_msg_notify(Msg, Bin, TrUserData) ->
    SubBin = e_msg_notify_msg(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_down_msg_login(Msg, Bin, TrUserData) ->
    SubBin = e_msg_login_reply(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_down_msg_role(Msg, Bin, TrUserData) ->
    SubBin = e_msg_role_reply(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_down_msg_rtnotify(Msg, Bin, TrUserData) ->
    SubBin = e_msg_rtnotify_reply(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_down_msg_magic(Msg, Bin, TrUserData) ->
    SubBin = e_msg_magic_reply(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_down_msg_team(Msg, Bin, TrUserData) ->
    SubBin = e_msg_team_reply(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_down_msg_match(Msg, Bin, TrUserData) ->
    SubBin = e_msg_match_reply(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_enum_result(success, Bin) -> <<Bin/binary, 0>>;
e_enum_result(fail, Bin) -> <<Bin/binary, 1>>;
e_enum_result(V, Bin) -> e_varint(V, Bin).

'e_enum_login_reply.login_result'(new_user, Bin) ->
    <<Bin/binary, 1>>;
'e_enum_login_reply.login_result'(default_role, Bin) ->
    <<Bin/binary, 2>>;
'e_enum_login_reply.login_result'(role_list, Bin) ->
    <<Bin/binary, 3>>;
'e_enum_login_reply.login_result'(V, Bin) ->
    e_varint(V, Bin).

'e_enum_create_role_reply.create_role_result'(success,
					      Bin) ->
    <<Bin/binary, 0>>;
'e_enum_create_role_reply.create_role_result'(nickname_repeat,
					      Bin) ->
    <<Bin/binary, 1>>;
'e_enum_create_role_reply.create_role_result'(nickname_error,
					      Bin) ->
    <<Bin/binary, 2>>;
'e_enum_create_role_reply.create_role_result'(nickname_dirty,
					      Bin) ->
    <<Bin/binary, 3>>;
'e_enum_create_role_reply.create_role_result'(V, Bin) ->
    e_varint(V, Bin).

e_enum_match_result(success, Bin) -> <<Bin/binary, 1>>;
e_enum_match_result(matching, Bin) -> <<Bin/binary, 2>>;
e_enum_match_result(matched, Bin) -> <<Bin/binary, 3>>;
e_enum_match_result(V, Bin) -> e_varint(V, Bin).

'e_enum_reward.reward_type'(element, Bin) ->
    <<Bin/binary, 1>>;
'e_enum_reward.reward_type'(V, Bin) -> e_varint(V, Bin).

e_enum_team_member_state(inviting, Bin) ->
    <<Bin/binary, 1>>;
e_enum_team_member_state(unready, Bin) ->
    <<Bin/binary, 2>>;
e_enum_team_member_state(ready, Bin) ->
    <<Bin/binary, 3>>;
e_enum_team_member_state(V, Bin) -> e_varint(V, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      name_card_st ->
	  try d_msg_name_card_st(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, name_card_st, {Class, Reason, StackTrace}}}})
	  end;
      role_st ->
	  try d_msg_role_st(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, role_st, {Class, Reason, StackTrace}}}})
	  end;
      create_role_reply ->
	  try d_msg_create_role_reply(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, create_role_reply, {Class, Reason, StackTrace}}}})
	  end;
      match_reply ->
	  try d_msg_match_reply(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, match_reply, {Class, Reason, StackTrace}}}})
	  end;
      team_member_st ->
	  try d_msg_team_member_st(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, team_member_st, {Class, Reason, StackTrace}}}})
	  end;
      team_info_st ->
	  try d_msg_team_info_st(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, team_info_st, {Class, Reason, StackTrace}}}})
	  end;
      team_reply ->
	  try d_msg_team_reply(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, team_reply, {Class, Reason, StackTrace}}}})
	  end;
      select_magic_reply ->
	  try d_msg_select_magic_reply(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, select_magic_reply,
			 {Class, Reason, StackTrace}}}})
	  end;
      magic_reply ->
	  try d_msg_magic_reply(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, magic_reply, {Class, Reason, StackTrace}}}})
	  end;
      rtnotify_callback_reply ->
	  try d_msg_rtnotify_callback_reply(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, rtnotify_callback_reply,
			 {Class, Reason, StackTrace}}}})
	  end;
      rtnotify_keepalive_reply ->
	  try d_msg_rtnotify_keepalive_reply(Bin, TrUserData)
	  catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, rtnotify_keepalive_reply,
			 {Class, Reason, StackTrace}}}})
	  end;
      rtnotify_reply ->
	  try d_msg_rtnotify_reply(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, rtnotify_reply, {Class, Reason, StackTrace}}}})
	  end;
      lookup_role_reply ->
	  try d_msg_lookup_role_reply(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, lookup_role_reply, {Class, Reason, StackTrace}}}})
	  end;
      select_role_reply ->
	  try d_msg_select_role_reply(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, select_role_reply, {Class, Reason, StackTrace}}}})
	  end;
      role_reply ->
	  try d_msg_role_reply(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, role_reply, {Class, Reason, StackTrace}}}})
	  end;
      role_summary_st ->
	  try d_msg_role_summary_st(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, role_summary_st, {Class, Reason, StackTrace}}}})
	  end;
      login_reply ->
	  try d_msg_login_reply(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, login_reply, {Class, Reason, StackTrace}}}})
	  end;
      reward ->
	  try d_msg_reward(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, reward, {Class, Reason, StackTrace}}}})
	  end;
      battle_reward ->
	  try d_msg_battle_reward(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, battle_reward, {Class, Reason, StackTrace}}}})
	  end;
      battle_result_notify ->
	  try d_msg_battle_result_notify(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, battle_result_notify,
			 {Class, Reason, StackTrace}}}})
	  end;
      battle_team_member ->
	  try d_msg_battle_team_member(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, battle_team_member,
			 {Class, Reason, StackTrace}}}})
	  end;
      battle_team ->
	  try d_msg_battle_team(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, battle_team, {Class, Reason, StackTrace}}}})
	  end;
      battle_match_notify ->
	  try d_msg_battle_match_notify(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, battle_match_notify,
			 {Class, Reason, StackTrace}}}})
	  end;
      team_notify ->
	  try d_msg_team_notify(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, team_notify, {Class, Reason, StackTrace}}}})
	  end;
      notify_msg ->
	  try d_msg_notify_msg(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, notify_msg, {Class, Reason, StackTrace}}}})
	  end;
      error_info ->
	  try d_msg_error_info(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, error_info, {Class, Reason, StackTrace}}}})
	  end;
      down_msg ->
	  try d_msg_down_msg(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, down_msg, {Class, Reason, StackTrace}}}})
	  end;
      battle_stat ->
	  try d_msg_battle_stat(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, battle_stat, {Class, Reason, StackTrace}}}})
	  end
    end.



d_msg_name_card_st(Bin, TrUserData) ->
    dfp_read_field_def_name_card_st(Bin, 0, 0,
				    id(undefined, TrUserData),
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_name_card_st(<<10, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_name_card_st_name(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_name_card_st(<<16, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_name_card_st_last_set_time(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
dfp_read_field_def_name_card_st(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    #name_card_st{name = F@_1, last_set_time = F@_2};
dfp_read_field_def_name_card_st(Other, Z1, Z2, F@_1,
				F@_2, TrUserData) ->
    dg_read_field_def_name_card_st(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData).

dg_read_field_def_name_card_st(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_name_card_st(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_name_card_st(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_name_card_st_name(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      16 ->
	  d_field_name_card_st_last_set_time(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_name_card_st(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    1 ->
		skip_64_name_card_st(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    2 ->
		skip_length_delimited_name_card_st(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    3 ->
		skip_group_name_card_st(Rest, Key bsr 3, 0, F@_1, F@_2,
					TrUserData);
	    5 ->
		skip_32_name_card_st(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_name_card_st(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #name_card_st{name = F@_1, last_set_time = F@_2}.

d_field_name_card_st_name(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_name_card_st_name(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_name_card_st_name(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_name_card_st(RestF, 0, 0, NewFValue,
				    F@_2, TrUserData).

d_field_name_card_st_last_set_time(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_name_card_st_last_set_time(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_name_card_st_last_set_time(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_name_card_st(RestF, 0, 0, F@_1,
				    NewFValue, TrUserData).

skip_varint_name_card_st(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_name_card_st(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
skip_varint_name_card_st(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_name_card_st(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_length_delimited_name_card_st(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_name_card_st(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_name_card_st(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_name_card_st(Rest2, 0, 0, F@_1, F@_2,
				    TrUserData).

skip_group_name_card_st(Bin, FNum, Z2, F@_1, F@_2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_name_card_st(Rest, 0, Z2, F@_1, F@_2,
				    TrUserData).

skip_32_name_card_st(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_name_card_st(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_64_name_card_st(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_name_card_st(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

d_msg_role_st(Bin, TrUserData) ->
    dfp_read_field_def_role_st(Bin, 0, 0,
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_role_st(<<8, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_role_st_role_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_role_st(<<16, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_role_st_elf_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
dfp_read_field_def_role_st(<<26, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_role_st_name_card(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_role_st(<<32, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_role_st_level(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, TrUserData);
dfp_read_field_def_role_st(<<40, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_role_st_exp(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, TrUserData);
dfp_read_field_def_role_st(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, _) ->
    #role_st{role_id = F@_1, elf_id = F@_2,
	     name_card = F@_3, level = F@_4, exp = F@_5};
dfp_read_field_def_role_st(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_role_st(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_role_st(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_role_st(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_role_st(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_role_st_role_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      16 ->
	  d_field_role_st_elf_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, TrUserData);
      26 ->
	  d_field_role_st_name_card(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, TrUserData);
      32 ->
	  d_field_role_st_level(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, TrUserData);
      40 ->
	  d_field_role_st_exp(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_role_st(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, TrUserData);
	    1 ->
		skip_64_role_st(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, TrUserData);
	    2 ->
		skip_length_delimited_role_st(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_role_st(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_role_st(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, TrUserData)
	  end
    end;
dg_read_field_def_role_st(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, _) ->
    #role_st{role_id = F@_1, elf_id = F@_2,
	     name_card = F@_3, level = F@_4, exp = F@_5}.

d_field_role_st_role_id(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_role_st_role_id(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_role_st_role_id(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_role_st(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

d_field_role_st_elf_id(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_role_st_elf_id(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_role_st_elf_id(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_role_st(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, F@_4, F@_5, TrUserData).

d_field_role_st_name_card(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_role_st_name_card(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_role_st_name_card(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, Prev, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_name_card_st(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_role_st(RestF, 0, 0, F@_1, F@_2,
			       if Prev == undefined -> NewFValue;
				  true ->
				      merge_msg_name_card_st(Prev, NewFValue,
							     TrUserData)
			       end,
			       F@_4, F@_5, TrUserData).

d_field_role_st_level(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_role_st_level(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_role_st_level(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_role_st(RestF, 0, 0, F@_1, F@_2,
			       F@_3, NewFValue, F@_5, TrUserData).

d_field_role_st_exp(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_role_st_exp(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_role_st_exp(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_role_st(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, NewFValue, TrUserData).

skip_varint_role_st(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_role_st(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, TrUserData);
skip_varint_role_st(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_role_st(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_role_st(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_role_st(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData);
skip_length_delimited_role_st(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_role_st(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_group_role_st(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_role_st(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_32_role_st(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_role_st(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_64_role_st(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_role_st(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

d_msg_create_role_reply(Bin, TrUserData) ->
    dfp_read_field_def_create_role_reply(Bin, 0, 0,
					 id(undefined, TrUserData),
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_create_role_reply(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_create_role_reply_result(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_create_role_reply(<<18,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_create_role_reply_role(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
dfp_read_field_def_create_role_reply(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #create_role_reply{result = F@_1, role = F@_2};
dfp_read_field_def_create_role_reply(Other, Z1, Z2,
				     F@_1, F@_2, TrUserData) ->
    dg_read_field_def_create_role_reply(Other, Z1, Z2, F@_1,
					F@_2, TrUserData).

dg_read_field_def_create_role_reply(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_create_role_reply(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_create_role_reply(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_create_role_reply_result(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      18 ->
	  d_field_create_role_reply_role(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_create_role_reply(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    1 ->
		skip_64_create_role_reply(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    2 ->
		skip_length_delimited_create_role_reply(Rest, 0, 0,
							F@_1, F@_2, TrUserData);
	    3 ->
		skip_group_create_role_reply(Rest, Key bsr 3, 0, F@_1,
					     F@_2, TrUserData);
	    5 ->
		skip_32_create_role_reply(Rest, 0, 0, F@_1, F@_2,
					  TrUserData)
	  end
    end;
dg_read_field_def_create_role_reply(<<>>, 0, 0, F@_1,
				    F@_2, _) ->
    #create_role_reply{result = F@_1, role = F@_2}.

d_field_create_role_reply_result(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_create_role_reply_result(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_create_role_reply_result(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} =
	{'d_enum_create_role_reply.create_role_result'(begin
							 <<Res:32/signed-native>> =
							     <<(X bsl N +
								  Acc):32/unsigned-native>>,
							 Res
						       end),
	 Rest},
    dfp_read_field_def_create_role_reply(RestF, 0, 0,
					 NewFValue, F@_2, TrUserData).

d_field_create_role_reply_role(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_create_role_reply_role(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_create_role_reply_role(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_role_st(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_create_role_reply(RestF, 0, 0, F@_1,
					 if Prev == undefined -> NewFValue;
					    true ->
						merge_msg_role_st(Prev,
								  NewFValue,
								  TrUserData)
					 end,
					 TrUserData).

skip_varint_create_role_reply(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_create_role_reply(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
skip_varint_create_role_reply(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_create_role_reply(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_length_delimited_create_role_reply(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_create_role_reply(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
skip_length_delimited_create_role_reply(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_create_role_reply(Rest2, 0, 0, F@_1,
					 F@_2, TrUserData).

skip_group_create_role_reply(Bin, FNum, Z2, F@_1, F@_2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_create_role_reply(Rest, 0, Z2, F@_1,
					 F@_2, TrUserData).

skip_32_create_role_reply(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_create_role_reply(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_64_create_role_reply(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_create_role_reply(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

d_msg_match_reply(Bin, TrUserData) ->
    dfp_read_field_def_match_reply(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_match_reply(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_match_reply_start(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_match_reply(<<16, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_match_reply_cancel(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_match_reply(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #match_reply{start = F@_1, cancel = F@_2};
dfp_read_field_def_match_reply(Other, Z1, Z2, F@_1,
			       F@_2, TrUserData) ->
    dg_read_field_def_match_reply(Other, Z1, Z2, F@_1, F@_2,
				  TrUserData).

dg_read_field_def_match_reply(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_match_reply(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_match_reply(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_match_reply_start(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      16 ->
	  d_field_match_reply_cancel(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_match_reply(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    1 ->
		skip_64_match_reply(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_match_reply(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    3 ->
		skip_group_match_reply(Rest, Key bsr 3, 0, F@_1, F@_2,
				       TrUserData);
	    5 ->
		skip_32_match_reply(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_match_reply(<<>>, 0, 0, F@_1, F@_2,
			      _) ->
    #match_reply{start = F@_1, cancel = F@_2}.

d_field_match_reply_start(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_match_reply_start(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_match_reply_start(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {d_enum_match_result(begin
						<<Res:32/signed-native>> = <<(X
										bsl
										N
										+
										Acc):32/unsigned-native>>,
						Res
					      end),
			  Rest},
    dfp_read_field_def_match_reply(RestF, 0, 0, NewFValue,
				   F@_2, TrUserData).

d_field_match_reply_cancel(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_match_reply_cancel(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_match_reply_cancel(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {d_enum_match_result(begin
						<<Res:32/signed-native>> = <<(X
										bsl
										N
										+
										Acc):32/unsigned-native>>,
						Res
					      end),
			  Rest},
    dfp_read_field_def_match_reply(RestF, 0, 0, F@_1,
				   NewFValue, TrUserData).

skip_varint_match_reply(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_match_reply(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
skip_varint_match_reply(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_match_reply(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_length_delimited_match_reply(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_match_reply(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_match_reply(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_match_reply(Rest2, 0, 0, F@_1, F@_2,
				   TrUserData).

skip_group_match_reply(Bin, FNum, Z2, F@_1, F@_2,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_match_reply(Rest, 0, Z2, F@_1, F@_2,
				   TrUserData).

skip_32_match_reply(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_match_reply(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_64_match_reply(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_match_reply(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

d_msg_team_member_st(Bin, TrUserData) ->
    dfp_read_field_def_team_member_st(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_team_member_st(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_team_member_st_user_id(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_team_member_st(<<16, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_team_member_st_state(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_team_member_st(<<24, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_team_member_st_elf_id(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_team_member_st(<<34, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_team_member_st_name(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_team_member_st(<<40, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_team_member_st_level(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_team_member_st(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, F@_4, F@_5, _) ->
    #team_member_st{user_id = F@_1, state = F@_2,
		    elf_id = F@_3, name = F@_4, level = F@_5};
dfp_read_field_def_team_member_st(Other, Z1, Z2, F@_1,
				  F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_team_member_st(Other, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_team_member_st(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_team_member_st(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
dg_read_field_def_team_member_st(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_team_member_st_user_id(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, TrUserData);
      16 ->
	  d_field_team_member_st_state(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, TrUserData);
      24 ->
	  d_field_team_member_st_elf_id(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, TrUserData);
      34 ->
	  d_field_team_member_st_name(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, TrUserData);
      40 ->
	  d_field_team_member_st_level(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_team_member_st(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_team_member_st(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_team_member_st(Rest, 0, 0, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     TrUserData);
	    3 ->
		skip_group_team_member_st(Rest, Key bsr 3, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_team_member_st(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_team_member_st(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, _) ->
    #team_member_st{user_id = F@_1, state = F@_2,
		    elf_id = F@_3, name = F@_4, level = F@_5}.

d_field_team_member_st_user_id(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_team_member_st_user_id(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData);
d_field_team_member_st_user_id(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_team_member_st(RestF, 0, 0,
				      NewFValue, F@_2, F@_3, F@_4, F@_5,
				      TrUserData).

d_field_team_member_st_state(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_team_member_st_state(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_team_member_st_state(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {d_enum_team_member_state(begin
						     <<Res:32/signed-native>> =
							 <<(X bsl N +
							      Acc):32/unsigned-native>>,
						     Res
						   end),
			  Rest},
    dfp_read_field_def_team_member_st(RestF, 0, 0, F@_1,
				      NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_team_member_st_elf_id(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_team_member_st_elf_id(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData);
d_field_team_member_st_elf_id(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_team_member_st(RestF, 0, 0, F@_1,
				      F@_2, NewFValue, F@_4, F@_5, TrUserData).

d_field_team_member_st_name(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_team_member_st_name(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_team_member_st_name(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_team_member_st(RestF, 0, 0, F@_1,
				      F@_2, F@_3, NewFValue, F@_5, TrUserData).

d_field_team_member_st_level(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_team_member_st_level(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_team_member_st_level(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_team_member_st(RestF, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, NewFValue, TrUserData).

skip_varint_team_member_st(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_team_member_st(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
skip_varint_team_member_st(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_team_member_st(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_team_member_st(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData)
    when N < 57 ->
    skip_length_delimited_team_member_st(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, TrUserData);
skip_length_delimited_team_member_st(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_team_member_st(Rest2, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_team_member_st(Bin, FNum, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_team_member_st(Rest, 0, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_team_member_st(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_team_member_st(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_team_member_st(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_team_member_st(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

d_msg_team_info_st(Bin, TrUserData) ->
    dfp_read_field_def_team_info_st(Bin, 0, 0,
				    id([], TrUserData),
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_team_info_st(<<10, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_team_info_st_members(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_team_info_st(<<16, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_team_info_st_leader_id(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
dfp_read_field_def_team_info_st(<<>>, 0, 0, R1, F@_2,
				TrUserData) ->
    #team_info_st{members = lists_reverse(R1, TrUserData),
		  leader_id = F@_2};
dfp_read_field_def_team_info_st(Other, Z1, Z2, F@_1,
				F@_2, TrUserData) ->
    dg_read_field_def_team_info_st(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData).

dg_read_field_def_team_info_st(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_team_info_st(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_team_info_st(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_team_info_st_members(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      16 ->
	  d_field_team_info_st_leader_id(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_team_info_st(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    1 ->
		skip_64_team_info_st(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    2 ->
		skip_length_delimited_team_info_st(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    3 ->
		skip_group_team_info_st(Rest, Key bsr 3, 0, F@_1, F@_2,
					TrUserData);
	    5 ->
		skip_32_team_info_st(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_team_info_st(<<>>, 0, 0, R1, F@_2,
			       TrUserData) ->
    #team_info_st{members = lists_reverse(R1, TrUserData),
		  leader_id = F@_2}.

d_field_team_info_st_members(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_team_info_st_members(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_team_info_st_members(<<0:1, X:7, Rest/binary>>,
			     N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_team_member_st(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_team_info_st(RestF, 0, 0,
				    cons(NewFValue, Prev, TrUserData), F@_2,
				    TrUserData).

d_field_team_info_st_leader_id(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_team_info_st_leader_id(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_team_info_st_leader_id(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_team_info_st(RestF, 0, 0, F@_1,
				    NewFValue, TrUserData).

skip_varint_team_info_st(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_team_info_st(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
skip_varint_team_info_st(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_team_info_st(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_length_delimited_team_info_st(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_team_info_st(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_team_info_st(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_team_info_st(Rest2, 0, 0, F@_1, F@_2,
				    TrUserData).

skip_group_team_info_st(Bin, FNum, Z2, F@_1, F@_2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_team_info_st(Rest, 0, Z2, F@_1, F@_2,
				    TrUserData).

skip_32_team_info_st(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_team_info_st(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_64_team_info_st(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_team_info_st(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

d_msg_team_reply(Bin, TrUserData) ->
    dfp_read_field_def_team_reply(Bin, 0, 0,
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_team_reply(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_team_reply_invite(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_team_reply(<<18, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_team_reply_accept(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_team_reply(<<24, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_team_reply_refuse(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_team_reply(<<32, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_team_reply_state(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData);
dfp_read_field_def_team_reply(<<40, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_team_reply_leave(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData);
dfp_read_field_def_team_reply(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, F@_5, _) ->
    #team_reply{invite = F@_1, accept = F@_2, refuse = F@_3,
		state = F@_4, leave = F@_5};
dfp_read_field_def_team_reply(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_team_reply(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_team_reply(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_team_reply(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_team_reply(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_team_reply_invite(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, TrUserData);
      18 ->
	  d_field_team_reply_accept(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, TrUserData);
      24 ->
	  d_field_team_reply_refuse(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, TrUserData);
      32 ->
	  d_field_team_reply_state(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
      40 ->
	  d_field_team_reply_leave(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_team_reply(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_team_reply(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, TrUserData);
	    2 ->
		skip_length_delimited_team_reply(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_team_reply(Rest, Key bsr 3, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_team_reply(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, TrUserData)
	  end
    end;
dg_read_field_def_team_reply(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, F@_4, F@_5, _) ->
    #team_reply{invite = F@_1, accept = F@_2, refuse = F@_3,
		state = F@_4, leave = F@_5}.

d_field_team_reply_invite(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_team_reply_invite(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_team_reply_invite(<<0:1, X:7, Rest/binary>>, N,
			  Acc, Prev, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_team_member_st(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_team_reply(RestF, 0, 0,
				  if Prev == undefined -> NewFValue;
				     true ->
					 merge_msg_team_member_st(Prev,
								  NewFValue,
								  TrUserData)
				  end,
				  F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_team_reply_accept(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_team_reply_accept(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_team_reply_accept(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, Prev, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_team_info_st(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_team_reply(RestF, 0, 0, F@_1,
				  if Prev == undefined -> NewFValue;
				     true ->
					 merge_msg_team_info_st(Prev, NewFValue,
								TrUserData)
				  end,
				  F@_3, F@_4, F@_5, TrUserData).

d_field_team_reply_refuse(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_team_reply_refuse(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_team_reply_refuse(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {d_enum_result(begin
					  <<Res:32/signed-native>> = <<(X bsl N
									  +
									  Acc):32/unsigned-native>>,
					  Res
					end),
			  Rest},
    dfp_read_field_def_team_reply(RestF, 0, 0, F@_1, F@_2,
				  NewFValue, F@_4, F@_5, TrUserData).

d_field_team_reply_state(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_team_reply_state(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_team_reply_state(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {d_enum_result(begin
					  <<Res:32/signed-native>> = <<(X bsl N
									  +
									  Acc):32/unsigned-native>>,
					  Res
					end),
			  Rest},
    dfp_read_field_def_team_reply(RestF, 0, 0, F@_1, F@_2,
				  F@_3, NewFValue, F@_5, TrUserData).

d_field_team_reply_leave(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_team_reply_leave(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_team_reply_leave(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {d_enum_result(begin
					  <<Res:32/signed-native>> = <<(X bsl N
									  +
									  Acc):32/unsigned-native>>,
					  Res
					end),
			  Rest},
    dfp_read_field_def_team_reply(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, NewFValue, TrUserData).

skip_varint_team_reply(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_team_reply(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
skip_varint_team_reply(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_team_reply(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_team_reply(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 57 ->
    skip_length_delimited_team_reply(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
skip_length_delimited_team_reply(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_team_reply(Rest2, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_group_team_reply(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		      F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_team_reply(Rest, 0, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_32_team_reply(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_team_reply(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_64_team_reply(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_team_reply(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

d_msg_select_magic_reply(Bin, TrUserData) ->
    dfp_read_field_def_select_magic_reply(Bin, 0, 0,
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_select_magic_reply(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_select_magic_reply_result(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_select_magic_reply(<<>>, 0, 0, F@_1,
				      _) ->
    #select_magic_reply{result = F@_1};
dfp_read_field_def_select_magic_reply(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_select_magic_reply(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_select_magic_reply(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_select_magic_reply(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_select_magic_reply(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_select_magic_reply_result(Rest, 0, 0, F@_1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_select_magic_reply(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_select_magic_reply(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_select_magic_reply(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_select_magic_reply(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_select_magic_reply(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_select_magic_reply(<<>>, 0, 0, F@_1,
				     _) ->
    #select_magic_reply{result = F@_1}.

d_field_select_magic_reply_result(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_select_magic_reply_result(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_select_magic_reply_result(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {d_enum_result(begin
					  <<Res:32/signed-native>> = <<(X bsl N
									  +
									  Acc):32/unsigned-native>>,
					  Res
					end),
			  Rest},
    dfp_read_field_def_select_magic_reply(RestF, 0, 0,
					  NewFValue, TrUserData).

skip_varint_select_magic_reply(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_select_magic_reply(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_select_magic_reply(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_select_magic_reply(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_select_magic_reply(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_select_magic_reply(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_select_magic_reply(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_select_magic_reply(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_select_magic_reply(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_select_magic_reply(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_select_magic_reply(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_select_magic_reply(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_select_magic_reply(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_select_magic_reply(Rest, Z1, Z2,
					  F@_1, TrUserData).

d_msg_magic_reply(Bin, TrUserData) ->
    dfp_read_field_def_magic_reply(Bin, 0, 0,
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_magic_reply(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_magic_reply_select(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_magic_reply(<<>>, 0, 0, F@_1, _) ->
    #magic_reply{select = F@_1};
dfp_read_field_def_magic_reply(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_magic_reply(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_magic_reply(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_magic_reply(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_magic_reply(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_magic_reply_select(Rest, 0, 0, F@_1,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_magic_reply(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_magic_reply(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_magic_reply(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_magic_reply(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_magic_reply(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_magic_reply(<<>>, 0, 0, F@_1, _) ->
    #magic_reply{select = F@_1}.

d_field_magic_reply_select(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_magic_reply_select(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_magic_reply_select(<<0:1, X:7, Rest/binary>>, N,
			   Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_select_magic_reply(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_magic_reply(RestF, 0, 0,
				   if Prev == undefined -> NewFValue;
				      true ->
					  merge_msg_select_magic_reply(Prev,
								       NewFValue,
								       TrUserData)
				   end,
				   TrUserData).

skip_varint_magic_reply(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_magic_reply(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_magic_reply(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_magic_reply(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_magic_reply(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_magic_reply(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_magic_reply(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_magic_reply(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_magic_reply(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_magic_reply(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_magic_reply(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_magic_reply(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_magic_reply(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_magic_reply(Rest, Z1, Z2, F@_1,
				   TrUserData).

d_msg_rtnotify_callback_reply(Bin, TrUserData) ->
    dfp_read_field_def_rtnotify_callback_reply(Bin, 0, 0,
					       id(undefined, TrUserData),
					       TrUserData).

dfp_read_field_def_rtnotify_callback_reply(<<8,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    d_field_rtnotify_callback_reply_string(Rest, Z1, Z2,
					   F@_1, TrUserData);
dfp_read_field_def_rtnotify_callback_reply(<<>>, 0, 0,
					   F@_1, _) ->
    #rtnotify_callback_reply{string = F@_1};
dfp_read_field_def_rtnotify_callback_reply(Other, Z1,
					   Z2, F@_1, TrUserData) ->
    dg_read_field_def_rtnotify_callback_reply(Other, Z1, Z2,
					      F@_1, TrUserData).

dg_read_field_def_rtnotify_callback_reply(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rtnotify_callback_reply(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_rtnotify_callback_reply(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rtnotify_callback_reply_string(Rest, 0, 0, F@_1,
						 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rtnotify_callback_reply(Rest, 0, 0, F@_1,
						    TrUserData);
	    1 ->
		skip_64_rtnotify_callback_reply(Rest, 0, 0, F@_1,
						TrUserData);
	    2 ->
		skip_length_delimited_rtnotify_callback_reply(Rest, 0,
							      0, F@_1,
							      TrUserData);
	    3 ->
		skip_group_rtnotify_callback_reply(Rest, Key bsr 3, 0,
						   F@_1, TrUserData);
	    5 ->
		skip_32_rtnotify_callback_reply(Rest, 0, 0, F@_1,
						TrUserData)
	  end
    end;
dg_read_field_def_rtnotify_callback_reply(<<>>, 0, 0,
					  F@_1, _) ->
    #rtnotify_callback_reply{string = F@_1}.

d_field_rtnotify_callback_reply_string(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_rtnotify_callback_reply_string(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
d_field_rtnotify_callback_reply_string(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_rtnotify_callback_reply(RestF, 0, 0,
					       NewFValue, TrUserData).

skip_varint_rtnotify_callback_reply(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_rtnotify_callback_reply(Rest, Z1, Z2, F@_1,
					TrUserData);
skip_varint_rtnotify_callback_reply(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_rtnotify_callback_reply(Rest, Z1, Z2,
					       F@_1, TrUserData).

skip_length_delimited_rtnotify_callback_reply(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rtnotify_callback_reply(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  TrUserData);
skip_length_delimited_rtnotify_callback_reply(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rtnotify_callback_reply(Rest2, 0, 0,
					       F@_1, TrUserData).

skip_group_rtnotify_callback_reply(Bin, FNum, Z2, F@_1,
				   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_rtnotify_callback_reply(Rest, 0, Z2,
					       F@_1, TrUserData).

skip_32_rtnotify_callback_reply(<<_:32, Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_rtnotify_callback_reply(Rest, Z1, Z2,
					       F@_1, TrUserData).

skip_64_rtnotify_callback_reply(<<_:64, Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_rtnotify_callback_reply(Rest, Z1, Z2,
					       F@_1, TrUserData).

d_msg_rtnotify_keepalive_reply(Bin, TrUserData) ->
    dfp_read_field_def_rtnotify_keepalive_reply(Bin, 0, 0,
						id(undefined, TrUserData),
						TrUserData).

dfp_read_field_def_rtnotify_keepalive_reply(<<8,
					      Rest/binary>>,
					    Z1, Z2, F@_1, TrUserData) ->
    d_field_rtnotify_keepalive_reply_time(Rest, Z1, Z2,
					  F@_1, TrUserData);
dfp_read_field_def_rtnotify_keepalive_reply(<<>>, 0, 0,
					    F@_1, _) ->
    #rtnotify_keepalive_reply{time = F@_1};
dfp_read_field_def_rtnotify_keepalive_reply(Other, Z1,
					    Z2, F@_1, TrUserData) ->
    dg_read_field_def_rtnotify_keepalive_reply(Other, Z1,
					       Z2, F@_1, TrUserData).

dg_read_field_def_rtnotify_keepalive_reply(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rtnotify_keepalive_reply(Rest, N + 7,
					       X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_rtnotify_keepalive_reply(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rtnotify_keepalive_reply_time(Rest, 0, 0, F@_1,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rtnotify_keepalive_reply(Rest, 0, 0, F@_1,
						     TrUserData);
	    1 ->
		skip_64_rtnotify_keepalive_reply(Rest, 0, 0, F@_1,
						 TrUserData);
	    2 ->
		skip_length_delimited_rtnotify_keepalive_reply(Rest, 0,
							       0, F@_1,
							       TrUserData);
	    3 ->
		skip_group_rtnotify_keepalive_reply(Rest, Key bsr 3, 0,
						    F@_1, TrUserData);
	    5 ->
		skip_32_rtnotify_keepalive_reply(Rest, 0, 0, F@_1,
						 TrUserData)
	  end
    end;
dg_read_field_def_rtnotify_keepalive_reply(<<>>, 0, 0,
					   F@_1, _) ->
    #rtnotify_keepalive_reply{time = F@_1}.

d_field_rtnotify_keepalive_reply_time(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_rtnotify_keepalive_reply_time(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
d_field_rtnotify_keepalive_reply_time(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_rtnotify_keepalive_reply(RestF, 0, 0,
						NewFValue, TrUserData).

skip_varint_rtnotify_keepalive_reply(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_rtnotify_keepalive_reply(Rest, Z1, Z2, F@_1,
					 TrUserData);
skip_varint_rtnotify_keepalive_reply(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_rtnotify_keepalive_reply(Rest, Z1,
						Z2, F@_1, TrUserData).

skip_length_delimited_rtnotify_keepalive_reply(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rtnotify_keepalive_reply(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   TrUserData);
skip_length_delimited_rtnotify_keepalive_reply(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rtnotify_keepalive_reply(Rest2, 0, 0,
						F@_1, TrUserData).

skip_group_rtnotify_keepalive_reply(Bin, FNum, Z2, F@_1,
				    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_rtnotify_keepalive_reply(Rest, 0, Z2,
						F@_1, TrUserData).

skip_32_rtnotify_keepalive_reply(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_rtnotify_keepalive_reply(Rest, Z1,
						Z2, F@_1, TrUserData).

skip_64_rtnotify_keepalive_reply(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_rtnotify_keepalive_reply(Rest, Z1,
						Z2, F@_1, TrUserData).

d_msg_rtnotify_reply(Bin, TrUserData) ->
    dfp_read_field_def_rtnotify_reply(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rtnotify_reply(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_rtnotify_reply_register(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData);
dfp_read_field_def_rtnotify_reply(<<18, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_rtnotify_reply_keepalive(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData);
dfp_read_field_def_rtnotify_reply(<<26, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_rtnotify_reply_callback(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData);
dfp_read_field_def_rtnotify_reply(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, _) ->
    #rtnotify_reply{register = F@_1, keepalive = F@_2,
		    callback = F@_3};
dfp_read_field_def_rtnotify_reply(Other, Z1, Z2, F@_1,
				  F@_2, F@_3, TrUserData) ->
    dg_read_field_def_rtnotify_reply(Other, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

dg_read_field_def_rtnotify_reply(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rtnotify_reply(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
dg_read_field_def_rtnotify_reply(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rtnotify_reply_register(Rest, 0, 0, F@_1, F@_2,
					  F@_3, TrUserData);
      18 ->
	  d_field_rtnotify_reply_keepalive(Rest, 0, 0, F@_1, F@_2,
					   F@_3, TrUserData);
      26 ->
	  d_field_rtnotify_reply_callback(Rest, 0, 0, F@_1, F@_2,
					  F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rtnotify_reply(Rest, 0, 0, F@_1, F@_2, F@_3,
					   TrUserData);
	    1 ->
		skip_64_rtnotify_reply(Rest, 0, 0, F@_1, F@_2, F@_3,
				       TrUserData);
	    2 ->
		skip_length_delimited_rtnotify_reply(Rest, 0, 0, F@_1,
						     F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_rtnotify_reply(Rest, Key bsr 3, 0, F@_1,
					  F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_rtnotify_reply(Rest, 0, 0, F@_1, F@_2, F@_3,
				       TrUserData)
	  end
    end;
dg_read_field_def_rtnotify_reply(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, _) ->
    #rtnotify_reply{register = F@_1, keepalive = F@_2,
		    callback = F@_3}.

d_field_rtnotify_reply_register(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_rtnotify_reply_register(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
d_field_rtnotify_reply_register(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {d_enum_result(begin
					  <<Res:32/signed-native>> = <<(X bsl N
									  +
									  Acc):32/unsigned-native>>,
					  Res
					end),
			  Rest},
    dfp_read_field_def_rtnotify_reply(RestF, 0, 0,
				      NewFValue, F@_2, F@_3, TrUserData).

d_field_rtnotify_reply_keepalive(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_rtnotify_reply_keepalive(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
d_field_rtnotify_reply_keepalive(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_rtnotify_keepalive_reply(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_rtnotify_reply(RestF, 0, 0, F@_1,
				      if Prev == undefined -> NewFValue;
					 true ->
					     merge_msg_rtnotify_keepalive_reply(Prev,
										NewFValue,
										TrUserData)
				      end,
				      F@_3, TrUserData).

d_field_rtnotify_reply_callback(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_rtnotify_reply_callback(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
d_field_rtnotify_reply_callback(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_rtnotify_callback_reply(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_rtnotify_reply(RestF, 0, 0, F@_1,
				      F@_2,
				      if Prev == undefined -> NewFValue;
					 true ->
					     merge_msg_rtnotify_callback_reply(Prev,
									       NewFValue,
									       TrUserData)
				      end,
				      TrUserData).

skip_varint_rtnotify_reply(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_rtnotify_reply(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
skip_varint_rtnotify_reply(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_rtnotify_reply(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

skip_length_delimited_rtnotify_reply(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_rtnotify_reply(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3,
					 TrUserData);
skip_length_delimited_rtnotify_reply(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rtnotify_reply(Rest2, 0, 0, F@_1,
				      F@_2, F@_3, TrUserData).

skip_group_rtnotify_reply(Bin, FNum, Z2, F@_1, F@_2,
			  F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_rtnotify_reply(Rest, 0, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

skip_32_rtnotify_reply(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_rtnotify_reply(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

skip_64_rtnotify_reply(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_rtnotify_reply(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

d_msg_lookup_role_reply(Bin, TrUserData) ->
    dfp_read_field_def_lookup_role_reply(Bin, 0, 0,
					 id([], TrUserData), TrUserData).

dfp_read_field_def_lookup_role_reply(<<10,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    d_field_lookup_role_reply_roles(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_lookup_role_reply(<<>>, 0, 0, R1,
				     TrUserData) ->
    #lookup_role_reply{roles =
			   lists_reverse(R1, TrUserData)};
dfp_read_field_def_lookup_role_reply(Other, Z1, Z2,
				     F@_1, TrUserData) ->
    dg_read_field_def_lookup_role_reply(Other, Z1, Z2, F@_1,
					TrUserData).

dg_read_field_def_lookup_role_reply(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_lookup_role_reply(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_lookup_role_reply(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_lookup_role_reply_roles(Rest, 0, 0, F@_1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_lookup_role_reply(Rest, 0, 0, F@_1,
					      TrUserData);
	    1 ->
		skip_64_lookup_role_reply(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_lookup_role_reply(Rest, 0, 0,
							F@_1, TrUserData);
	    3 ->
		skip_group_lookup_role_reply(Rest, Key bsr 3, 0, F@_1,
					     TrUserData);
	    5 ->
		skip_32_lookup_role_reply(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_lookup_role_reply(<<>>, 0, 0, R1,
				    TrUserData) ->
    #lookup_role_reply{roles =
			   lists_reverse(R1, TrUserData)}.

d_field_lookup_role_reply_roles(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_lookup_role_reply_roles(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
d_field_lookup_role_reply_roles(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_role_st(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_lookup_role_reply(RestF, 0, 0,
					 cons(NewFValue, Prev, TrUserData),
					 TrUserData).

skip_varint_lookup_role_reply(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_lookup_role_reply(Rest, Z1, Z2, F@_1,
				  TrUserData);
skip_varint_lookup_role_reply(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_lookup_role_reply(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_length_delimited_lookup_role_reply(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_lookup_role_reply(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_lookup_role_reply(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_lookup_role_reply(Rest2, 0, 0, F@_1,
					 TrUserData).

skip_group_lookup_role_reply(Bin, FNum, Z2, F@_1,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_lookup_role_reply(Rest, 0, Z2, F@_1,
					 TrUserData).

skip_32_lookup_role_reply(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_lookup_role_reply(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_64_lookup_role_reply(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_lookup_role_reply(Rest, Z1, Z2, F@_1,
					 TrUserData).

d_msg_select_role_reply(Bin, TrUserData) ->
    dfp_read_field_def_select_role_reply(Bin, 0, 0,
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_select_role_reply(<<10,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    d_field_select_role_reply_role(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_select_role_reply(<<>>, 0, 0, F@_1,
				     _) ->
    #select_role_reply{role = F@_1};
dfp_read_field_def_select_role_reply(Other, Z1, Z2,
				     F@_1, TrUserData) ->
    dg_read_field_def_select_role_reply(Other, Z1, Z2, F@_1,
					TrUserData).

dg_read_field_def_select_role_reply(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_select_role_reply(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_select_role_reply(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_select_role_reply_role(Rest, 0, 0, F@_1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_select_role_reply(Rest, 0, 0, F@_1,
					      TrUserData);
	    1 ->
		skip_64_select_role_reply(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_select_role_reply(Rest, 0, 0,
							F@_1, TrUserData);
	    3 ->
		skip_group_select_role_reply(Rest, Key bsr 3, 0, F@_1,
					     TrUserData);
	    5 ->
		skip_32_select_role_reply(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_select_role_reply(<<>>, 0, 0, F@_1,
				    _) ->
    #select_role_reply{role = F@_1}.

d_field_select_role_reply_role(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_select_role_reply_role(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_select_role_reply_role(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_role_st(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_select_role_reply(RestF, 0, 0,
					 if Prev == undefined -> NewFValue;
					    true ->
						merge_msg_role_st(Prev,
								  NewFValue,
								  TrUserData)
					 end,
					 TrUserData).

skip_varint_select_role_reply(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_select_role_reply(Rest, Z1, Z2, F@_1,
				  TrUserData);
skip_varint_select_role_reply(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_select_role_reply(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_length_delimited_select_role_reply(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_select_role_reply(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_select_role_reply(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_select_role_reply(Rest2, 0, 0, F@_1,
					 TrUserData).

skip_group_select_role_reply(Bin, FNum, Z2, F@_1,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_select_role_reply(Rest, 0, Z2, F@_1,
					 TrUserData).

skip_32_select_role_reply(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_select_role_reply(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_64_select_role_reply(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_select_role_reply(Rest, Z1, Z2, F@_1,
					 TrUserData).

d_msg_role_reply(Bin, TrUserData) ->
    dfp_read_field_def_role_reply(Bin, 0, 0,
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_role_reply(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_role_reply_create(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
dfp_read_field_def_role_reply(<<18, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_role_reply_select(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
dfp_read_field_def_role_reply(<<26, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_role_reply_lookup(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
dfp_read_field_def_role_reply(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, _) ->
    #role_reply{create = F@_1, select = F@_2,
		lookup = F@_3};
dfp_read_field_def_role_reply(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData) ->
    dg_read_field_def_role_reply(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

dg_read_field_def_role_reply(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_role_reply(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_role_reply(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_role_reply_create(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
      18 ->
	  d_field_role_reply_select(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
      26 ->
	  d_field_role_reply_lookup(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_role_reply(Rest, 0, 0, F@_1, F@_2, F@_3,
				       TrUserData);
	    1 ->
		skip_64_role_reply(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
	    2 ->
		skip_length_delimited_role_reply(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData);
	    3 ->
		skip_group_role_reply(Rest, Key bsr 3, 0, F@_1, F@_2,
				      F@_3, TrUserData);
	    5 ->
		skip_32_role_reply(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData)
	  end
    end;
dg_read_field_def_role_reply(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, _) ->
    #role_reply{create = F@_1, select = F@_2,
		lookup = F@_3}.

d_field_role_reply_create(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_role_reply_create(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
d_field_role_reply_create(<<0:1, X:7, Rest/binary>>, N,
			  Acc, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_create_role_reply(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_role_reply(RestF, 0, 0,
				  if Prev == undefined -> NewFValue;
				     true ->
					 merge_msg_create_role_reply(Prev,
								     NewFValue,
								     TrUserData)
				  end,
				  F@_2, F@_3, TrUserData).

d_field_role_reply_select(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_role_reply_select(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
d_field_role_reply_select(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_select_role_reply(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_role_reply(RestF, 0, 0, F@_1,
				  if Prev == undefined -> NewFValue;
				     true ->
					 merge_msg_select_role_reply(Prev,
								     NewFValue,
								     TrUserData)
				  end,
				  F@_3, TrUserData).

d_field_role_reply_lookup(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_role_reply_lookup(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
d_field_role_reply_lookup(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_lookup_role_reply(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_role_reply(RestF, 0, 0, F@_1, F@_2,
				  if Prev == undefined -> NewFValue;
				     true ->
					 merge_msg_lookup_role_reply(Prev,
								     NewFValue,
								     TrUserData)
				  end,
				  TrUserData).

skip_varint_role_reply(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_role_reply(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
skip_varint_role_reply(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_role_reply(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

skip_length_delimited_role_reply(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_role_reply(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
skip_length_delimited_role_reply(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_role_reply(Rest2, 0, 0, F@_1, F@_2,
				  F@_3, TrUserData).

skip_group_role_reply(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_role_reply(Rest, 0, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

skip_32_role_reply(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_role_reply(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

skip_64_role_reply(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_role_reply(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

d_msg_role_summary_st(Bin, TrUserData) ->
    dfp_read_field_def_role_summary_st(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_role_summary_st(<<8, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    d_field_role_summary_st_role_id(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_role_summary_st(<<16, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    d_field_role_summary_st_elf_id(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData);
dfp_read_field_def_role_summary_st(<<26, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    d_field_role_summary_st_name(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData);
dfp_read_field_def_role_summary_st(<<32, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    d_field_role_summary_st_level(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData);
dfp_read_field_def_role_summary_st(<<>>, 0, 0, F@_1,
				   F@_2, F@_3, F@_4, _) ->
    #role_summary_st{role_id = F@_1, elf_id = F@_2,
		     name = F@_3, level = F@_4};
dfp_read_field_def_role_summary_st(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_role_summary_st(Other, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_role_summary_st(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_role_summary_st(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData);
dg_read_field_def_role_summary_st(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_role_summary_st_role_id(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, TrUserData);
      16 ->
	  d_field_role_summary_st_elf_id(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, TrUserData);
      26 ->
	  d_field_role_summary_st_name(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, TrUserData);
      32 ->
	  d_field_role_summary_st_level(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_role_summary_st(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, TrUserData);
	    1 ->
		skip_64_role_summary_st(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, TrUserData);
	    2 ->
		skip_length_delimited_role_summary_st(Rest, 0, 0, F@_1,
						      F@_2, F@_3, F@_4,
						      TrUserData);
	    3 ->
		skip_group_role_summary_st(Rest, Key bsr 3, 0, F@_1,
					   F@_2, F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_role_summary_st(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, TrUserData)
	  end
    end;
dg_read_field_def_role_summary_st(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, F@_4, _) ->
    #role_summary_st{role_id = F@_1, elf_id = F@_2,
		     name = F@_3, level = F@_4}.

d_field_role_summary_st_role_id(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_role_summary_st_role_id(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
d_field_role_summary_st_role_id(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_role_summary_st(RestF, 0, 0,
				       NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_role_summary_st_elf_id(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_role_summary_st_elf_id(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				   TrUserData);
d_field_role_summary_st_elf_id(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_role_summary_st(RestF, 0, 0, F@_1,
				       NewFValue, F@_3, F@_4, TrUserData).

d_field_role_summary_st_name(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_role_summary_st_name(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_role_summary_st_name(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_role_summary_st(RestF, 0, 0, F@_1,
				       F@_2, NewFValue, F@_4, TrUserData).

d_field_role_summary_st_level(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_role_summary_st_level(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
d_field_role_summary_st_level(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_role_summary_st(RestF, 0, 0, F@_1,
				       F@_2, F@_3, NewFValue, TrUserData).

skip_varint_role_summary_st(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_role_summary_st(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData);
skip_varint_role_summary_st(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_role_summary_st(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_role_summary_st(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData)
    when N < 57 ->
    skip_length_delimited_role_summary_st(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData);
skip_length_delimited_role_summary_st(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_role_summary_st(Rest2, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, TrUserData).

skip_group_role_summary_st(Bin, FNum, Z2, F@_1, F@_2,
			   F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_role_summary_st(Rest, 0, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData).

skip_32_role_summary_st(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_role_summary_st(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData).

skip_64_role_summary_st(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_role_summary_st(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData).

d_msg_login_reply(Bin, TrUserData) ->
    dfp_read_field_def_login_reply(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id([], TrUserData), TrUserData).

dfp_read_field_def_login_reply(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_login_reply_result(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData);
dfp_read_field_def_login_reply(<<16, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_login_reply_user_id(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData);
dfp_read_field_def_login_reply(<<26, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_login_reply_role(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, TrUserData);
dfp_read_field_def_login_reply(<<34, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_login_reply_roles(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData);
dfp_read_field_def_login_reply(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, R1, TrUserData) ->
    #login_reply{result = F@_1, user_id = F@_2, role = F@_3,
		 roles = lists_reverse(R1, TrUserData)};
dfp_read_field_def_login_reply(Other, Z1, Z2, F@_1,
			       F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_login_reply(Other, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

dg_read_field_def_login_reply(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_login_reply(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
dg_read_field_def_login_reply(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_login_reply_result(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, TrUserData);
      16 ->
	  d_field_login_reply_user_id(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, TrUserData);
      26 ->
	  d_field_login_reply_role(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, TrUserData);
      34 ->
	  d_field_login_reply_roles(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_login_reply(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, TrUserData);
	    1 ->
		skip_64_login_reply(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
	    2 ->
		skip_length_delimited_login_reply(Rest, 0, 0, F@_1,
						  F@_2, F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_login_reply(Rest, Key bsr 3, 0, F@_1, F@_2,
				       F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_login_reply(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    TrUserData)
	  end
    end;
dg_read_field_def_login_reply(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, R1, TrUserData) ->
    #login_reply{result = F@_1, user_id = F@_2, role = F@_3,
		 roles = lists_reverse(R1, TrUserData)}.

d_field_login_reply_result(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_login_reply_result(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_login_reply_result(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} =
	{'d_enum_login_reply.login_result'(begin
					     <<Res:32/signed-native>> = <<(X bsl
									     N
									     +
									     Acc):32/unsigned-native>>,
					     Res
					   end),
	 Rest},
    dfp_read_field_def_login_reply(RestF, 0, 0, NewFValue,
				   F@_2, F@_3, F@_4, TrUserData).

d_field_login_reply_user_id(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_login_reply_user_id(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_login_reply_user_id(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_login_reply(RestF, 0, 0, F@_1,
				   NewFValue, F@_3, F@_4, TrUserData).

d_field_login_reply_role(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_login_reply_role(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_login_reply_role(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, Prev, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_role_st(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_login_reply(RestF, 0, 0, F@_1, F@_2,
				   if Prev == undefined -> NewFValue;
				      true ->
					  merge_msg_role_st(Prev, NewFValue,
							    TrUserData)
				   end,
				   F@_4, TrUserData).

d_field_login_reply_roles(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_login_reply_roles(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_login_reply_roles(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_role_summary_st(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_login_reply(RestF, 0, 0, F@_1, F@_2,
				   F@_3, cons(NewFValue, Prev, TrUserData),
				   TrUserData).

skip_varint_login_reply(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_login_reply(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData);
skip_varint_login_reply(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_login_reply(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData).

skip_length_delimited_login_reply(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_login_reply(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData);
skip_length_delimited_login_reply(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_login_reply(Rest2, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, TrUserData).

skip_group_login_reply(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		       F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_login_reply(Rest, 0, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData).

skip_32_login_reply(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_login_reply(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData).

skip_64_login_reply(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_login_reply(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData).

d_msg_reward(Bin, TrUserData) ->
    dfp_read_field_def_reward(Bin, 0, 0,
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_reward(<<8, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_reward_type(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, TrUserData);
dfp_read_field_def_reward(<<16, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_reward_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		      TrUserData);
dfp_read_field_def_reward(<<24, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_reward_level(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, TrUserData);
dfp_read_field_def_reward(<<32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_reward_amount(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, TrUserData);
dfp_read_field_def_reward(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, _) ->
    #reward{type = F@_1, id = F@_2, level = F@_3,
	    amount = F@_4};
dfp_read_field_def_reward(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, F@_4, TrUserData) ->
    dg_read_field_def_reward(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, TrUserData).

dg_read_field_def_reward(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_reward(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_reward(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_reward_type(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      TrUserData);
      16 ->
	  d_field_reward_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			    TrUserData);
      24 ->
	  d_field_reward_level(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       TrUserData);
      32 ->
	  d_field_reward_amount(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_reward(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   TrUserData);
	    1 ->
		skip_64_reward(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       TrUserData);
	    2 ->
		skip_length_delimited_reward(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_reward(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  F@_4, TrUserData);
	    5 ->
		skip_32_reward(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       TrUserData)
	  end
    end;
dg_read_field_def_reward(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 F@_4, _) ->
    #reward{type = F@_1, id = F@_2, level = F@_3,
	    amount = F@_4}.

d_field_reward_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_reward_type(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, TrUserData);
d_field_reward_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {'d_enum_reward.reward_type'(begin
							<<Res:32/signed-native>> =
							    <<(X bsl N +
								 Acc):32/unsigned-native>>,
							Res
						      end),
			  Rest},
    dfp_read_field_def_reward(RestF, 0, 0, NewFValue, F@_2,
			      F@_3, F@_4, TrUserData).

d_field_reward_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_reward_id(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, F@_3, F@_4, TrUserData);
d_field_reward_id(<<0:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_reward(RestF, 0, 0, F@_1, NewFValue,
			      F@_3, F@_4, TrUserData).

d_field_reward_level(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_reward_level(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, TrUserData);
d_field_reward_level(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_reward(RestF, 0, 0, F@_1, F@_2,
			      NewFValue, F@_4, TrUserData).

d_field_reward_amount(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_reward_amount(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, TrUserData);
d_field_reward_amount(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_reward(RestF, 0, 0, F@_1, F@_2, F@_3,
			      NewFValue, TrUserData).

skip_varint_reward(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_reward(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       TrUserData);
skip_varint_reward(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_reward(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData).

skip_length_delimited_reward(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_reward(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_reward(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_reward(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, TrUserData).

skip_group_reward(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_reward(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      F@_4, TrUserData).

skip_32_reward(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_reward(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData).

skip_64_reward(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_reward(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData).

d_msg_battle_reward(Bin, TrUserData) ->
    dfp_read_field_def_battle_reward(Bin, 0, 0,
				     id([], TrUserData), TrUserData).

dfp_read_field_def_battle_reward(<<10, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    d_field_battle_reward_rewards(Rest, Z1, Z2, F@_1,
				  TrUserData);
dfp_read_field_def_battle_reward(<<>>, 0, 0, R1,
				 TrUserData) ->
    #battle_reward{rewards = lists_reverse(R1, TrUserData)};
dfp_read_field_def_battle_reward(Other, Z1, Z2, F@_1,
				 TrUserData) ->
    dg_read_field_def_battle_reward(Other, Z1, Z2, F@_1,
				    TrUserData).

dg_read_field_def_battle_reward(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_battle_reward(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_battle_reward(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_battle_reward_rewards(Rest, 0, 0, F@_1,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_battle_reward(Rest, 0, 0, F@_1, TrUserData);
	    1 ->
		skip_64_battle_reward(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_battle_reward(Rest, 0, 0, F@_1,
						    TrUserData);
	    3 ->
		skip_group_battle_reward(Rest, Key bsr 3, 0, F@_1,
					 TrUserData);
	    5 -> skip_32_battle_reward(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_battle_reward(<<>>, 0, 0, R1,
				TrUserData) ->
    #battle_reward{rewards = lists_reverse(R1, TrUserData)}.

d_field_battle_reward_rewards(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_battle_reward_rewards(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
d_field_battle_reward_rewards(<<0:1, X:7, Rest/binary>>,
			      N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_reward(Bs, TrUserData), TrUserData), Rest2}
			 end,
    dfp_read_field_def_battle_reward(RestF, 0, 0,
				     cons(NewFValue, Prev, TrUserData),
				     TrUserData).

skip_varint_battle_reward(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    skip_varint_battle_reward(Rest, Z1, Z2, F@_1,
			      TrUserData);
skip_varint_battle_reward(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    dfp_read_field_def_battle_reward(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_length_delimited_battle_reward(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_battle_reward(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_battle_reward(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_battle_reward(Rest2, 0, 0, F@_1,
				     TrUserData).

skip_group_battle_reward(Bin, FNum, Z2, F@_1,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_battle_reward(Rest, 0, Z2, F@_1,
				     TrUserData).

skip_32_battle_reward(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_battle_reward(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_64_battle_reward(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_battle_reward(Rest, Z1, Z2, F@_1,
				     TrUserData).

d_msg_battle_result_notify(Bin, TrUserData) ->
    dfp_read_field_def_battle_result_notify(Bin, 0, 0,
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    TrUserData).

dfp_read_field_def_battle_result_notify(<<8,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_battle_result_notify_battle_id(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_battle_result_notify(<<16,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_battle_result_notify_result(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData);
dfp_read_field_def_battle_result_notify(<<26,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_battle_result_notify_reward(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData);
dfp_read_field_def_battle_result_notify(<<>>, 0, 0,
					F@_1, F@_2, F@_3, _) ->
    #battle_result_notify{battle_id = F@_1, result = F@_2,
			  reward = F@_3};
dfp_read_field_def_battle_result_notify(Other, Z1, Z2,
					F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_battle_result_notify(Other, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_battle_result_notify(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_battle_result_notify(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   TrUserData);
dg_read_field_def_battle_result_notify(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_battle_result_notify_battle_id(Rest, 0, 0, F@_1,
						 F@_2, F@_3, TrUserData);
      16 ->
	  d_field_battle_result_notify_result(Rest, 0, 0, F@_1,
					      F@_2, F@_3, TrUserData);
      26 ->
	  d_field_battle_result_notify_reward(Rest, 0, 0, F@_1,
					      F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_battle_result_notify(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData);
	    1 ->
		skip_64_battle_result_notify(Rest, 0, 0, F@_1, F@_2,
					     F@_3, TrUserData);
	    2 ->
		skip_length_delimited_battle_result_notify(Rest, 0, 0,
							   F@_1, F@_2, F@_3,
							   TrUserData);
	    3 ->
		skip_group_battle_result_notify(Rest, Key bsr 3, 0,
						F@_1, F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_battle_result_notify(Rest, 0, 0, F@_1, F@_2,
					     F@_3, TrUserData)
	  end
    end;
dg_read_field_def_battle_result_notify(<<>>, 0, 0, F@_1,
				       F@_2, F@_3, _) ->
    #battle_result_notify{battle_id = F@_1, result = F@_2,
			  reward = F@_3}.

d_field_battle_result_notify_battle_id(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_battle_result_notify_battle_id(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   TrUserData);
d_field_battle_result_notify_battle_id(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_battle_result_notify(RestF, 0, 0,
					    NewFValue, F@_2, F@_3, TrUserData).

d_field_battle_result_notify_result(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_battle_result_notify_result(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3,
					TrUserData);
d_field_battle_result_notify_result(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_battle_result_notify(RestF, 0, 0,
					    F@_1, NewFValue, F@_3, TrUserData).

d_field_battle_result_notify_reward(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_battle_result_notify_reward(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3,
					TrUserData);
d_field_battle_result_notify_reward(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_battle_reward(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_battle_result_notify(RestF, 0, 0,
					    F@_1, F@_2,
					    if Prev == undefined -> NewFValue;
					       true ->
						   merge_msg_battle_reward(Prev,
									   NewFValue,
									   TrUserData)
					    end,
					    TrUserData).

skip_varint_battle_result_notify(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_battle_result_notify(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData);
skip_varint_battle_result_notify(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_battle_result_notify(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_battle_result_notify(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_battle_result_notify(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       TrUserData);
skip_length_delimited_battle_result_notify(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3,
					   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_battle_result_notify(Rest2, 0, 0,
					    F@_1, F@_2, F@_3, TrUserData).

skip_group_battle_result_notify(Bin, FNum, Z2, F@_1,
				F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_battle_result_notify(Rest, 0, Z2,
					    F@_1, F@_2, F@_3, TrUserData).

skip_32_battle_result_notify(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_battle_result_notify(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, TrUserData).

skip_64_battle_result_notify(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_battle_result_notify(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, TrUserData).

d_msg_battle_team_member(Bin, TrUserData) ->
    dfp_read_field_def_battle_team_member(Bin, 0, 0,
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_battle_team_member(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    d_field_battle_team_member_role_id(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_battle_team_member(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    d_field_battle_team_member_elf_id(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_battle_team_member(<<26,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    d_field_battle_team_member_name(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_battle_team_member(<<32,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    d_field_battle_team_member_level(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_battle_team_member(<<40,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    d_field_battle_team_member_team_id(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_battle_team_member(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, _) ->
    #battle_team_member{role_id = F@_1, elf_id = F@_2,
			name = F@_3, level = F@_4, team_id = F@_5};
dfp_read_field_def_battle_team_member(Other, Z1, Z2,
				      F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    dg_read_field_def_battle_team_member(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData).

dg_read_field_def_battle_team_member(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_battle_team_member(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, TrUserData);
dg_read_field_def_battle_team_member(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_battle_team_member_role_id(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5,
					     TrUserData);
      16 ->
	  d_field_battle_team_member_elf_id(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, TrUserData);
      26 ->
	  d_field_battle_team_member_name(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, TrUserData);
      32 ->
	  d_field_battle_team_member_level(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, TrUserData);
      40 ->
	  d_field_battle_team_member_team_id(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_battle_team_member(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_battle_team_member(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_battle_team_member(Rest, 0, 0,
							 F@_1, F@_2, F@_3, F@_4,
							 F@_5, TrUserData);
	    3 ->
		skip_group_battle_team_member(Rest, Key bsr 3, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
	    5 ->
		skip_32_battle_team_member(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_battle_team_member(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, _) ->
    #battle_team_member{role_id = F@_1, elf_id = F@_2,
			name = F@_3, level = F@_4, team_id = F@_5}.

d_field_battle_team_member_role_id(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData)
    when N < 57 ->
    d_field_battle_team_member_role_id(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, TrUserData);
d_field_battle_team_member_role_id(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F@_2, F@_3, F@_4, F@_5,
				   TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_battle_team_member(RestF, 0, 0,
					  NewFValue, F@_2, F@_3, F@_4, F@_5,
					  TrUserData).

d_field_battle_team_member_elf_id(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData)
    when N < 57 ->
    d_field_battle_team_member_elf_id(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, TrUserData);
d_field_battle_team_member_elf_id(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, _, F@_3, F@_4, F@_5,
				  TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_battle_team_member(RestF, 0, 0, F@_1,
					  NewFValue, F@_3, F@_4, F@_5,
					  TrUserData).

d_field_battle_team_member_name(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 57 ->
    d_field_battle_team_member_name(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
d_field_battle_team_member_name(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, _, F@_4, F@_5,
				TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_battle_team_member(RestF, 0, 0, F@_1,
					  F@_2, NewFValue, F@_4, F@_5,
					  TrUserData).

d_field_battle_team_member_level(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 57 ->
    d_field_battle_team_member_level(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
d_field_battle_team_member_level(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, _, F@_5,
				 TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_battle_team_member(RestF, 0, 0, F@_1,
					  F@_2, F@_3, NewFValue, F@_5,
					  TrUserData).

d_field_battle_team_member_team_id(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData)
    when N < 57 ->
    d_field_battle_team_member_team_id(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, TrUserData);
d_field_battle_team_member_team_id(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, _,
				   TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_battle_team_member(RestF, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, NewFValue,
					  TrUserData).

skip_varint_battle_team_member(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData) ->
    skip_varint_battle_team_member(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData);
skip_varint_battle_team_member(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData) ->
    dfp_read_field_def_battle_team_member(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData).

skip_length_delimited_battle_team_member(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData)
    when N < 57 ->
    skip_length_delimited_battle_team_member(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, TrUserData);
skip_length_delimited_battle_team_member(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_battle_team_member(Rest2, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_battle_team_member(Bin, FNum, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_battle_team_member(Rest, 0, Z2, F@_1,
					  F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_battle_team_member(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_battle_team_member(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData).

skip_64_battle_team_member(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_battle_team_member(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData).

d_msg_battle_team(Bin, TrUserData) ->
    dfp_read_field_def_battle_team(Bin, 0, 0,
				   id([], TrUserData), TrUserData).

dfp_read_field_def_battle_team(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_battle_team_members(Rest, Z1, Z2, F@_1,
				TrUserData);
dfp_read_field_def_battle_team(<<>>, 0, 0, R1,
			       TrUserData) ->
    #battle_team{members = lists_reverse(R1, TrUserData)};
dfp_read_field_def_battle_team(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_battle_team(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_battle_team(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_battle_team(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_battle_team(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_battle_team_members(Rest, 0, 0, F@_1,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_battle_team(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_battle_team(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_battle_team(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_battle_team(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_battle_team(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_battle_team(<<>>, 0, 0, R1,
			      TrUserData) ->
    #battle_team{members = lists_reverse(R1, TrUserData)}.

d_field_battle_team_members(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_battle_team_members(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
d_field_battle_team_members(<<0:1, X:7, Rest/binary>>,
			    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_battle_team_member(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_battle_team(RestF, 0, 0,
				   cons(NewFValue, Prev, TrUserData),
				   TrUserData).

skip_varint_battle_team(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_battle_team(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_battle_team(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_battle_team(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_battle_team(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_battle_team(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_battle_team(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_battle_team(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_battle_team(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_battle_team(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_battle_team(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_battle_team(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_battle_team(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_battle_team(Rest, Z1, Z2, F@_1,
				   TrUserData).

d_msg_battle_match_notify(Bin, TrUserData) ->
    dfp_read_field_def_battle_match_notify(Bin, 0, 0,
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_battle_match_notify(<<10,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				       TrUserData) ->
    d_field_battle_match_notify_team_a(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_battle_match_notify(<<18,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				       TrUserData) ->
    d_field_battle_match_notify_team_b(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_battle_match_notify(<<26,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				       TrUserData) ->
    d_field_battle_match_notify_battle_ip(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_battle_match_notify(<<32,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				       TrUserData) ->
    d_field_battle_match_notify_battle_port(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_battle_match_notify(<<>>, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, _) ->
    #battle_match_notify{team_a = F@_1, team_b = F@_2,
			 battle_ip = F@_3, battle_port = F@_4};
dfp_read_field_def_battle_match_notify(Other, Z1, Z2,
				       F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_battle_match_notify(Other, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_battle_match_notify(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_battle_match_notify(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData);
dg_read_field_def_battle_match_notify(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_battle_match_notify_team_a(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, TrUserData);
      18 ->
	  d_field_battle_match_notify_team_b(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, TrUserData);
      26 ->
	  d_field_battle_match_notify_battle_ip(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, TrUserData);
      32 ->
	  d_field_battle_match_notify_battle_port(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4,
						  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_battle_match_notify(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, TrUserData);
	    1 ->
		skip_64_battle_match_notify(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, TrUserData);
	    2 ->
		skip_length_delimited_battle_match_notify(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  F@_4, TrUserData);
	    3 ->
		skip_group_battle_match_notify(Rest, Key bsr 3, 0, F@_1,
					       F@_2, F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_battle_match_notify(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, TrUserData)
	  end
    end;
dg_read_field_def_battle_match_notify(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, _) ->
    #battle_match_notify{team_a = F@_1, team_b = F@_2,
			 battle_ip = F@_3, battle_port = F@_4}.

d_field_battle_match_notify_team_a(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_battle_match_notify_team_a(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData);
d_field_battle_match_notify_team_a(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, Prev, F@_2, F@_3, F@_4,
				   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_battle_team(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_battle_match_notify(RestF, 0, 0,
					   if Prev == undefined -> NewFValue;
					      true ->
						  merge_msg_battle_team(Prev,
									NewFValue,
									TrUserData)
					   end,
					   F@_2, F@_3, F@_4, TrUserData).

d_field_battle_match_notify_team_b(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_battle_match_notify_team_b(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData);
d_field_battle_match_notify_team_b(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, Prev, F@_3, F@_4,
				   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_battle_team(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_battle_match_notify(RestF, 0, 0,
					   F@_1,
					   if Prev == undefined -> NewFValue;
					      true ->
						  merge_msg_battle_team(Prev,
									NewFValue,
									TrUserData)
					   end,
					   F@_3, F@_4, TrUserData).

d_field_battle_match_notify_battle_ip(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData)
    when N < 57 ->
    d_field_battle_match_notify_battle_ip(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData);
d_field_battle_match_notify_battle_ip(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, _, F@_4,
				      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_battle_match_notify(RestF, 0, 0,
					   F@_1, F@_2, NewFValue, F@_4,
					   TrUserData).

d_field_battle_match_notify_battle_port(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData)
    when N < 57 ->
    d_field_battle_match_notify_battle_port(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, TrUserData);
d_field_battle_match_notify_battle_port(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, _,
					TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_battle_match_notify(RestF, 0, 0,
					   F@_1, F@_2, F@_3, NewFValue,
					   TrUserData).

skip_varint_battle_match_notify(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_battle_match_notify(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData);
skip_varint_battle_match_notify(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_battle_match_notify(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_battle_match_notify(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData)
    when N < 57 ->
    skip_length_delimited_battle_match_notify(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, TrUserData);
skip_length_delimited_battle_match_notify(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_battle_match_notify(Rest2, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_battle_match_notify(Bin, FNum, Z2, F@_1,
			       F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_battle_match_notify(Rest, 0, Z2,
					   F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_battle_match_notify(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_battle_match_notify(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_battle_match_notify(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_battle_match_notify(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, TrUserData).

d_msg_team_notify(Bin, TrUserData) ->
    dfp_read_field_def_team_notify(Bin, 0, 0, TrUserData).

dfp_read_field_def_team_notify(<<>>, 0, 0, _) ->
    #team_notify{};
dfp_read_field_def_team_notify(Other, Z1, Z2,
			       TrUserData) ->
    dg_read_field_def_team_notify(Other, Z1, Z2,
				  TrUserData).

dg_read_field_def_team_notify(<<1:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_team_notify(Rest, N + 7,
				  X bsl N + Acc, TrUserData);
dg_read_field_def_team_notify(<<0:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_team_notify(Rest, 0, 0, TrUserData);
      1 -> skip_64_team_notify(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_team_notify(Rest, 0, 0,
					    TrUserData);
      3 ->
	  skip_group_team_notify(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_team_notify(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_team_notify(<<>>, 0, 0, _) ->
    #team_notify{}.

skip_varint_team_notify(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    skip_varint_team_notify(Rest, Z1, Z2, TrUserData);
skip_varint_team_notify(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    dfp_read_field_def_team_notify(Rest, Z1, Z2,
				   TrUserData).

skip_length_delimited_team_notify(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_team_notify(Rest, N + 7,
				      X bsl N + Acc, TrUserData);
skip_length_delimited_team_notify(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_team_notify(Rest2, 0, 0, TrUserData).

skip_group_team_notify(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_team_notify(Rest, 0, Z2, TrUserData).

skip_32_team_notify(<<_:32, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_team_notify(Rest, Z1, Z2,
				   TrUserData).

skip_64_team_notify(<<_:64, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_team_notify(Rest, Z1, Z2,
				   TrUserData).

d_msg_notify_msg(Bin, TrUserData) ->
    dfp_read_field_def_notify_msg(Bin, 0, 0,
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_notify_msg(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_notify_msg_notify(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
dfp_read_field_def_notify_msg(<<18, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_notify_msg_battle_match(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData);
dfp_read_field_def_notify_msg(<<26, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_notify_msg_battle_result(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData);
dfp_read_field_def_notify_msg(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, _) ->
    #notify_msg{notify = F@_1, battle_match = F@_2,
		battle_result = F@_3};
dfp_read_field_def_notify_msg(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData) ->
    dg_read_field_def_notify_msg(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

dg_read_field_def_notify_msg(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_notify_msg(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_notify_msg(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_notify_msg_notify(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
      18 ->
	  d_field_notify_msg_battle_match(Rest, 0, 0, F@_1, F@_2,
					  F@_3, TrUserData);
      26 ->
	  d_field_notify_msg_battle_result(Rest, 0, 0, F@_1, F@_2,
					   F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_notify_msg(Rest, 0, 0, F@_1, F@_2, F@_3,
				       TrUserData);
	    1 ->
		skip_64_notify_msg(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
	    2 ->
		skip_length_delimited_notify_msg(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData);
	    3 ->
		skip_group_notify_msg(Rest, Key bsr 3, 0, F@_1, F@_2,
				      F@_3, TrUserData);
	    5 ->
		skip_32_notify_msg(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData)
	  end
    end;
dg_read_field_def_notify_msg(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, _) ->
    #notify_msg{notify = F@_1, battle_match = F@_2,
		battle_result = F@_3}.

d_field_notify_msg_notify(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_notify_msg_notify(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
d_field_notify_msg_notify(<<0:1, X:7, Rest/binary>>, N,
			  Acc, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_team_notify(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_notify_msg(RestF, 0, 0,
				  if Prev == undefined -> NewFValue;
				     true ->
					 merge_msg_team_notify(Prev, NewFValue,
							       TrUserData)
				  end,
				  F@_2, F@_3, TrUserData).

d_field_notify_msg_battle_match(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_notify_msg_battle_match(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
d_field_notify_msg_battle_match(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_battle_match_notify(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_notify_msg(RestF, 0, 0, F@_1,
				  if Prev == undefined -> NewFValue;
				     true ->
					 merge_msg_battle_match_notify(Prev,
								       NewFValue,
								       TrUserData)
				  end,
				  F@_3, TrUserData).

d_field_notify_msg_battle_result(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_notify_msg_battle_result(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
d_field_notify_msg_battle_result(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_battle_result_notify(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_notify_msg(RestF, 0, 0, F@_1, F@_2,
				  if Prev == undefined -> NewFValue;
				     true ->
					 merge_msg_battle_result_notify(Prev,
									NewFValue,
									TrUserData)
				  end,
				  TrUserData).

skip_varint_notify_msg(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_notify_msg(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
skip_varint_notify_msg(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_notify_msg(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

skip_length_delimited_notify_msg(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_notify_msg(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
skip_length_delimited_notify_msg(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_notify_msg(Rest2, 0, 0, F@_1, F@_2,
				  F@_3, TrUserData).

skip_group_notify_msg(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_notify_msg(Rest, 0, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

skip_32_notify_msg(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_notify_msg(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

skip_64_notify_msg(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_notify_msg(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

d_msg_error_info(Bin, TrUserData) ->
    dfp_read_field_def_error_info(Bin, 0, 0,
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_error_info(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_error_info_msg(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_error_info(<<>>, 0, 0, F@_1, _) ->
    #error_info{msg = F@_1};
dfp_read_field_def_error_info(Other, Z1, Z2, F@_1,
			      TrUserData) ->
    dg_read_field_def_error_info(Other, Z1, Z2, F@_1,
				 TrUserData).

dg_read_field_def_error_info(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_error_info(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
dg_read_field_def_error_info(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_error_info_msg(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_error_info(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_error_info(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_error_info(Rest, 0, 0, F@_1,
						 TrUserData);
	    3 ->
		skip_group_error_info(Rest, Key bsr 3, 0, F@_1,
				      TrUserData);
	    5 -> skip_32_error_info(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_error_info(<<>>, 0, 0, F@_1, _) ->
    #error_info{msg = F@_1}.

d_field_error_info_msg(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_error_info_msg(Rest, N + 7, X bsl N + Acc, F@_1,
			   TrUserData);
d_field_error_info_msg(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_error_info(RestF, 0, 0, NewFValue,
				  TrUserData).

skip_varint_error_info(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    skip_varint_error_info(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_error_info(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    dfp_read_field_def_error_info(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_length_delimited_error_info(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_error_info(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_error_info(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_error_info(Rest2, 0, 0, F@_1,
				  TrUserData).

skip_group_error_info(Bin, FNum, Z2, F@_1,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_error_info(Rest, 0, Z2, F@_1,
				  TrUserData).

skip_32_error_info(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_error_info(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_64_error_info(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_error_info(Rest, Z1, Z2, F@_1,
				  TrUserData).

d_msg_down_msg(Bin, TrUserData) ->
    dfp_read_field_def_down_msg(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_down_msg(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    TrUserData) ->
    d_field_down_msg_error(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_down_msg(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    TrUserData) ->
    d_field_down_msg_notify(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_down_msg(<<26, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    TrUserData) ->
    d_field_down_msg_login(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_down_msg(<<34, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    TrUserData) ->
    d_field_down_msg_role(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_down_msg(<<42, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    TrUserData) ->
    d_field_down_msg_rtnotify(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_down_msg(<<50, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    TrUserData) ->
    d_field_down_msg_magic(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_down_msg(<<58, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    TrUserData) ->
    d_field_down_msg_team(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_down_msg(<<66, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    TrUserData) ->
    d_field_down_msg_match(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_down_msg(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _) ->
    #down_msg{error = F@_1, notify = F@_2, login = F@_3,
	      role = F@_4, rtnotify = F@_5, magic = F@_6, team = F@_7,
	      match = F@_8};
dfp_read_field_def_down_msg(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    dg_read_field_def_down_msg(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

dg_read_field_def_down_msg(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_down_msg(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       TrUserData);
dg_read_field_def_down_msg(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_down_msg_error(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
      18 ->
	  d_field_down_msg_notify(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
      26 ->
	  d_field_down_msg_login(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
      34 ->
	  d_field_down_msg_role(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
      42 ->
	  d_field_down_msg_rtnotify(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
      50 ->
	  d_field_down_msg_magic(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
      58 ->
	  d_field_down_msg_team(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
      66 ->
	  d_field_down_msg_match(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_down_msg(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, F@_8, TrUserData);
	    1 ->
		skip_64_down_msg(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, F@_6, F@_7, F@_8, TrUserData);
	    2 ->
		skip_length_delimited_down_msg(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, F@_5, F@_6, F@_7,
					       F@_8, TrUserData);
	    3 ->
		skip_group_down_msg(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    TrUserData);
	    5 ->
		skip_32_down_msg(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, F@_6, F@_7, F@_8, TrUserData)
	  end
    end;
dg_read_field_def_down_msg(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, _) ->
    #down_msg{error = F@_1, notify = F@_2, login = F@_3,
	      role = F@_4, rtnotify = F@_5, magic = F@_6, team = F@_7,
	      match = F@_8}.

d_field_down_msg_error(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       TrUserData)
    when N < 57 ->
    d_field_down_msg_error(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   TrUserData);
d_field_down_msg_error(<<0:1, X:7, Rest/binary>>, N,
		       Acc, Prev, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_error_info(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_down_msg(RestF, 0, 0,
				if Prev == undefined -> NewFValue;
				   true ->
				       merge_msg_error_info(Prev, NewFValue,
							    TrUserData)
				end,
				F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				TrUserData).

d_field_down_msg_notify(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			TrUserData)
    when N < 57 ->
    d_field_down_msg_notify(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    TrUserData);
d_field_down_msg_notify(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, Prev, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_notify_msg(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_down_msg(RestF, 0, 0, F@_1,
				if Prev == undefined -> NewFValue;
				   true ->
				       merge_msg_notify_msg(Prev, NewFValue,
							    TrUserData)
				end,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

d_field_down_msg_login(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       TrUserData)
    when N < 57 ->
    d_field_down_msg_login(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   TrUserData);
d_field_down_msg_login(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, Prev, F@_4, F@_5, F@_6, F@_7, F@_8,
		       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_login_reply(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_down_msg(RestF, 0, 0, F@_1, F@_2,
				if Prev == undefined -> NewFValue;
				   true ->
				       merge_msg_login_reply(Prev, NewFValue,
							     TrUserData)
				end,
				F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

d_field_down_msg_role(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		      TrUserData)
    when N < 57 ->
    d_field_down_msg_role(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_down_msg_role(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, Prev, F@_5, F@_6, F@_7, F@_8,
		      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_role_reply(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_down_msg(RestF, 0, 0, F@_1, F@_2,
				F@_3,
				if Prev == undefined -> NewFValue;
				   true ->
				       merge_msg_role_reply(Prev, NewFValue,
							    TrUserData)
				end,
				F@_5, F@_6, F@_7, F@_8, TrUserData).

d_field_down_msg_rtnotify(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  TrUserData)
    when N < 57 ->
    d_field_down_msg_rtnotify(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      TrUserData);
d_field_down_msg_rtnotify(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, Prev, F@_6, F@_7, F@_8,
			  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_rtnotify_reply(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_down_msg(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4,
				if Prev == undefined -> NewFValue;
				   true ->
				       merge_msg_rtnotify_reply(Prev, NewFValue,
								TrUserData)
				end,
				F@_6, F@_7, F@_8, TrUserData).

d_field_down_msg_magic(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       TrUserData)
    when N < 57 ->
    d_field_down_msg_magic(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   TrUserData);
d_field_down_msg_magic(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, Prev, F@_7, F@_8,
		       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_magic_reply(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_down_msg(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5,
				if Prev == undefined -> NewFValue;
				   true ->
				       merge_msg_magic_reply(Prev, NewFValue,
							     TrUserData)
				end,
				F@_7, F@_8, TrUserData).

d_field_down_msg_team(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		      TrUserData)
    when N < 57 ->
    d_field_down_msg_team(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_down_msg_team(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, Prev, F@_8,
		      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_team_reply(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_down_msg(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6,
				if Prev == undefined -> NewFValue;
				   true ->
				       merge_msg_team_reply(Prev, NewFValue,
							    TrUserData)
				end,
				F@_8, TrUserData).

d_field_down_msg_match(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       TrUserData)
    when N < 57 ->
    d_field_down_msg_match(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   TrUserData);
d_field_down_msg_match(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, Prev,
		       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_match_reply(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_down_msg(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7,
				if Prev == undefined -> NewFValue;
				   true ->
				       merge_msg_match_reply(Prev, NewFValue,
							     TrUserData)
				end,
				TrUserData).

skip_varint_down_msg(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		     TrUserData) ->
    skip_varint_down_msg(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
skip_varint_down_msg(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		     TrUserData) ->
    dfp_read_field_def_down_msg(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

skip_length_delimited_down_msg(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, TrUserData)
    when N < 57 ->
    skip_length_delimited_down_msg(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, F@_8, TrUserData);
skip_length_delimited_down_msg(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_down_msg(Rest2, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

skip_group_down_msg(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_down_msg(Rest, 0, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

skip_32_down_msg(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    dfp_read_field_def_down_msg(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

skip_64_down_msg(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    dfp_read_field_def_down_msg(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

d_msg_battle_stat(Bin, TrUserData) ->
    dfp_read_field_def_battle_stat(Bin, 0, 0, TrUserData).

dfp_read_field_def_battle_stat(<<>>, 0, 0, _) ->
    #battle_stat{};
dfp_read_field_def_battle_stat(Other, Z1, Z2,
			       TrUserData) ->
    dg_read_field_def_battle_stat(Other, Z1, Z2,
				  TrUserData).

dg_read_field_def_battle_stat(<<1:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_battle_stat(Rest, N + 7,
				  X bsl N + Acc, TrUserData);
dg_read_field_def_battle_stat(<<0:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_battle_stat(Rest, 0, 0, TrUserData);
      1 -> skip_64_battle_stat(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_battle_stat(Rest, 0, 0,
					    TrUserData);
      3 ->
	  skip_group_battle_stat(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_battle_stat(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_battle_stat(<<>>, 0, 0, _) ->
    #battle_stat{}.

skip_varint_battle_stat(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    skip_varint_battle_stat(Rest, Z1, Z2, TrUserData);
skip_varint_battle_stat(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    dfp_read_field_def_battle_stat(Rest, Z1, Z2,
				   TrUserData).

skip_length_delimited_battle_stat(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_battle_stat(Rest, N + 7,
				      X bsl N + Acc, TrUserData);
skip_length_delimited_battle_stat(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_battle_stat(Rest2, 0, 0, TrUserData).

skip_group_battle_stat(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_battle_stat(Rest, 0, Z2, TrUserData).

skip_32_battle_stat(<<_:32, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_battle_stat(Rest, Z1, Z2,
				   TrUserData).

skip_64_battle_stat(<<_:64, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_battle_stat(Rest, Z1, Z2,
				   TrUserData).

d_enum_result(0) -> success;
d_enum_result(1) -> fail;
d_enum_result(V) -> V.

'd_enum_login_reply.login_result'(1) -> new_user;
'd_enum_login_reply.login_result'(2) -> default_role;
'd_enum_login_reply.login_result'(3) -> role_list;
'd_enum_login_reply.login_result'(V) -> V.

'd_enum_create_role_reply.create_role_result'(0) ->
    success;
'd_enum_create_role_reply.create_role_result'(1) ->
    nickname_repeat;
'd_enum_create_role_reply.create_role_result'(2) ->
    nickname_error;
'd_enum_create_role_reply.create_role_result'(3) ->
    nickname_dirty;
'd_enum_create_role_reply.create_role_result'(V) -> V.

d_enum_match_result(1) -> success;
d_enum_match_result(2) -> matching;
d_enum_match_result(3) -> matched;
d_enum_match_result(V) -> V.

'd_enum_reward.reward_type'(1) -> element;
'd_enum_reward.reward_type'(V) -> V.

d_enum_team_member_state(1) -> inviting;
d_enum_team_member_state(2) -> unready;
d_enum_team_member_state(3) -> ready;
d_enum_team_member_state(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #name_card_st{} ->
	  merge_msg_name_card_st(Prev, New, TrUserData);
      #role_st{} -> merge_msg_role_st(Prev, New, TrUserData);
      #create_role_reply{} ->
	  merge_msg_create_role_reply(Prev, New, TrUserData);
      #match_reply{} ->
	  merge_msg_match_reply(Prev, New, TrUserData);
      #team_member_st{} ->
	  merge_msg_team_member_st(Prev, New, TrUserData);
      #team_info_st{} ->
	  merge_msg_team_info_st(Prev, New, TrUserData);
      #team_reply{} ->
	  merge_msg_team_reply(Prev, New, TrUserData);
      #select_magic_reply{} ->
	  merge_msg_select_magic_reply(Prev, New, TrUserData);
      #magic_reply{} ->
	  merge_msg_magic_reply(Prev, New, TrUserData);
      #rtnotify_callback_reply{} ->
	  merge_msg_rtnotify_callback_reply(Prev, New,
					    TrUserData);
      #rtnotify_keepalive_reply{} ->
	  merge_msg_rtnotify_keepalive_reply(Prev, New,
					     TrUserData);
      #rtnotify_reply{} ->
	  merge_msg_rtnotify_reply(Prev, New, TrUserData);
      #lookup_role_reply{} ->
	  merge_msg_lookup_role_reply(Prev, New, TrUserData);
      #select_role_reply{} ->
	  merge_msg_select_role_reply(Prev, New, TrUserData);
      #role_reply{} ->
	  merge_msg_role_reply(Prev, New, TrUserData);
      #role_summary_st{} ->
	  merge_msg_role_summary_st(Prev, New, TrUserData);
      #login_reply{} ->
	  merge_msg_login_reply(Prev, New, TrUserData);
      #reward{} -> merge_msg_reward(Prev, New, TrUserData);
      #battle_reward{} ->
	  merge_msg_battle_reward(Prev, New, TrUserData);
      #battle_result_notify{} ->
	  merge_msg_battle_result_notify(Prev, New, TrUserData);
      #battle_team_member{} ->
	  merge_msg_battle_team_member(Prev, New, TrUserData);
      #battle_team{} ->
	  merge_msg_battle_team(Prev, New, TrUserData);
      #battle_match_notify{} ->
	  merge_msg_battle_match_notify(Prev, New, TrUserData);
      #team_notify{} ->
	  merge_msg_team_notify(Prev, New, TrUserData);
      #notify_msg{} ->
	  merge_msg_notify_msg(Prev, New, TrUserData);
      #error_info{} ->
	  merge_msg_error_info(Prev, New, TrUserData);
      #down_msg{} ->
	  merge_msg_down_msg(Prev, New, TrUserData);
      #battle_stat{} ->
	  merge_msg_battle_stat(Prev, New, TrUserData)
    end.

merge_msg_name_card_st(#name_card_st{name = PFname,
				     last_set_time = PFlast_set_time},
		       #name_card_st{name = NFname,
				     last_set_time = NFlast_set_time},
		       _) ->
    #name_card_st{name =
		      if NFname =:= undefined -> PFname;
			 true -> NFname
		      end,
		  last_set_time =
		      if NFlast_set_time =:= undefined -> PFlast_set_time;
			 true -> NFlast_set_time
		      end}.

merge_msg_role_st(#role_st{role_id = PFrole_id,
			   elf_id = PFelf_id, name_card = PFname_card,
			   level = PFlevel, exp = PFexp},
		  #role_st{role_id = NFrole_id, elf_id = NFelf_id,
			   name_card = NFname_card, level = NFlevel,
			   exp = NFexp},
		  TrUserData) ->
    #role_st{role_id =
		 if NFrole_id =:= undefined -> PFrole_id;
		    true -> NFrole_id
		 end,
	     elf_id =
		 if NFelf_id =:= undefined -> PFelf_id;
		    true -> NFelf_id
		 end,
	     name_card =
		 if PFname_card /= undefined, NFname_card /= undefined ->
			merge_msg_name_card_st(PFname_card, NFname_card,
					       TrUserData);
		    PFname_card == undefined -> NFname_card;
		    NFname_card == undefined -> PFname_card
		 end,
	     level =
		 if NFlevel =:= undefined -> PFlevel;
		    true -> NFlevel
		 end,
	     exp =
		 if NFexp =:= undefined -> PFexp;
		    true -> NFexp
		 end}.

merge_msg_create_role_reply(#create_role_reply{role =
						   PFrole},
			    #create_role_reply{result = NFresult,
					       role = NFrole},
			    TrUserData) ->
    #create_role_reply{result = NFresult,
		       role =
			   if PFrole /= undefined, NFrole /= undefined ->
				  merge_msg_role_st(PFrole, NFrole, TrUserData);
			      PFrole == undefined -> NFrole;
			      NFrole == undefined -> PFrole
			   end}.

merge_msg_match_reply(#match_reply{start = PFstart,
				   cancel = PFcancel},
		      #match_reply{start = NFstart, cancel = NFcancel}, _) ->
    #match_reply{start =
		     if NFstart =:= undefined -> PFstart;
			true -> NFstart
		     end,
		 cancel =
		     if NFcancel =:= undefined -> PFcancel;
			true -> NFcancel
		     end}.

merge_msg_team_member_st(#team_member_st{user_id =
					     PFuser_id,
					 state = PFstate, elf_id = PFelf_id,
					 name = PFname, level = PFlevel},
			 #team_member_st{user_id = NFuser_id, state = NFstate,
					 elf_id = NFelf_id, name = NFname,
					 level = NFlevel},
			 _) ->
    #team_member_st{user_id =
			if NFuser_id =:= undefined -> PFuser_id;
			   true -> NFuser_id
			end,
		    state =
			if NFstate =:= undefined -> PFstate;
			   true -> NFstate
			end,
		    elf_id =
			if NFelf_id =:= undefined -> PFelf_id;
			   true -> NFelf_id
			end,
		    name =
			if NFname =:= undefined -> PFname;
			   true -> NFname
			end,
		    level =
			if NFlevel =:= undefined -> PFlevel;
			   true -> NFlevel
			end}.

merge_msg_team_info_st(#team_info_st{members =
					 PFmembers,
				     leader_id = PFleader_id},
		       #team_info_st{members = NFmembers,
				     leader_id = NFleader_id},
		       TrUserData) ->
    #team_info_st{members =
		      if PFmembers /= undefined, NFmembers /= undefined ->
			     'erlang_++'(PFmembers, NFmembers, TrUserData);
			 PFmembers == undefined -> NFmembers;
			 NFmembers == undefined -> PFmembers
		      end,
		  leader_id =
		      if NFleader_id =:= undefined -> PFleader_id;
			 true -> NFleader_id
		      end}.

merge_msg_team_reply(#team_reply{invite = PFinvite,
				 accept = PFaccept, refuse = PFrefuse,
				 state = PFstate, leave = PFleave},
		     #team_reply{invite = NFinvite, accept = NFaccept,
				 refuse = NFrefuse, state = NFstate,
				 leave = NFleave},
		     TrUserData) ->
    #team_reply{invite =
		    if PFinvite /= undefined, NFinvite /= undefined ->
			   merge_msg_team_member_st(PFinvite, NFinvite,
						    TrUserData);
		       PFinvite == undefined -> NFinvite;
		       NFinvite == undefined -> PFinvite
		    end,
		accept =
		    if PFaccept /= undefined, NFaccept /= undefined ->
			   merge_msg_team_info_st(PFaccept, NFaccept,
						  TrUserData);
		       PFaccept == undefined -> NFaccept;
		       NFaccept == undefined -> PFaccept
		    end,
		refuse =
		    if NFrefuse =:= undefined -> PFrefuse;
		       true -> NFrefuse
		    end,
		state =
		    if NFstate =:= undefined -> PFstate;
		       true -> NFstate
		    end,
		leave =
		    if NFleave =:= undefined -> PFleave;
		       true -> NFleave
		    end}.

merge_msg_select_magic_reply(#select_magic_reply{result
						     = PFresult},
			     #select_magic_reply{result = NFresult}, _) ->
    #select_magic_reply{result =
			    if NFresult =:= undefined -> PFresult;
			       true -> NFresult
			    end}.

merge_msg_magic_reply(#magic_reply{select = PFselect},
		      #magic_reply{select = NFselect}, TrUserData) ->
    #magic_reply{select =
		     if PFselect /= undefined, NFselect /= undefined ->
			    merge_msg_select_magic_reply(PFselect, NFselect,
							 TrUserData);
			PFselect == undefined -> NFselect;
			NFselect == undefined -> PFselect
		     end}.

merge_msg_rtnotify_callback_reply(#rtnotify_callback_reply{string
							       = PFstring},
				  #rtnotify_callback_reply{string = NFstring},
				  _) ->
    #rtnotify_callback_reply{string =
				 if NFstring =:= undefined -> PFstring;
				    true -> NFstring
				 end}.

merge_msg_rtnotify_keepalive_reply(#rtnotify_keepalive_reply{time
								 = PFtime},
				   #rtnotify_keepalive_reply{time = NFtime},
				   _) ->
    #rtnotify_keepalive_reply{time =
				  if NFtime =:= undefined -> PFtime;
				     true -> NFtime
				  end}.

merge_msg_rtnotify_reply(#rtnotify_reply{register =
					     PFregister,
					 keepalive = PFkeepalive,
					 callback = PFcallback},
			 #rtnotify_reply{register = NFregister,
					 keepalive = NFkeepalive,
					 callback = NFcallback},
			 TrUserData) ->
    #rtnotify_reply{register =
			if NFregister =:= undefined -> PFregister;
			   true -> NFregister
			end,
		    keepalive =
			if PFkeepalive /= undefined, NFkeepalive /= undefined ->
			       merge_msg_rtnotify_keepalive_reply(PFkeepalive,
								  NFkeepalive,
								  TrUserData);
			   PFkeepalive == undefined -> NFkeepalive;
			   NFkeepalive == undefined -> PFkeepalive
			end,
		    callback =
			if PFcallback /= undefined, NFcallback /= undefined ->
			       merge_msg_rtnotify_callback_reply(PFcallback,
								 NFcallback,
								 TrUserData);
			   PFcallback == undefined -> NFcallback;
			   NFcallback == undefined -> PFcallback
			end}.

merge_msg_lookup_role_reply(#lookup_role_reply{roles =
						   PFroles},
			    #lookup_role_reply{roles = NFroles}, TrUserData) ->
    #lookup_role_reply{roles =
			   if PFroles /= undefined, NFroles /= undefined ->
				  'erlang_++'(PFroles, NFroles, TrUserData);
			      PFroles == undefined -> NFroles;
			      NFroles == undefined -> PFroles
			   end}.

merge_msg_select_role_reply(#select_role_reply{role =
						   PFrole},
			    #select_role_reply{role = NFrole}, TrUserData) ->
    #select_role_reply{role =
			   if PFrole /= undefined, NFrole /= undefined ->
				  merge_msg_role_st(PFrole, NFrole, TrUserData);
			      PFrole == undefined -> NFrole;
			      NFrole == undefined -> PFrole
			   end}.

merge_msg_role_reply(#role_reply{create = PFcreate,
				 select = PFselect, lookup = PFlookup},
		     #role_reply{create = NFcreate, select = NFselect,
				 lookup = NFlookup},
		     TrUserData) ->
    #role_reply{create =
		    if PFcreate /= undefined, NFcreate /= undefined ->
			   merge_msg_create_role_reply(PFcreate, NFcreate,
						       TrUserData);
		       PFcreate == undefined -> NFcreate;
		       NFcreate == undefined -> PFcreate
		    end,
		select =
		    if PFselect /= undefined, NFselect /= undefined ->
			   merge_msg_select_role_reply(PFselect, NFselect,
						       TrUserData);
		       PFselect == undefined -> NFselect;
		       NFselect == undefined -> PFselect
		    end,
		lookup =
		    if PFlookup /= undefined, NFlookup /= undefined ->
			   merge_msg_lookup_role_reply(PFlookup, NFlookup,
						       TrUserData);
		       PFlookup == undefined -> NFlookup;
		       NFlookup == undefined -> PFlookup
		    end}.

merge_msg_role_summary_st(#role_summary_st{role_id =
					       PFrole_id,
					   elf_id = PFelf_id, name = PFname,
					   level = PFlevel},
			  #role_summary_st{role_id = NFrole_id,
					   elf_id = NFelf_id, name = NFname,
					   level = NFlevel},
			  _) ->
    #role_summary_st{role_id =
			 if NFrole_id =:= undefined -> PFrole_id;
			    true -> NFrole_id
			 end,
		     elf_id =
			 if NFelf_id =:= undefined -> PFelf_id;
			    true -> NFelf_id
			 end,
		     name =
			 if NFname =:= undefined -> PFname;
			    true -> NFname
			 end,
		     level =
			 if NFlevel =:= undefined -> PFlevel;
			    true -> NFlevel
			 end}.

merge_msg_login_reply(#login_reply{role = PFrole,
				   roles = PFroles},
		      #login_reply{result = NFresult, user_id = NFuser_id,
				   role = NFrole, roles = NFroles},
		      TrUserData) ->
    #login_reply{result = NFresult, user_id = NFuser_id,
		 role =
		     if PFrole /= undefined, NFrole /= undefined ->
			    merge_msg_role_st(PFrole, NFrole, TrUserData);
			PFrole == undefined -> NFrole;
			NFrole == undefined -> PFrole
		     end,
		 roles =
		     if PFroles /= undefined, NFroles /= undefined ->
			    'erlang_++'(PFroles, NFroles, TrUserData);
			PFroles == undefined -> NFroles;
			NFroles == undefined -> PFroles
		     end}.

merge_msg_reward(#reward{type = PFtype, id = PFid,
			 level = PFlevel, amount = PFamount},
		 #reward{type = NFtype, id = NFid, level = NFlevel,
			 amount = NFamount},
		 _) ->
    #reward{type =
		if NFtype =:= undefined -> PFtype;
		   true -> NFtype
		end,
	    id =
		if NFid =:= undefined -> PFid;
		   true -> NFid
		end,
	    level =
		if NFlevel =:= undefined -> PFlevel;
		   true -> NFlevel
		end,
	    amount =
		if NFamount =:= undefined -> PFamount;
		   true -> NFamount
		end}.

merge_msg_battle_reward(#battle_reward{rewards =
					   PFrewards},
			#battle_reward{rewards = NFrewards}, TrUserData) ->
    #battle_reward{rewards =
		       if PFrewards /= undefined, NFrewards /= undefined ->
			      'erlang_++'(PFrewards, NFrewards, TrUserData);
			  PFrewards == undefined -> NFrewards;
			  NFrewards == undefined -> PFrewards
		       end}.

merge_msg_battle_result_notify(#battle_result_notify{battle_id
							 = PFbattle_id,
						     result = PFresult,
						     reward = PFreward},
			       #battle_result_notify{battle_id = NFbattle_id,
						     result = NFresult,
						     reward = NFreward},
			       TrUserData) ->
    #battle_result_notify{battle_id =
			      if NFbattle_id =:= undefined -> PFbattle_id;
				 true -> NFbattle_id
			      end,
			  result =
			      if NFresult =:= undefined -> PFresult;
				 true -> NFresult
			      end,
			  reward =
			      if PFreward /= undefined, NFreward /= undefined ->
				     merge_msg_battle_reward(PFreward, NFreward,
							     TrUserData);
				 PFreward == undefined -> NFreward;
				 NFreward == undefined -> PFreward
			      end}.

merge_msg_battle_team_member(#battle_team_member{role_id
						     = PFrole_id,
						 elf_id = PFelf_id,
						 name = PFname, level = PFlevel,
						 team_id = PFteam_id},
			     #battle_team_member{role_id = NFrole_id,
						 elf_id = NFelf_id,
						 name = NFname, level = NFlevel,
						 team_id = NFteam_id},
			     _) ->
    #battle_team_member{role_id =
			    if NFrole_id =:= undefined -> PFrole_id;
			       true -> NFrole_id
			    end,
			elf_id =
			    if NFelf_id =:= undefined -> PFelf_id;
			       true -> NFelf_id
			    end,
			name =
			    if NFname =:= undefined -> PFname;
			       true -> NFname
			    end,
			level =
			    if NFlevel =:= undefined -> PFlevel;
			       true -> NFlevel
			    end,
			team_id =
			    if NFteam_id =:= undefined -> PFteam_id;
			       true -> NFteam_id
			    end}.

merge_msg_battle_team(#battle_team{members = PFmembers},
		      #battle_team{members = NFmembers}, TrUserData) ->
    #battle_team{members =
		     if PFmembers /= undefined, NFmembers /= undefined ->
			    'erlang_++'(PFmembers, NFmembers, TrUserData);
			PFmembers == undefined -> NFmembers;
			NFmembers == undefined -> PFmembers
		     end}.

merge_msg_battle_match_notify(#battle_match_notify{team_a
						       = PFteam_a,
						   team_b = PFteam_b,
						   battle_ip = PFbattle_ip,
						   battle_port = PFbattle_port},
			      #battle_match_notify{team_a = NFteam_a,
						   team_b = NFteam_b,
						   battle_ip = NFbattle_ip,
						   battle_port = NFbattle_port},
			      TrUserData) ->
    #battle_match_notify{team_a =
			     if PFteam_a /= undefined, NFteam_a /= undefined ->
				    merge_msg_battle_team(PFteam_a, NFteam_a,
							  TrUserData);
				PFteam_a == undefined -> NFteam_a;
				NFteam_a == undefined -> PFteam_a
			     end,
			 team_b =
			     if PFteam_b /= undefined, NFteam_b /= undefined ->
				    merge_msg_battle_team(PFteam_b, NFteam_b,
							  TrUserData);
				PFteam_b == undefined -> NFteam_b;
				NFteam_b == undefined -> PFteam_b
			     end,
			 battle_ip =
			     if NFbattle_ip =:= undefined -> PFbattle_ip;
				true -> NFbattle_ip
			     end,
			 battle_port =
			     if NFbattle_port =:= undefined -> PFbattle_port;
				true -> NFbattle_port
			     end}.

merge_msg_team_notify(_Prev, New, _TrUserData) -> New.

merge_msg_notify_msg(#notify_msg{notify = PFnotify,
				 battle_match = PFbattle_match,
				 battle_result = PFbattle_result},
		     #notify_msg{notify = NFnotify,
				 battle_match = NFbattle_match,
				 battle_result = NFbattle_result},
		     TrUserData) ->
    #notify_msg{notify =
		    if PFnotify /= undefined, NFnotify /= undefined ->
			   merge_msg_team_notify(PFnotify, NFnotify,
						 TrUserData);
		       PFnotify == undefined -> NFnotify;
		       NFnotify == undefined -> PFnotify
		    end,
		battle_match =
		    if PFbattle_match /= undefined,
		       NFbattle_match /= undefined ->
			   merge_msg_battle_match_notify(PFbattle_match,
							 NFbattle_match,
							 TrUserData);
		       PFbattle_match == undefined -> NFbattle_match;
		       NFbattle_match == undefined -> PFbattle_match
		    end,
		battle_result =
		    if PFbattle_result /= undefined,
		       NFbattle_result /= undefined ->
			   merge_msg_battle_result_notify(PFbattle_result,
							  NFbattle_result,
							  TrUserData);
		       PFbattle_result == undefined -> NFbattle_result;
		       NFbattle_result == undefined -> PFbattle_result
		    end}.

merge_msg_error_info(#error_info{msg = PFmsg},
		     #error_info{msg = NFmsg}, _) ->
    #error_info{msg =
		    if NFmsg =:= undefined -> PFmsg;
		       true -> NFmsg
		    end}.

merge_msg_down_msg(#down_msg{error = PFerror,
			     notify = PFnotify, login = PFlogin, role = PFrole,
			     rtnotify = PFrtnotify, magic = PFmagic,
			     team = PFteam, match = PFmatch},
		   #down_msg{error = NFerror, notify = NFnotify,
			     login = NFlogin, role = NFrole,
			     rtnotify = NFrtnotify, magic = NFmagic,
			     team = NFteam, match = NFmatch},
		   TrUserData) ->
    #down_msg{error =
		  if PFerror /= undefined, NFerror /= undefined ->
			 merge_msg_error_info(PFerror, NFerror, TrUserData);
		     PFerror == undefined -> NFerror;
		     NFerror == undefined -> PFerror
		  end,
	      notify =
		  if PFnotify /= undefined, NFnotify /= undefined ->
			 merge_msg_notify_msg(PFnotify, NFnotify, TrUserData);
		     PFnotify == undefined -> NFnotify;
		     NFnotify == undefined -> PFnotify
		  end,
	      login =
		  if PFlogin /= undefined, NFlogin /= undefined ->
			 merge_msg_login_reply(PFlogin, NFlogin, TrUserData);
		     PFlogin == undefined -> NFlogin;
		     NFlogin == undefined -> PFlogin
		  end,
	      role =
		  if PFrole /= undefined, NFrole /= undefined ->
			 merge_msg_role_reply(PFrole, NFrole, TrUserData);
		     PFrole == undefined -> NFrole;
		     NFrole == undefined -> PFrole
		  end,
	      rtnotify =
		  if PFrtnotify /= undefined, NFrtnotify /= undefined ->
			 merge_msg_rtnotify_reply(PFrtnotify, NFrtnotify,
						  TrUserData);
		     PFrtnotify == undefined -> NFrtnotify;
		     NFrtnotify == undefined -> PFrtnotify
		  end,
	      magic =
		  if PFmagic /= undefined, NFmagic /= undefined ->
			 merge_msg_magic_reply(PFmagic, NFmagic, TrUserData);
		     PFmagic == undefined -> NFmagic;
		     NFmagic == undefined -> PFmagic
		  end,
	      team =
		  if PFteam /= undefined, NFteam /= undefined ->
			 merge_msg_team_reply(PFteam, NFteam, TrUserData);
		     PFteam == undefined -> NFteam;
		     NFteam == undefined -> PFteam
		  end,
	      match =
		  if PFmatch /= undefined, NFmatch /= undefined ->
			 merge_msg_match_reply(PFmatch, NFmatch, TrUserData);
		     PFmatch == undefined -> NFmatch;
		     NFmatch == undefined -> PFmatch
		  end}.

merge_msg_battle_stat(_Prev, New, _TrUserData) -> New.


verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #name_card_st{} ->
	  v_msg_name_card_st(Msg, [name_card_st], TrUserData);
      #role_st{} -> v_msg_role_st(Msg, [role_st], TrUserData);
      #create_role_reply{} ->
	  v_msg_create_role_reply(Msg, [create_role_reply],
				  TrUserData);
      #match_reply{} ->
	  v_msg_match_reply(Msg, [match_reply], TrUserData);
      #team_member_st{} ->
	  v_msg_team_member_st(Msg, [team_member_st], TrUserData);
      #team_info_st{} ->
	  v_msg_team_info_st(Msg, [team_info_st], TrUserData);
      #team_reply{} ->
	  v_msg_team_reply(Msg, [team_reply], TrUserData);
      #select_magic_reply{} ->
	  v_msg_select_magic_reply(Msg, [select_magic_reply],
				   TrUserData);
      #magic_reply{} ->
	  v_msg_magic_reply(Msg, [magic_reply], TrUserData);
      #rtnotify_callback_reply{} ->
	  v_msg_rtnotify_callback_reply(Msg,
					[rtnotify_callback_reply], TrUserData);
      #rtnotify_keepalive_reply{} ->
	  v_msg_rtnotify_keepalive_reply(Msg,
					 [rtnotify_keepalive_reply],
					 TrUserData);
      #rtnotify_reply{} ->
	  v_msg_rtnotify_reply(Msg, [rtnotify_reply], TrUserData);
      #lookup_role_reply{} ->
	  v_msg_lookup_role_reply(Msg, [lookup_role_reply],
				  TrUserData);
      #select_role_reply{} ->
	  v_msg_select_role_reply(Msg, [select_role_reply],
				  TrUserData);
      #role_reply{} ->
	  v_msg_role_reply(Msg, [role_reply], TrUserData);
      #role_summary_st{} ->
	  v_msg_role_summary_st(Msg, [role_summary_st],
				TrUserData);
      #login_reply{} ->
	  v_msg_login_reply(Msg, [login_reply], TrUserData);
      #reward{} -> v_msg_reward(Msg, [reward], TrUserData);
      #battle_reward{} ->
	  v_msg_battle_reward(Msg, [battle_reward], TrUserData);
      #battle_result_notify{} ->
	  v_msg_battle_result_notify(Msg, [battle_result_notify],
				     TrUserData);
      #battle_team_member{} ->
	  v_msg_battle_team_member(Msg, [battle_team_member],
				   TrUserData);
      #battle_team{} ->
	  v_msg_battle_team(Msg, [battle_team], TrUserData);
      #battle_match_notify{} ->
	  v_msg_battle_match_notify(Msg, [battle_match_notify],
				    TrUserData);
      #team_notify{} ->
	  v_msg_team_notify(Msg, [team_notify], TrUserData);
      #notify_msg{} ->
	  v_msg_notify_msg(Msg, [notify_msg], TrUserData);
      #error_info{} ->
	  v_msg_error_info(Msg, [error_info], TrUserData);
      #down_msg{} ->
	  v_msg_down_msg(Msg, [down_msg], TrUserData);
      #battle_stat{} ->
	  v_msg_battle_stat(Msg, [battle_stat], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_name_card_st/3}).
v_msg_name_card_st(#name_card_st{name = F1,
				 last_set_time = F2},
		   Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [name | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [last_set_time | Path])
    end,
    ok;
v_msg_name_card_st(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, name_card_st}, X, Path).

-dialyzer({nowarn_function,v_msg_role_st/3}).
v_msg_role_st(#role_st{role_id = F1, elf_id = F2,
		       name_card = F3, level = F4, exp = F5},
	      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [role_id | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [elf_id | Path])
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_name_card_st(F3, [name_card | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [level | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [exp | Path])
    end,
    ok;
v_msg_role_st(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, role_st}, X, Path).

-dialyzer({nowarn_function,v_msg_create_role_reply/3}).
v_msg_create_role_reply(#create_role_reply{result = F1,
					   role = F2},
			Path, TrUserData) ->
    'v_enum_create_role_reply.create_role_result'(F1,
						  [result | Path]),
    if F2 == undefined -> ok;
       true -> v_msg_role_st(F2, [role | Path], TrUserData)
    end,
    ok;
v_msg_create_role_reply(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, create_role_reply}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_match_reply/3}).
v_msg_match_reply(#match_reply{start = F1, cancel = F2},
		  Path, _) ->
    if F1 == undefined -> ok;
       true -> v_enum_match_result(F1, [start | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_enum_match_result(F2, [cancel | Path])
    end,
    ok;
v_msg_match_reply(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, match_reply}, X, Path).

-dialyzer({nowarn_function,v_msg_team_member_st/3}).
v_msg_team_member_st(#team_member_st{user_id = F1,
				     state = F2, elf_id = F3, name = F4,
				     level = F5},
		     Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [user_id | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_enum_team_member_state(F2, [state | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [elf_id | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [name | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [level | Path])
    end,
    ok;
v_msg_team_member_st(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, team_member_st}, X, Path).

-dialyzer({nowarn_function,v_msg_team_info_st/3}).
v_msg_team_info_st(#team_info_st{members = F1,
				 leader_id = F2},
		   Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_team_member_st(Elem, [members | Path],
				     TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, team_member_st}},
			 F1, [members | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [leader_id | Path])
    end,
    ok;
v_msg_team_info_st(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, team_info_st}, X, Path).

-dialyzer({nowarn_function,v_msg_team_reply/3}).
v_msg_team_reply(#team_reply{invite = F1, accept = F2,
			     refuse = F3, state = F4, leave = F5},
		 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_team_member_st(F1, [invite | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_team_info_st(F2, [accept | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_enum_result(F3, [refuse | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_enum_result(F4, [state | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_enum_result(F5, [leave | Path])
    end,
    ok;
v_msg_team_reply(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, team_reply}, X, Path).

-dialyzer({nowarn_function,v_msg_select_magic_reply/3}).
v_msg_select_magic_reply(#select_magic_reply{result =
						 F1},
			 Path, _) ->
    if F1 == undefined -> ok;
       true -> v_enum_result(F1, [result | Path])
    end,
    ok;
v_msg_select_magic_reply(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, select_magic_reply}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_magic_reply/3}).
v_msg_magic_reply(#magic_reply{select = F1}, Path,
		  TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_select_magic_reply(F1, [select | Path],
				    TrUserData)
    end,
    ok;
v_msg_magic_reply(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, magic_reply}, X, Path).

-dialyzer({nowarn_function,v_msg_rtnotify_callback_reply/3}).
v_msg_rtnotify_callback_reply(#rtnotify_callback_reply{string
							   = F1},
			      Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [string | Path])
    end,
    ok;
v_msg_rtnotify_callback_reply(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, rtnotify_callback_reply},
		  X, Path).

-dialyzer({nowarn_function,v_msg_rtnotify_keepalive_reply/3}).
v_msg_rtnotify_keepalive_reply(#rtnotify_keepalive_reply{time
							     = F1},
			       Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [time | Path])
    end,
    ok;
v_msg_rtnotify_keepalive_reply(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, rtnotify_keepalive_reply},
		  X, Path).

-dialyzer({nowarn_function,v_msg_rtnotify_reply/3}).
v_msg_rtnotify_reply(#rtnotify_reply{register = F1,
				     keepalive = F2, callback = F3},
		     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_result(F1, [register | Path])
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_rtnotify_keepalive_reply(F2, [keepalive | Path],
					  TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_rtnotify_callback_reply(F3, [callback | Path],
					 TrUserData)
    end,
    ok;
v_msg_rtnotify_reply(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, rtnotify_reply}, X, Path).

-dialyzer({nowarn_function,v_msg_lookup_role_reply/3}).
v_msg_lookup_role_reply(#lookup_role_reply{roles = F1},
			Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_role_st(Elem, [roles | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, role_st}}, F1,
			 [roles | Path])
    end,
    ok;
v_msg_lookup_role_reply(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, lookup_role_reply}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_select_role_reply/3}).
v_msg_select_role_reply(#select_role_reply{role = F1},
			Path, TrUserData) ->
    v_msg_role_st(F1, [role | Path], TrUserData), ok;
v_msg_select_role_reply(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, select_role_reply}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_role_reply/3}).
v_msg_role_reply(#role_reply{create = F1, select = F2,
			     lookup = F3},
		 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_create_role_reply(F1, [create | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_select_role_reply(F2, [select | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_lookup_role_reply(F3, [lookup | Path], TrUserData)
    end,
    ok;
v_msg_role_reply(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, role_reply}, X, Path).

-dialyzer({nowarn_function,v_msg_role_summary_st/3}).
v_msg_role_summary_st(#role_summary_st{role_id = F1,
				       elf_id = F2, name = F3, level = F4},
		      Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [role_id | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [elf_id | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [name | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [level | Path])
    end,
    ok;
v_msg_role_summary_st(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, role_summary_st}, X, Path).

-dialyzer({nowarn_function,v_msg_login_reply/3}).
v_msg_login_reply(#login_reply{result = F1,
			       user_id = F2, role = F3, roles = F4},
		  Path, TrUserData) ->
    'v_enum_login_reply.login_result'(F1, [result | Path]),
    v_type_uint32(F2, [user_id | Path]),
    if F3 == undefined -> ok;
       true -> v_msg_role_st(F3, [role | Path], TrUserData)
    end,
    if is_list(F4) ->
	   _ = [v_msg_role_summary_st(Elem, [roles | Path],
				      TrUserData)
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, role_summary_st}},
			 F4, [roles | Path])
    end,
    ok;
v_msg_login_reply(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, login_reply}, X, Path).

-dialyzer({nowarn_function,v_msg_reward/3}).
v_msg_reward(#reward{type = F1, id = F2, level = F3,
		     amount = F4},
	     Path, _) ->
    if F1 == undefined -> ok;
       true -> 'v_enum_reward.reward_type'(F1, [type | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [id | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [level | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [amount | Path])
    end,
    ok;
v_msg_reward(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, reward}, X, Path).

-dialyzer({nowarn_function,v_msg_battle_reward/3}).
v_msg_battle_reward(#battle_reward{rewards = F1}, Path,
		    TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_reward(Elem, [rewards | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, reward}}, F1,
			 [rewards | Path])
    end,
    ok;
v_msg_battle_reward(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, battle_reward}, X, Path).

-dialyzer({nowarn_function,v_msg_battle_result_notify/3}).
v_msg_battle_result_notify(#battle_result_notify{battle_id
						     = F1,
						 result = F2, reward = F3},
			   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [battle_id | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [result | Path])
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_battle_reward(F3, [reward | Path], TrUserData)
    end,
    ok;
v_msg_battle_result_notify(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, battle_result_notify}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_battle_team_member/3}).
v_msg_battle_team_member(#battle_team_member{role_id =
						 F1,
					     elf_id = F2, name = F3, level = F4,
					     team_id = F5},
			 Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [role_id | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [elf_id | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [name | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [level | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [team_id | Path])
    end,
    ok;
v_msg_battle_team_member(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, battle_team_member}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_battle_team/3}).
v_msg_battle_team(#battle_team{members = F1}, Path,
		  TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_battle_team_member(Elem, [members | Path],
					 TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, battle_team_member}},
			 F1, [members | Path])
    end,
    ok;
v_msg_battle_team(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, battle_team}, X, Path).

-dialyzer({nowarn_function,v_msg_battle_match_notify/3}).
v_msg_battle_match_notify(#battle_match_notify{team_a =
						   F1,
					       team_b = F2, battle_ip = F3,
					       battle_port = F4},
			  Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_battle_team(F1, [team_a | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_battle_team(F2, [team_b | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [battle_ip | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [battle_port | Path])
    end,
    ok;
v_msg_battle_match_notify(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, battle_match_notify}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_team_notify/3}).
v_msg_team_notify(#team_notify{}, _Path, _) -> ok;
v_msg_team_notify(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, team_notify}, X, Path).

-dialyzer({nowarn_function,v_msg_notify_msg/3}).
v_msg_notify_msg(#notify_msg{notify = F1,
			     battle_match = F2, battle_result = F3},
		 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_team_notify(F1, [notify | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_battle_match_notify(F2, [battle_match | Path],
				     TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_battle_result_notify(F3, [battle_result | Path],
				      TrUserData)
    end,
    ok;
v_msg_notify_msg(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, notify_msg}, X, Path).

-dialyzer({nowarn_function,v_msg_error_info/3}).
v_msg_error_info(#error_info{msg = F1}, Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [msg | Path])
    end,
    ok;
v_msg_error_info(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, error_info}, X, Path).

-dialyzer({nowarn_function,v_msg_down_msg/3}).
v_msg_down_msg(#down_msg{error = F1, notify = F2,
			 login = F3, role = F4, rtnotify = F5, magic = F6,
			 team = F7, match = F8},
	       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_error_info(F1, [error | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_notify_msg(F2, [notify | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_login_reply(F3, [login | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_msg_role_reply(F4, [role | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_msg_rtnotify_reply(F5, [rtnotify | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true ->
	   v_msg_magic_reply(F6, [magic | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_msg_team_reply(F7, [team | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true ->
	   v_msg_match_reply(F8, [match | Path], TrUserData)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_battle_stat/3}).
v_msg_battle_stat(#battle_stat{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_enum_result/2}).
v_enum_result(success, _Path) -> ok;
v_enum_result(fail, _Path) -> ok;
v_enum_result(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
v_enum_result(X, Path) ->
    mk_type_error({invalid_enum, result}, X, Path).

-dialyzer({nowarn_function,'v_enum_login_reply.login_result'/2}).
'v_enum_login_reply.login_result'(new_user, _Path) ->
    ok;
'v_enum_login_reply.login_result'(default_role,
				  _Path) ->
    ok;
'v_enum_login_reply.login_result'(role_list, _Path) ->
    ok;
'v_enum_login_reply.login_result'(V, Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_login_reply.login_result'(X, Path) ->
    mk_type_error({invalid_enum,
		   'login_reply.login_result'},
		  X, Path).

-dialyzer({nowarn_function,'v_enum_create_role_reply.create_role_result'/2}).
'v_enum_create_role_reply.create_role_result'(success,
					      _Path) ->
    ok;
'v_enum_create_role_reply.create_role_result'(nickname_repeat,
					      _Path) ->
    ok;
'v_enum_create_role_reply.create_role_result'(nickname_error,
					      _Path) ->
    ok;
'v_enum_create_role_reply.create_role_result'(nickname_dirty,
					      _Path) ->
    ok;
'v_enum_create_role_reply.create_role_result'(V, Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_create_role_reply.create_role_result'(X,
					      Path) ->
    mk_type_error({invalid_enum,
		   'create_role_reply.create_role_result'},
		  X, Path).

-dialyzer({nowarn_function,v_enum_match_result/2}).
v_enum_match_result(success, _Path) -> ok;
v_enum_match_result(matching, _Path) -> ok;
v_enum_match_result(matched, _Path) -> ok;
v_enum_match_result(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
v_enum_match_result(X, Path) ->
    mk_type_error({invalid_enum, match_result}, X, Path).

-dialyzer({nowarn_function,'v_enum_reward.reward_type'/2}).
'v_enum_reward.reward_type'(element, _Path) -> ok;
'v_enum_reward.reward_type'(V, Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_reward.reward_type'(X, Path) ->
    mk_type_error({invalid_enum, 'reward.reward_type'}, X,
		  Path).

-dialyzer({nowarn_function,v_enum_team_member_state/2}).
v_enum_team_member_state(inviting, _Path) -> ok;
v_enum_team_member_state(unready, _Path) -> ok;
v_enum_team_member_state(ready, _Path) -> ok;
v_enum_team_member_state(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
v_enum_team_member_state(X, Path) ->
    mk_type_error({invalid_enum, team_member_state}, X,
		  Path).

-dialyzer({nowarn_function,v_type_sint32/2}).
v_type_sint32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_uint32/2}).
v_type_uint32(N, _Path) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).


-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{enum, result}, [{success, 0}, {fail, 1}]},
     {{enum, 'login_reply.login_result'},
      [{new_user, 1}, {default_role, 2}, {role_list, 3}]},
     {{enum, 'create_role_reply.create_role_result'},
      [{success, 0}, {nickname_repeat, 1},
       {nickname_error, 2}, {nickname_dirty, 3}]},
     {{enum, match_result},
      [{success, 1}, {matching, 2}, {matched, 3}]},
     {{enum, 'reward.reward_type'}, [{element, 1}]},
     {{enum, team_member_state},
      [{inviting, 1}, {unready, 2}, {ready, 3}]},
     {{msg, name_card_st},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = last_set_time, fnum = 2, rnum = 3,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, role_st},
      [#field{name = role_id, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = elf_id, fnum = 2, rnum = 3, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = name_card, fnum = 3, rnum = 4,
	      type = {msg, name_card_st}, occurrence = optional,
	      opts = []},
       #field{name = level, fnum = 4, rnum = 5, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = exp, fnum = 5, rnum = 6, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, create_role_reply},
      [#field{name = result, fnum = 1, rnum = 2,
	      type = {enum, 'create_role_reply.create_role_result'},
	      occurrence = required, opts = []},
       #field{name = role, fnum = 2, rnum = 3,
	      type = {msg, role_st}, occurrence = optional,
	      opts = []}]},
     {{msg, match_reply},
      [#field{name = start, fnum = 1, rnum = 2,
	      type = {enum, match_result}, occurrence = optional,
	      opts = []},
       #field{name = cancel, fnum = 2, rnum = 3,
	      type = {enum, match_result}, occurrence = optional,
	      opts = []}]},
     {{msg, team_member_st},
      [#field{name = user_id, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = state, fnum = 2, rnum = 3,
	      type = {enum, team_member_state}, occurrence = optional,
	      opts = []},
       #field{name = elf_id, fnum = 3, rnum = 4, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = name, fnum = 4, rnum = 5, type = string,
	      occurrence = optional, opts = []},
       #field{name = level, fnum = 5, rnum = 6, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, team_info_st},
      [#field{name = members, fnum = 1, rnum = 2,
	      type = {msg, team_member_st}, occurrence = repeated,
	      opts = []},
       #field{name = leader_id, fnum = 2, rnum = 3,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, team_reply},
      [#field{name = invite, fnum = 1, rnum = 2,
	      type = {msg, team_member_st}, occurrence = optional,
	      opts = []},
       #field{name = accept, fnum = 2, rnum = 3,
	      type = {msg, team_info_st}, occurrence = optional,
	      opts = []},
       #field{name = refuse, fnum = 3, rnum = 4,
	      type = {enum, result}, occurrence = optional,
	      opts = []},
       #field{name = state, fnum = 4, rnum = 5,
	      type = {enum, result}, occurrence = optional,
	      opts = []},
       #field{name = leave, fnum = 5, rnum = 6,
	      type = {enum, result}, occurrence = optional,
	      opts = []}]},
     {{msg, select_magic_reply},
      [#field{name = result, fnum = 1, rnum = 2,
	      type = {enum, result}, occurrence = optional,
	      opts = []}]},
     {{msg, magic_reply},
      [#field{name = select, fnum = 1, rnum = 2,
	      type = {msg, select_magic_reply}, occurrence = optional,
	      opts = []}]},
     {{msg, rtnotify_callback_reply},
      [#field{name = string, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, rtnotify_keepalive_reply},
      [#field{name = time, fnum = 1, rnum = 2, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, rtnotify_reply},
      [#field{name = register, fnum = 1, rnum = 2,
	      type = {enum, result}, occurrence = optional,
	      opts = []},
       #field{name = keepalive, fnum = 2, rnum = 3,
	      type = {msg, rtnotify_keepalive_reply},
	      occurrence = optional, opts = []},
       #field{name = callback, fnum = 3, rnum = 4,
	      type = {msg, rtnotify_callback_reply},
	      occurrence = optional, opts = []}]},
     {{msg, lookup_role_reply},
      [#field{name = roles, fnum = 1, rnum = 2,
	      type = {msg, role_st}, occurrence = repeated,
	      opts = []}]},
     {{msg, select_role_reply},
      [#field{name = role, fnum = 1, rnum = 2,
	      type = {msg, role_st}, occurrence = required,
	      opts = []}]},
     {{msg, role_reply},
      [#field{name = create, fnum = 1, rnum = 2,
	      type = {msg, create_role_reply}, occurrence = optional,
	      opts = []},
       #field{name = select, fnum = 2, rnum = 3,
	      type = {msg, select_role_reply}, occurrence = optional,
	      opts = []},
       #field{name = lookup, fnum = 3, rnum = 4,
	      type = {msg, lookup_role_reply}, occurrence = optional,
	      opts = []}]},
     {{msg, role_summary_st},
      [#field{name = role_id, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = elf_id, fnum = 2, rnum = 3, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = name, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []},
       #field{name = level, fnum = 4, rnum = 5, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, login_reply},
      [#field{name = result, fnum = 1, rnum = 2,
	      type = {enum, 'login_reply.login_result'},
	      occurrence = required, opts = []},
       #field{name = user_id, fnum = 2, rnum = 3,
	      type = uint32, occurrence = required, opts = []},
       #field{name = role, fnum = 3, rnum = 4,
	      type = {msg, role_st}, occurrence = optional,
	      opts = []},
       #field{name = roles, fnum = 4, rnum = 5,
	      type = {msg, role_summary_st}, occurrence = repeated,
	      opts = []}]},
     {{msg, reward},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, 'reward.reward_type'},
	      occurrence = optional, opts = []},
       #field{name = id, fnum = 2, rnum = 3, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = level, fnum = 3, rnum = 4, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = amount, fnum = 4, rnum = 5, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, battle_reward},
      [#field{name = rewards, fnum = 1, rnum = 2,
	      type = {msg, reward}, occurrence = repeated,
	      opts = []}]},
     {{msg, battle_result_notify},
      [#field{name = battle_id, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = result, fnum = 2, rnum = 3, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = reward, fnum = 3, rnum = 4,
	      type = {msg, battle_reward}, occurrence = optional,
	      opts = []}]},
     {{msg, battle_team_member},
      [#field{name = role_id, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = elf_id, fnum = 2, rnum = 3, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = name, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []},
       #field{name = level, fnum = 4, rnum = 5, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = team_id, fnum = 5, rnum = 6,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, battle_team},
      [#field{name = members, fnum = 1, rnum = 2,
	      type = {msg, battle_team_member}, occurrence = repeated,
	      opts = []}]},
     {{msg, battle_match_notify},
      [#field{name = team_a, fnum = 1, rnum = 2,
	      type = {msg, battle_team}, occurrence = optional,
	      opts = []},
       #field{name = team_b, fnum = 2, rnum = 3,
	      type = {msg, battle_team}, occurrence = optional,
	      opts = []},
       #field{name = battle_ip, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = battle_port, fnum = 4, rnum = 5,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, team_notify}, []},
     {{msg, notify_msg},
      [#field{name = notify, fnum = 1, rnum = 2,
	      type = {msg, team_notify}, occurrence = optional,
	      opts = []},
       #field{name = battle_match, fnum = 2, rnum = 3,
	      type = {msg, battle_match_notify},
	      occurrence = optional, opts = []},
       #field{name = battle_result, fnum = 3, rnum = 4,
	      type = {msg, battle_result_notify},
	      occurrence = optional, opts = []}]},
     {{msg, error_info},
      [#field{name = msg, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, down_msg},
      [#field{name = error, fnum = 1, rnum = 2,
	      type = {msg, error_info}, occurrence = optional,
	      opts = []},
       #field{name = notify, fnum = 2, rnum = 3,
	      type = {msg, notify_msg}, occurrence = optional,
	      opts = []},
       #field{name = login, fnum = 3, rnum = 4,
	      type = {msg, login_reply}, occurrence = optional,
	      opts = []},
       #field{name = role, fnum = 4, rnum = 5,
	      type = {msg, role_reply}, occurrence = optional,
	      opts = []},
       #field{name = rtnotify, fnum = 5, rnum = 6,
	      type = {msg, rtnotify_reply}, occurrence = optional,
	      opts = []},
       #field{name = magic, fnum = 6, rnum = 7,
	      type = {msg, magic_reply}, occurrence = optional,
	      opts = []},
       #field{name = team, fnum = 7, rnum = 8,
	      type = {msg, team_reply}, occurrence = optional,
	      opts = []},
       #field{name = match, fnum = 8, rnum = 9,
	      type = {msg, match_reply}, occurrence = optional,
	      opts = []}]},
     {{msg, battle_stat}, []}].


get_msg_names() ->
    [name_card_st, role_st, create_role_reply, match_reply,
     team_member_st, team_info_st, team_reply,
     select_magic_reply, magic_reply,
     rtnotify_callback_reply, rtnotify_keepalive_reply,
     rtnotify_reply, lookup_role_reply, select_role_reply,
     role_reply, role_summary_st, login_reply, reward,
     battle_reward, battle_result_notify, battle_team_member,
     battle_team, battle_match_notify, team_notify,
     notify_msg, error_info, down_msg, battle_stat].


get_group_names() -> [].


get_msg_or_group_names() ->
    [name_card_st, role_st, create_role_reply, match_reply,
     team_member_st, team_info_st, team_reply,
     select_magic_reply, magic_reply,
     rtnotify_callback_reply, rtnotify_keepalive_reply,
     rtnotify_reply, lookup_role_reply, select_role_reply,
     role_reply, role_summary_st, login_reply, reward,
     battle_reward, battle_result_notify, battle_team_member,
     battle_team, battle_match_notify, team_notify,
     notify_msg, error_info, down_msg, battle_stat].


get_enum_names() ->
    [result, 'login_reply.login_result',
     'create_role_reply.create_role_result', match_result,
     'reward.reward_type', team_member_state].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(name_card_st) ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = last_set_time, fnum = 2, rnum = 3,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def(role_st) ->
    [#field{name = role_id, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = elf_id, fnum = 2, rnum = 3, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = name_card, fnum = 3, rnum = 4,
	    type = {msg, name_card_st}, occurrence = optional,
	    opts = []},
     #field{name = level, fnum = 4, rnum = 5, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = exp, fnum = 5, rnum = 6, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def(create_role_reply) ->
    [#field{name = result, fnum = 1, rnum = 2,
	    type = {enum, 'create_role_reply.create_role_result'},
	    occurrence = required, opts = []},
     #field{name = role, fnum = 2, rnum = 3,
	    type = {msg, role_st}, occurrence = optional,
	    opts = []}];
find_msg_def(match_reply) ->
    [#field{name = start, fnum = 1, rnum = 2,
	    type = {enum, match_result}, occurrence = optional,
	    opts = []},
     #field{name = cancel, fnum = 2, rnum = 3,
	    type = {enum, match_result}, occurrence = optional,
	    opts = []}];
find_msg_def(team_member_st) ->
    [#field{name = user_id, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = state, fnum = 2, rnum = 3,
	    type = {enum, team_member_state}, occurrence = optional,
	    opts = []},
     #field{name = elf_id, fnum = 3, rnum = 4, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = name, fnum = 4, rnum = 5, type = string,
	    occurrence = optional, opts = []},
     #field{name = level, fnum = 5, rnum = 6, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def(team_info_st) ->
    [#field{name = members, fnum = 1, rnum = 2,
	    type = {msg, team_member_st}, occurrence = repeated,
	    opts = []},
     #field{name = leader_id, fnum = 2, rnum = 3,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def(team_reply) ->
    [#field{name = invite, fnum = 1, rnum = 2,
	    type = {msg, team_member_st}, occurrence = optional,
	    opts = []},
     #field{name = accept, fnum = 2, rnum = 3,
	    type = {msg, team_info_st}, occurrence = optional,
	    opts = []},
     #field{name = refuse, fnum = 3, rnum = 4,
	    type = {enum, result}, occurrence = optional,
	    opts = []},
     #field{name = state, fnum = 4, rnum = 5,
	    type = {enum, result}, occurrence = optional,
	    opts = []},
     #field{name = leave, fnum = 5, rnum = 6,
	    type = {enum, result}, occurrence = optional,
	    opts = []}];
find_msg_def(select_magic_reply) ->
    [#field{name = result, fnum = 1, rnum = 2,
	    type = {enum, result}, occurrence = optional,
	    opts = []}];
find_msg_def(magic_reply) ->
    [#field{name = select, fnum = 1, rnum = 2,
	    type = {msg, select_magic_reply}, occurrence = optional,
	    opts = []}];
find_msg_def(rtnotify_callback_reply) ->
    [#field{name = string, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def(rtnotify_keepalive_reply) ->
    [#field{name = time, fnum = 1, rnum = 2, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def(rtnotify_reply) ->
    [#field{name = register, fnum = 1, rnum = 2,
	    type = {enum, result}, occurrence = optional,
	    opts = []},
     #field{name = keepalive, fnum = 2, rnum = 3,
	    type = {msg, rtnotify_keepalive_reply},
	    occurrence = optional, opts = []},
     #field{name = callback, fnum = 3, rnum = 4,
	    type = {msg, rtnotify_callback_reply},
	    occurrence = optional, opts = []}];
find_msg_def(lookup_role_reply) ->
    [#field{name = roles, fnum = 1, rnum = 2,
	    type = {msg, role_st}, occurrence = repeated,
	    opts = []}];
find_msg_def(select_role_reply) ->
    [#field{name = role, fnum = 1, rnum = 2,
	    type = {msg, role_st}, occurrence = required,
	    opts = []}];
find_msg_def(role_reply) ->
    [#field{name = create, fnum = 1, rnum = 2,
	    type = {msg, create_role_reply}, occurrence = optional,
	    opts = []},
     #field{name = select, fnum = 2, rnum = 3,
	    type = {msg, select_role_reply}, occurrence = optional,
	    opts = []},
     #field{name = lookup, fnum = 3, rnum = 4,
	    type = {msg, lookup_role_reply}, occurrence = optional,
	    opts = []}];
find_msg_def(role_summary_st) ->
    [#field{name = role_id, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = elf_id, fnum = 2, rnum = 3, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = name, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []},
     #field{name = level, fnum = 4, rnum = 5, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def(login_reply) ->
    [#field{name = result, fnum = 1, rnum = 2,
	    type = {enum, 'login_reply.login_result'},
	    occurrence = required, opts = []},
     #field{name = user_id, fnum = 2, rnum = 3,
	    type = uint32, occurrence = required, opts = []},
     #field{name = role, fnum = 3, rnum = 4,
	    type = {msg, role_st}, occurrence = optional,
	    opts = []},
     #field{name = roles, fnum = 4, rnum = 5,
	    type = {msg, role_summary_st}, occurrence = repeated,
	    opts = []}];
find_msg_def(reward) ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, 'reward.reward_type'},
	    occurrence = optional, opts = []},
     #field{name = id, fnum = 2, rnum = 3, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = level, fnum = 3, rnum = 4, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = amount, fnum = 4, rnum = 5, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def(battle_reward) ->
    [#field{name = rewards, fnum = 1, rnum = 2,
	    type = {msg, reward}, occurrence = repeated,
	    opts = []}];
find_msg_def(battle_result_notify) ->
    [#field{name = battle_id, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = result, fnum = 2, rnum = 3, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = reward, fnum = 3, rnum = 4,
	    type = {msg, battle_reward}, occurrence = optional,
	    opts = []}];
find_msg_def(battle_team_member) ->
    [#field{name = role_id, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = elf_id, fnum = 2, rnum = 3, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = name, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []},
     #field{name = level, fnum = 4, rnum = 5, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = team_id, fnum = 5, rnum = 6,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def(battle_team) ->
    [#field{name = members, fnum = 1, rnum = 2,
	    type = {msg, battle_team_member}, occurrence = repeated,
	    opts = []}];
find_msg_def(battle_match_notify) ->
    [#field{name = team_a, fnum = 1, rnum = 2,
	    type = {msg, battle_team}, occurrence = optional,
	    opts = []},
     #field{name = team_b, fnum = 2, rnum = 3,
	    type = {msg, battle_team}, occurrence = optional,
	    opts = []},
     #field{name = battle_ip, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = battle_port, fnum = 4, rnum = 5,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def(team_notify) -> [];
find_msg_def(notify_msg) ->
    [#field{name = notify, fnum = 1, rnum = 2,
	    type = {msg, team_notify}, occurrence = optional,
	    opts = []},
     #field{name = battle_match, fnum = 2, rnum = 3,
	    type = {msg, battle_match_notify},
	    occurrence = optional, opts = []},
     #field{name = battle_result, fnum = 3, rnum = 4,
	    type = {msg, battle_result_notify},
	    occurrence = optional, opts = []}];
find_msg_def(error_info) ->
    [#field{name = msg, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []}];
find_msg_def(down_msg) ->
    [#field{name = error, fnum = 1, rnum = 2,
	    type = {msg, error_info}, occurrence = optional,
	    opts = []},
     #field{name = notify, fnum = 2, rnum = 3,
	    type = {msg, notify_msg}, occurrence = optional,
	    opts = []},
     #field{name = login, fnum = 3, rnum = 4,
	    type = {msg, login_reply}, occurrence = optional,
	    opts = []},
     #field{name = role, fnum = 4, rnum = 5,
	    type = {msg, role_reply}, occurrence = optional,
	    opts = []},
     #field{name = rtnotify, fnum = 5, rnum = 6,
	    type = {msg, rtnotify_reply}, occurrence = optional,
	    opts = []},
     #field{name = magic, fnum = 6, rnum = 7,
	    type = {msg, magic_reply}, occurrence = optional,
	    opts = []},
     #field{name = team, fnum = 7, rnum = 8,
	    type = {msg, team_reply}, occurrence = optional,
	    opts = []},
     #field{name = match, fnum = 8, rnum = 9,
	    type = {msg, match_reply}, occurrence = optional,
	    opts = []}];
find_msg_def(battle_stat) -> [];
find_msg_def(_) -> error.


find_enum_def(result) -> [{success, 0}, {fail, 1}];
find_enum_def('login_reply.login_result') ->
    [{new_user, 1}, {default_role, 2}, {role_list, 3}];
find_enum_def('create_role_reply.create_role_result') ->
    [{success, 0}, {nickname_repeat, 1},
     {nickname_error, 2}, {nickname_dirty, 3}];
find_enum_def(match_result) ->
    [{success, 1}, {matching, 2}, {matched, 3}];
find_enum_def('reward.reward_type') -> [{element, 1}];
find_enum_def(team_member_state) ->
    [{inviting, 1}, {unready, 2}, {ready, 3}];
find_enum_def(_) -> error.


enum_symbol_by_value(result, Value) ->
    enum_symbol_by_value_result(Value);
enum_symbol_by_value('login_reply.login_result',
		     Value) ->
    'enum_symbol_by_value_login_reply.login_result'(Value);
enum_symbol_by_value('create_role_reply.create_role_result',
		     Value) ->
    'enum_symbol_by_value_create_role_reply.create_role_result'(Value);
enum_symbol_by_value(match_result, Value) ->
    enum_symbol_by_value_match_result(Value);
enum_symbol_by_value('reward.reward_type', Value) ->
    'enum_symbol_by_value_reward.reward_type'(Value);
enum_symbol_by_value(team_member_state, Value) ->
    enum_symbol_by_value_team_member_state(Value).


enum_value_by_symbol(result, Sym) ->
    enum_value_by_symbol_result(Sym);
enum_value_by_symbol('login_reply.login_result', Sym) ->
    'enum_value_by_symbol_login_reply.login_result'(Sym);
enum_value_by_symbol('create_role_reply.create_role_result',
		     Sym) ->
    'enum_value_by_symbol_create_role_reply.create_role_result'(Sym);
enum_value_by_symbol(match_result, Sym) ->
    enum_value_by_symbol_match_result(Sym);
enum_value_by_symbol('reward.reward_type', Sym) ->
    'enum_value_by_symbol_reward.reward_type'(Sym);
enum_value_by_symbol(team_member_state, Sym) ->
    enum_value_by_symbol_team_member_state(Sym).


enum_symbol_by_value_result(0) -> success;
enum_symbol_by_value_result(1) -> fail.


enum_value_by_symbol_result(success) -> 0;
enum_value_by_symbol_result(fail) -> 1.

'enum_symbol_by_value_login_reply.login_result'(1) ->
    new_user;
'enum_symbol_by_value_login_reply.login_result'(2) ->
    default_role;
'enum_symbol_by_value_login_reply.login_result'(3) ->
    role_list.


'enum_value_by_symbol_login_reply.login_result'(new_user) ->
    1;
'enum_value_by_symbol_login_reply.login_result'(default_role) ->
    2;
'enum_value_by_symbol_login_reply.login_result'(role_list) ->
    3.

'enum_symbol_by_value_create_role_reply.create_role_result'(0) ->
    success;
'enum_symbol_by_value_create_role_reply.create_role_result'(1) ->
    nickname_repeat;
'enum_symbol_by_value_create_role_reply.create_role_result'(2) ->
    nickname_error;
'enum_symbol_by_value_create_role_reply.create_role_result'(3) ->
    nickname_dirty.


'enum_value_by_symbol_create_role_reply.create_role_result'(success) ->
    0;
'enum_value_by_symbol_create_role_reply.create_role_result'(nickname_repeat) ->
    1;
'enum_value_by_symbol_create_role_reply.create_role_result'(nickname_error) ->
    2;
'enum_value_by_symbol_create_role_reply.create_role_result'(nickname_dirty) ->
    3.

enum_symbol_by_value_match_result(1) -> success;
enum_symbol_by_value_match_result(2) -> matching;
enum_symbol_by_value_match_result(3) -> matched.


enum_value_by_symbol_match_result(success) -> 1;
enum_value_by_symbol_match_result(matching) -> 2;
enum_value_by_symbol_match_result(matched) -> 3.

'enum_symbol_by_value_reward.reward_type'(1) -> element.


'enum_value_by_symbol_reward.reward_type'(element) -> 1.

enum_symbol_by_value_team_member_state(1) -> inviting;
enum_symbol_by_value_team_member_state(2) -> unready;
enum_symbol_by_value_team_member_state(3) -> ready.


enum_value_by_symbol_team_member_state(inviting) -> 1;
enum_value_by_symbol_team_member_state(unready) -> 2;
enum_value_by_symbol_team_member_state(ready) -> 3.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "4.0.1".

gpb_version_as_list() ->
    [4,0,1].
