%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.0.1
-module(up_pb).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_team_member_state/1, enum_value_by_symbol_team_member_state/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("up_pb.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'team_member_state'() :: 'inviting' | 'unready' | 'ready'.
-export_type(['team_member_state'/0]).

%% message types
-type team_member_st() :: #team_member_st{}.
-type team_invite() :: #team_invite{}.
-type cancel_match() :: #cancel_match{}.
-type start_match() :: #start_match{}.
-type match_req() :: #match_req{}.
-type team_leave() :: #team_leave{}.
-type team_state() :: #team_state{}.
-type team_refuse() :: #team_refuse{}.
-type team_accept() :: #team_accept{}.
-type team_req() :: #team_req{}.
-type select_magic() :: #select_magic{}.
-type magic_req() :: #magic_req{}.
-type rtnotify_callback() :: #rtnotify_callback{}.
-type rtnotify_keepalive() :: #rtnotify_keepalive{}.
-type rtnotify_register() :: #rtnotify_register{}.
-type rtnotify_req() :: #rtnotify_req{}.
-type lookup_role() :: #lookup_role{}.
-type select_role() :: #select_role{}.
-type create_role() :: #create_role{}.
-type role_req() :: #role_req{}.
-type login_req() :: #login_req{}.
-type sdk_login_req() :: #sdk_login_req{}.
-type up_msg() :: #up_msg{}.
-type role_summary_st() :: #role_summary_st{}.
-type battle_team_member() :: #battle_team_member{}.
-type battle_team() :: #battle_team{}.
-type name_card_st() :: #name_card_st{}.
-type team_info_st() :: #team_info_st{}.
-type battle_stat() :: #battle_stat{}.
-type role_st() :: #role_st{}.
-export_type(['team_member_st'/0, 'team_invite'/0, 'cancel_match'/0, 'start_match'/0, 'match_req'/0, 'team_leave'/0, 'team_state'/0, 'team_refuse'/0, 'team_accept'/0, 'team_req'/0, 'select_magic'/0, 'magic_req'/0, 'rtnotify_callback'/0, 'rtnotify_keepalive'/0, 'rtnotify_register'/0, 'rtnotify_req'/0, 'lookup_role'/0, 'select_role'/0, 'create_role'/0, 'role_req'/0, 'login_req'/0, 'sdk_login_req'/0, 'up_msg'/0, 'role_summary_st'/0, 'battle_team_member'/0, 'battle_team'/0, 'name_card_st'/0, 'team_info_st'/0, 'battle_stat'/0, 'role_st'/0]).

-spec encode_msg(#team_member_st{} | #team_invite{} | #cancel_match{} | #start_match{} | #match_req{} | #team_leave{} | #team_state{} | #team_refuse{} | #team_accept{} | #team_req{} | #select_magic{} | #magic_req{} | #rtnotify_callback{} | #rtnotify_keepalive{} | #rtnotify_register{} | #rtnotify_req{} | #lookup_role{} | #select_role{} | #create_role{} | #role_req{} | #login_req{} | #sdk_login_req{} | #up_msg{} | #role_summary_st{} | #battle_team_member{} | #battle_team{} | #name_card_st{} | #team_info_st{} | #battle_stat{} | #role_st{}) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(#team_member_st{} | #team_invite{} | #cancel_match{} | #start_match{} | #match_req{} | #team_leave{} | #team_state{} | #team_refuse{} | #team_accept{} | #team_req{} | #select_magic{} | #magic_req{} | #rtnotify_callback{} | #rtnotify_keepalive{} | #rtnotify_register{} | #rtnotify_req{} | #lookup_role{} | #select_role{} | #create_role{} | #role_req{} | #login_req{} | #sdk_login_req{} | #up_msg{} | #role_summary_st{} | #battle_team_member{} | #battle_team{} | #name_card_st{} | #team_info_st{} | #battle_stat{} | #role_st{}, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #team_member_st{} ->
	  e_msg_team_member_st(Msg, TrUserData);
      #team_invite{} -> e_msg_team_invite(Msg, TrUserData);
      #cancel_match{} -> e_msg_cancel_match(Msg, TrUserData);
      #start_match{} -> e_msg_start_match(Msg, TrUserData);
      #match_req{} -> e_msg_match_req(Msg, TrUserData);
      #team_leave{} -> e_msg_team_leave(Msg, TrUserData);
      #team_state{} -> e_msg_team_state(Msg, TrUserData);
      #team_refuse{} -> e_msg_team_refuse(Msg, TrUserData);
      #team_accept{} -> e_msg_team_accept(Msg, TrUserData);
      #team_req{} -> e_msg_team_req(Msg, TrUserData);
      #select_magic{} -> e_msg_select_magic(Msg, TrUserData);
      #magic_req{} -> e_msg_magic_req(Msg, TrUserData);
      #rtnotify_callback{} ->
	  e_msg_rtnotify_callback(Msg, TrUserData);
      #rtnotify_keepalive{} ->
	  e_msg_rtnotify_keepalive(Msg, TrUserData);
      #rtnotify_register{} ->
	  e_msg_rtnotify_register(Msg, TrUserData);
      #rtnotify_req{} -> e_msg_rtnotify_req(Msg, TrUserData);
      #lookup_role{} -> e_msg_lookup_role(Msg, TrUserData);
      #select_role{} -> e_msg_select_role(Msg, TrUserData);
      #create_role{} -> e_msg_create_role(Msg, TrUserData);
      #role_req{} -> e_msg_role_req(Msg, TrUserData);
      #login_req{} -> e_msg_login_req(Msg, TrUserData);
      #sdk_login_req{} ->
	  e_msg_sdk_login_req(Msg, TrUserData);
      #up_msg{} -> e_msg_up_msg(Msg, TrUserData);
      #role_summary_st{} ->
	  e_msg_role_summary_st(Msg, TrUserData);
      #battle_team_member{} ->
	  e_msg_battle_team_member(Msg, TrUserData);
      #battle_team{} -> e_msg_battle_team(Msg, TrUserData);
      #name_card_st{} -> e_msg_name_card_st(Msg, TrUserData);
      #team_info_st{} -> e_msg_team_info_st(Msg, TrUserData);
      #battle_stat{} -> e_msg_battle_stat(Msg, TrUserData);
      #role_st{} -> e_msg_role_st(Msg, TrUserData)
    end.



e_msg_team_member_st(Msg, TrUserData) ->
    e_msg_team_member_st(Msg, <<>>, TrUserData).


e_msg_team_member_st(#team_member_st{user_id = F1,
				     state = F2, elf_id = F3, name = F4,
				     level = F5},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_varint(TrF1, <<Bin/binary, 8>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_enum_team_member_state(TrF2, <<B1/binary, 16>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_varint(TrF3, <<B2/binary, 24>>)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_string(TrF4, <<B3/binary, 34>>)
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     e_varint(TrF5, <<B4/binary, 40>>)
	   end
    end.

e_msg_team_invite(Msg, TrUserData) ->
    e_msg_team_invite(Msg, <<>>, TrUserData).


e_msg_team_invite(#team_invite{role_id = F1}, Bin,
		  TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_cancel_match(_Msg, _TrUserData) -> <<>>.

e_msg_start_match(_Msg, _TrUserData) -> <<>>.

e_msg_match_req(Msg, TrUserData) ->
    e_msg_match_req(Msg, <<>>, TrUserData).


e_msg_match_req(#match_req{start = F1, cancel = F2},
		Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_mfield_match_req_start(TrF1, <<Bin/binary, 10>>,
					   TrUserData)
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_mfield_match_req_cancel(TrF2, <<B1/binary, 18>>,
				       TrUserData)
	   end
    end.

e_msg_team_leave(_Msg, _TrUserData) -> <<>>.

e_msg_team_state(Msg, TrUserData) ->
    e_msg_team_state(Msg, <<>>, TrUserData).


e_msg_team_state(#team_state{state = F1}, Bin,
		 TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_enum_team_member_state(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_team_refuse(_Msg, _TrUserData) -> <<>>.

e_msg_team_accept(_Msg, _TrUserData) -> <<>>.

e_msg_team_req(Msg, TrUserData) ->
    e_msg_team_req(Msg, <<>>, TrUserData).


e_msg_team_req(#team_req{invite = F1, accept = F2,
			 refuse = F3, state = F4, leave = F5},
	       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_mfield_team_req_invite(TrF1, <<Bin/binary, 10>>,
					   TrUserData)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_mfield_team_req_accept(TrF2, <<B1/binary, 18>>,
					   TrUserData)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_mfield_team_req_refuse(TrF3, <<B2/binary, 26>>,
					   TrUserData)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_mfield_team_req_state(TrF4, <<B3/binary, 34>>,
					  TrUserData)
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     e_mfield_team_req_leave(TrF5, <<B4/binary, 42>>,
				     TrUserData)
	   end
    end.

e_msg_select_magic(Msg, TrUserData) ->
    e_msg_select_magic(Msg, <<>>, TrUserData).


e_msg_select_magic(#select_magic{magic_id = F1}, Bin,
		   TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_magic_req(Msg, TrUserData) ->
    e_msg_magic_req(Msg, <<>>, TrUserData).


e_msg_magic_req(#magic_req{select = F1}, Bin,
		TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     e_mfield_magic_req_select(TrF1, <<Bin/binary, 10>>,
				       TrUserData)
	   end
    end.

e_msg_rtnotify_callback(Msg, TrUserData) ->
    e_msg_rtnotify_callback(Msg, <<>>, TrUserData).


e_msg_rtnotify_callback(#rtnotify_callback{data = F1},
			Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     e_type_string(TrF1, <<Bin/binary, 10>>)
	   end
    end.

e_msg_rtnotify_keepalive(Msg, TrUserData) ->
    e_msg_rtnotify_keepalive(Msg, <<>>, TrUserData).


e_msg_rtnotify_keepalive(#rtnotify_keepalive{time = F1},
			 Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     e_varint(TrF1, <<Bin/binary, 8>>)
	   end
    end.

e_msg_rtnotify_register(Msg, TrUserData) ->
    e_msg_rtnotify_register(Msg, <<>>, TrUserData).


e_msg_rtnotify_register(#rtnotify_register{user_id =
					       F1},
			Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     e_varint(TrF1, <<Bin/binary, 8>>)
	   end
    end.

e_msg_rtnotify_req(Msg, TrUserData) ->
    e_msg_rtnotify_req(Msg, <<>>, TrUserData).


e_msg_rtnotify_req(#rtnotify_req{register = F1,
				 keepalive = F2, callback = F3},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_mfield_rtnotify_req_register(TrF1, <<Bin/binary, 10>>,
						 TrUserData)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_mfield_rtnotify_req_keepalive(TrF2, <<B1/binary, 18>>,
						  TrUserData)
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_mfield_rtnotify_req_callback(TrF3, <<B2/binary, 26>>,
					    TrUserData)
	   end
    end.

e_msg_lookup_role(_Msg, _TrUserData) -> <<>>.

e_msg_select_role(Msg, TrUserData) ->
    e_msg_select_role(Msg, <<>>, TrUserData).


e_msg_select_role(#select_role{role_id = F1}, Bin,
		  TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_create_role(Msg, TrUserData) ->
    e_msg_create_role(Msg, <<>>, TrUserData).


e_msg_create_role(#create_role{role_cid = F1}, Bin,
		  TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_role_req(Msg, TrUserData) ->
    e_msg_role_req(Msg, <<>>, TrUserData).


e_msg_role_req(#role_req{create = F1, select = F2,
			 lookup = F3},
	       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_mfield_role_req_create(TrF1, <<Bin/binary, 10>>,
					   TrUserData)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_mfield_role_req_select(TrF2, <<B1/binary, 18>>,
					   TrUserData)
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_mfield_role_req_lookup(TrF3, <<B2/binary, 26>>,
				      TrUserData)
	   end
    end.

e_msg_login_req(Msg, TrUserData) ->
    e_msg_login_req(Msg, <<>>, TrUserData).


e_msg_login_req(#login_req{device_id = F1,
			   version = F2},
		Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>)
    end.

e_msg_sdk_login_req(_Msg, _TrUserData) -> <<>>.

e_msg_up_msg(Msg, TrUserData) ->
    e_msg_up_msg(Msg, <<>>, TrUserData).


e_msg_up_msg(#up_msg{sequence = F1, repeat = F2,
		     user_id = F3, role_id = F4, sdk_login = F5, login = F6,
		     role = F7, rtnotify = F8, magic = F9, team = F10,
		     match = F11},
	     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_bool(TrF2, <<B1/binary, 16>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_varint(TrF3, <<B2/binary, 24>>)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_varint(TrF4, <<B3/binary, 32>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_mfield_up_msg_sdk_login(TrF5, <<B4/binary, 42>>,
					    TrUserData)
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  e_mfield_up_msg_login(TrF6, <<B5/binary, 50>>,
					TrUserData)
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  e_mfield_up_msg_role(TrF7, <<B6/binary, 58>>,
				       TrUserData)
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  e_mfield_up_msg_rtnotify(TrF8, <<B7/binary, 66>>,
					   TrUserData)
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  e_mfield_up_msg_magic(TrF9, <<B8/binary, 74>>,
					TrUserData)
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   e_mfield_up_msg_team(TrF10, <<B9/binary, 82>>,
					TrUserData)
		 end
	  end,
    if F11 == undefined -> B10;
       true ->
	   begin
	     TrF11 = id(F11, TrUserData),
	     e_mfield_up_msg_match(TrF11, <<B10/binary, 90>>,
				   TrUserData)
	   end
    end.

e_msg_role_summary_st(Msg, TrUserData) ->
    e_msg_role_summary_st(Msg, <<>>, TrUserData).


e_msg_role_summary_st(#role_summary_st{role_id = F1,
				       elf_id = F2, name = F3, level = F4},
		      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_varint(TrF1, <<Bin/binary, 8>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_varint(TrF2, <<B1/binary, 16>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_string(TrF3, <<B2/binary, 26>>)
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     e_varint(TrF4, <<B3/binary, 32>>)
	   end
    end.

e_msg_battle_team_member(Msg, TrUserData) ->
    e_msg_battle_team_member(Msg, <<>>, TrUserData).


e_msg_battle_team_member(#battle_team_member{role_id =
						 F1,
					     elf_id = F2, name = F3, level = F4,
					     team_id = F5},
			 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_varint(TrF1, <<Bin/binary, 8>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_varint(TrF2, <<B1/binary, 16>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_string(TrF3, <<B2/binary, 26>>)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_varint(TrF4, <<B3/binary, 32>>)
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     e_varint(TrF5, <<B4/binary, 40>>)
	   end
    end.

e_msg_battle_team(Msg, TrUserData) ->
    e_msg_battle_team(Msg, <<>>, TrUserData).


e_msg_battle_team(#battle_team{members = F1}, Bin,
		  TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_battle_team_members(TrF1, Bin, TrUserData)
      end
    end.

e_msg_name_card_st(Msg, TrUserData) ->
    e_msg_name_card_st(Msg, <<>>, TrUserData).


e_msg_name_card_st(#name_card_st{name = F1,
				 last_set_time = F2},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_string(TrF1, <<Bin/binary, 10>>)
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_varint(TrF2, <<B1/binary, 16>>)
	   end
    end.

e_msg_team_info_st(Msg, TrUserData) ->
    e_msg_team_info_st(Msg, <<>>, TrUserData).


e_msg_team_info_st(#team_info_st{members = F1,
				 leader_id = F2},
		   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  e_field_team_info_st_members(TrF1, Bin, TrUserData)
	   end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_varint(TrF2, <<B1/binary, 16>>)
	   end
    end.

e_msg_battle_stat(_Msg, _TrUserData) -> <<>>.

e_msg_role_st(Msg, TrUserData) ->
    e_msg_role_st(Msg, <<>>, TrUserData).


e_msg_role_st(#role_st{role_id = F1, elf_id = F2,
		       name_card = F3, level = F4, exp = F5},
	      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_varint(TrF1, <<Bin/binary, 8>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_varint(TrF2, <<B1/binary, 16>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_mfield_role_st_name_card(TrF3, <<B2/binary, 26>>,
					     TrUserData)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_varint(TrF4, <<B3/binary, 32>>)
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     e_varint(TrF5, <<B4/binary, 40>>)
	   end
    end.

e_mfield_match_req_start(_Msg, Bin, _TrUserData) ->
    <<Bin/binary, 0>>.

e_mfield_match_req_cancel(_Msg, Bin, _TrUserData) ->
    <<Bin/binary, 0>>.

e_mfield_team_req_invite(Msg, Bin, TrUserData) ->
    SubBin = e_msg_team_invite(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_team_req_accept(_Msg, Bin, _TrUserData) ->
    <<Bin/binary, 0>>.

e_mfield_team_req_refuse(_Msg, Bin, _TrUserData) ->
    <<Bin/binary, 0>>.

e_mfield_team_req_state(Msg, Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 2>>,
    e_msg_team_state(Msg, Bin2, TrUserData).

e_mfield_team_req_leave(_Msg, Bin, _TrUserData) ->
    <<Bin/binary, 0>>.

e_mfield_magic_req_select(Msg, Bin, TrUserData) ->
    SubBin = e_msg_select_magic(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_rtnotify_req_register(Msg, Bin, TrUserData) ->
    SubBin = e_msg_rtnotify_register(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_rtnotify_req_keepalive(Msg, Bin, TrUserData) ->
    SubBin = e_msg_rtnotify_keepalive(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_rtnotify_req_callback(Msg, Bin, TrUserData) ->
    SubBin = e_msg_rtnotify_callback(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_role_req_create(Msg, Bin, TrUserData) ->
    SubBin = e_msg_create_role(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_role_req_select(Msg, Bin, TrUserData) ->
    SubBin = e_msg_select_role(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_role_req_lookup(_Msg, Bin, _TrUserData) ->
    <<Bin/binary, 0>>.

e_mfield_up_msg_sdk_login(_Msg, Bin, _TrUserData) ->
    <<Bin/binary, 0>>.

e_mfield_up_msg_login(Msg, Bin, TrUserData) ->
    SubBin = e_msg_login_req(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_up_msg_role(Msg, Bin, TrUserData) ->
    SubBin = e_msg_role_req(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_up_msg_rtnotify(Msg, Bin, TrUserData) ->
    SubBin = e_msg_rtnotify_req(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_up_msg_magic(Msg, Bin, TrUserData) ->
    SubBin = e_msg_magic_req(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_up_msg_team(Msg, Bin, TrUserData) ->
    SubBin = e_msg_team_req(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_up_msg_match(Msg, Bin, TrUserData) ->
    SubBin = e_msg_match_req(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_battle_team_members(Msg, Bin, TrUserData) ->
    SubBin = e_msg_battle_team_member(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_battle_team_members([Elem | Rest], Bin,
			    TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_battle_team_members(id(Elem,
					   TrUserData),
					Bin2, TrUserData),
    e_field_battle_team_members(Rest, Bin3, TrUserData);
e_field_battle_team_members([], Bin, _TrUserData) ->
    Bin.

e_mfield_team_info_st_members(Msg, Bin, TrUserData) ->
    SubBin = e_msg_team_member_st(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_team_info_st_members([Elem | Rest], Bin,
			     TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_team_info_st_members(id(Elem,
					    TrUserData),
					 Bin2, TrUserData),
    e_field_team_info_st_members(Rest, Bin3, TrUserData);
e_field_team_info_st_members([], Bin, _TrUserData) ->
    Bin.

e_mfield_role_st_name_card(Msg, Bin, TrUserData) ->
    SubBin = e_msg_name_card_st(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_enum_team_member_state(inviting, Bin) ->
    <<Bin/binary, 1>>;
e_enum_team_member_state(unready, Bin) ->
    <<Bin/binary, 2>>;
e_enum_team_member_state(ready, Bin) ->
    <<Bin/binary, 3>>;
e_enum_team_member_state(V, Bin) -> e_varint(V, Bin).

e_type_bool(true, Bin) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin) -> <<Bin/binary, 0>>.

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      team_member_st ->
	  try d_msg_team_member_st(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, team_member_st, {Class, Reason, StackTrace}}}})
	  end;
      team_invite ->
	  try d_msg_team_invite(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, team_invite, {Class, Reason, StackTrace}}}})
	  end;
      cancel_match ->
	  try d_msg_cancel_match(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, cancel_match, {Class, Reason, StackTrace}}}})
	  end;
      start_match ->
	  try d_msg_start_match(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, start_match, {Class, Reason, StackTrace}}}})
	  end;
      match_req ->
	  try d_msg_match_req(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, match_req, {Class, Reason, StackTrace}}}})
	  end;
      team_leave ->
	  try d_msg_team_leave(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, team_leave, {Class, Reason, StackTrace}}}})
	  end;
      team_state ->
	  try d_msg_team_state(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, team_state, {Class, Reason, StackTrace}}}})
	  end;
      team_refuse ->
	  try d_msg_team_refuse(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, team_refuse, {Class, Reason, StackTrace}}}})
	  end;
      team_accept ->
	  try d_msg_team_accept(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, team_accept, {Class, Reason, StackTrace}}}})
	  end;
      team_req ->
	  try d_msg_team_req(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, team_req, {Class, Reason, StackTrace}}}})
	  end;
      select_magic ->
	  try d_msg_select_magic(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, select_magic, {Class, Reason, StackTrace}}}})
	  end;
      magic_req ->
	  try d_msg_magic_req(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, magic_req, {Class, Reason, StackTrace}}}})
	  end;
      rtnotify_callback ->
	  try d_msg_rtnotify_callback(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, rtnotify_callback, {Class, Reason, StackTrace}}}})
	  end;
      rtnotify_keepalive ->
	  try d_msg_rtnotify_keepalive(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, rtnotify_keepalive,
			 {Class, Reason, StackTrace}}}})
	  end;
      rtnotify_register ->
	  try d_msg_rtnotify_register(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, rtnotify_register, {Class, Reason, StackTrace}}}})
	  end;
      rtnotify_req ->
	  try d_msg_rtnotify_req(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, rtnotify_req, {Class, Reason, StackTrace}}}})
	  end;
      lookup_role ->
	  try d_msg_lookup_role(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, lookup_role, {Class, Reason, StackTrace}}}})
	  end;
      select_role ->
	  try d_msg_select_role(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, select_role, {Class, Reason, StackTrace}}}})
	  end;
      create_role ->
	  try d_msg_create_role(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, create_role, {Class, Reason, StackTrace}}}})
	  end;
      role_req ->
	  try d_msg_role_req(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, role_req, {Class, Reason, StackTrace}}}})
	  end;
      login_req ->
	  try d_msg_login_req(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, login_req, {Class, Reason, StackTrace}}}})
	  end;
      sdk_login_req ->
	  try d_msg_sdk_login_req(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, sdk_login_req, {Class, Reason, StackTrace}}}})
	  end;
      up_msg ->
	  try d_msg_up_msg(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, up_msg, {Class, Reason, StackTrace}}}})
	  end;
      role_summary_st ->
	  try d_msg_role_summary_st(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, role_summary_st, {Class, Reason, StackTrace}}}})
	  end;
      battle_team_member ->
	  try d_msg_battle_team_member(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, battle_team_member,
			 {Class, Reason, StackTrace}}}})
	  end;
      battle_team ->
	  try d_msg_battle_team(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, battle_team, {Class, Reason, StackTrace}}}})
	  end;
      name_card_st ->
	  try d_msg_name_card_st(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, name_card_st, {Class, Reason, StackTrace}}}})
	  end;
      team_info_st ->
	  try d_msg_team_info_st(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, team_info_st, {Class, Reason, StackTrace}}}})
	  end;
      battle_stat ->
	  try d_msg_battle_stat(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, battle_stat, {Class, Reason, StackTrace}}}})
	  end;
      role_st ->
	  try d_msg_role_st(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, role_st, {Class, Reason, StackTrace}}}})
	  end
    end.



d_msg_team_member_st(Bin, TrUserData) ->
    dfp_read_field_def_team_member_st(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_team_member_st(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_team_member_st_user_id(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_team_member_st(<<16, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_team_member_st_state(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_team_member_st(<<24, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_team_member_st_elf_id(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_team_member_st(<<34, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_team_member_st_name(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_team_member_st(<<40, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_team_member_st_level(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_team_member_st(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, F@_4, F@_5, _) ->
    #team_member_st{user_id = F@_1, state = F@_2,
		    elf_id = F@_3, name = F@_4, level = F@_5};
dfp_read_field_def_team_member_st(Other, Z1, Z2, F@_1,
				  F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_team_member_st(Other, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_team_member_st(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_team_member_st(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
dg_read_field_def_team_member_st(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_team_member_st_user_id(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, TrUserData);
      16 ->
	  d_field_team_member_st_state(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, TrUserData);
      24 ->
	  d_field_team_member_st_elf_id(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, TrUserData);
      34 ->
	  d_field_team_member_st_name(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, TrUserData);
      40 ->
	  d_field_team_member_st_level(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_team_member_st(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_team_member_st(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_team_member_st(Rest, 0, 0, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     TrUserData);
	    3 ->
		skip_group_team_member_st(Rest, Key bsr 3, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_team_member_st(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_team_member_st(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, _) ->
    #team_member_st{user_id = F@_1, state = F@_2,
		    elf_id = F@_3, name = F@_4, level = F@_5}.

d_field_team_member_st_user_id(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_team_member_st_user_id(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData);
d_field_team_member_st_user_id(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_team_member_st(RestF, 0, 0,
				      NewFValue, F@_2, F@_3, F@_4, F@_5,
				      TrUserData).

d_field_team_member_st_state(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_team_member_st_state(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_team_member_st_state(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {d_enum_team_member_state(begin
						     <<Res:32/signed-native>> =
							 <<(X bsl N +
							      Acc):32/unsigned-native>>,
						     Res
						   end),
			  Rest},
    dfp_read_field_def_team_member_st(RestF, 0, 0, F@_1,
				      NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_team_member_st_elf_id(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_team_member_st_elf_id(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData);
d_field_team_member_st_elf_id(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_team_member_st(RestF, 0, 0, F@_1,
				      F@_2, NewFValue, F@_4, F@_5, TrUserData).

d_field_team_member_st_name(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_team_member_st_name(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_team_member_st_name(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_team_member_st(RestF, 0, 0, F@_1,
				      F@_2, F@_3, NewFValue, F@_5, TrUserData).

d_field_team_member_st_level(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_team_member_st_level(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_team_member_st_level(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_team_member_st(RestF, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, NewFValue, TrUserData).

skip_varint_team_member_st(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_team_member_st(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
skip_varint_team_member_st(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_team_member_st(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_team_member_st(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData)
    when N < 57 ->
    skip_length_delimited_team_member_st(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, TrUserData);
skip_length_delimited_team_member_st(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_team_member_st(Rest2, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_team_member_st(Bin, FNum, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_team_member_st(Rest, 0, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_team_member_st(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_team_member_st(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_team_member_st(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_team_member_st(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

d_msg_team_invite(Bin, TrUserData) ->
    dfp_read_field_def_team_invite(Bin, 0, 0,
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_team_invite(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_team_invite_role_id(Rest, Z1, Z2, F@_1,
				TrUserData);
dfp_read_field_def_team_invite(<<>>, 0, 0, F@_1, _) ->
    #team_invite{role_id = F@_1};
dfp_read_field_def_team_invite(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_team_invite(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_team_invite(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_team_invite(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_team_invite(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_team_invite_role_id(Rest, 0, 0, F@_1,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_team_invite(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_team_invite(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_team_invite(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_team_invite(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_team_invite(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_team_invite(<<>>, 0, 0, F@_1, _) ->
    #team_invite{role_id = F@_1}.

d_field_team_invite_role_id(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_team_invite_role_id(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
d_field_team_invite_role_id(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_team_invite(RestF, 0, 0, NewFValue,
				   TrUserData).

skip_varint_team_invite(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_team_invite(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_team_invite(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_team_invite(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_team_invite(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_team_invite(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_team_invite(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_team_invite(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_team_invite(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_team_invite(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_team_invite(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_team_invite(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_team_invite(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_team_invite(Rest, Z1, Z2, F@_1,
				   TrUserData).

d_msg_cancel_match(Bin, TrUserData) ->
    dfp_read_field_def_cancel_match(Bin, 0, 0, TrUserData).

dfp_read_field_def_cancel_match(<<>>, 0, 0, _) ->
    #cancel_match{};
dfp_read_field_def_cancel_match(Other, Z1, Z2,
				TrUserData) ->
    dg_read_field_def_cancel_match(Other, Z1, Z2,
				   TrUserData).

dg_read_field_def_cancel_match(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_cancel_match(Rest, N + 7,
				   X bsl N + Acc, TrUserData);
dg_read_field_def_cancel_match(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_cancel_match(Rest, 0, 0, TrUserData);
      1 -> skip_64_cancel_match(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_cancel_match(Rest, 0, 0,
					     TrUserData);
      3 ->
	  skip_group_cancel_match(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_cancel_match(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_cancel_match(<<>>, 0, 0, _) ->
    #cancel_match{}.

skip_varint_cancel_match(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, TrUserData) ->
    skip_varint_cancel_match(Rest, Z1, Z2, TrUserData);
skip_varint_cancel_match(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, TrUserData) ->
    dfp_read_field_def_cancel_match(Rest, Z1, Z2,
				    TrUserData).

skip_length_delimited_cancel_match(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_cancel_match(Rest, N + 7,
				       X bsl N + Acc, TrUserData);
skip_length_delimited_cancel_match(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_cancel_match(Rest2, 0, 0,
				    TrUserData).

skip_group_cancel_match(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_cancel_match(Rest, 0, Z2,
				    TrUserData).

skip_32_cancel_match(<<_:32, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_cancel_match(Rest, Z1, Z2,
				    TrUserData).

skip_64_cancel_match(<<_:64, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_cancel_match(Rest, Z1, Z2,
				    TrUserData).

d_msg_start_match(Bin, TrUserData) ->
    dfp_read_field_def_start_match(Bin, 0, 0, TrUserData).

dfp_read_field_def_start_match(<<>>, 0, 0, _) ->
    #start_match{};
dfp_read_field_def_start_match(Other, Z1, Z2,
			       TrUserData) ->
    dg_read_field_def_start_match(Other, Z1, Z2,
				  TrUserData).

dg_read_field_def_start_match(<<1:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_start_match(Rest, N + 7,
				  X bsl N + Acc, TrUserData);
dg_read_field_def_start_match(<<0:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_start_match(Rest, 0, 0, TrUserData);
      1 -> skip_64_start_match(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_start_match(Rest, 0, 0,
					    TrUserData);
      3 ->
	  skip_group_start_match(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_start_match(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_start_match(<<>>, 0, 0, _) ->
    #start_match{}.

skip_varint_start_match(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    skip_varint_start_match(Rest, Z1, Z2, TrUserData);
skip_varint_start_match(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    dfp_read_field_def_start_match(Rest, Z1, Z2,
				   TrUserData).

skip_length_delimited_start_match(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_start_match(Rest, N + 7,
				      X bsl N + Acc, TrUserData);
skip_length_delimited_start_match(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_start_match(Rest2, 0, 0, TrUserData).

skip_group_start_match(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_start_match(Rest, 0, Z2, TrUserData).

skip_32_start_match(<<_:32, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_start_match(Rest, Z1, Z2,
				   TrUserData).

skip_64_start_match(<<_:64, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_start_match(Rest, Z1, Z2,
				   TrUserData).

d_msg_match_req(Bin, TrUserData) ->
    dfp_read_field_def_match_req(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_match_req(<<10, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_match_req_start(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_match_req(<<18, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_match_req_cancel(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_match_req(<<>>, 0, 0, F@_1, F@_2,
			     _) ->
    #match_req{start = F@_1, cancel = F@_2};
dfp_read_field_def_match_req(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData) ->
    dg_read_field_def_match_req(Other, Z1, Z2, F@_1, F@_2,
				TrUserData).

dg_read_field_def_match_req(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_match_req(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
dg_read_field_def_match_req(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_match_req_start(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      18 ->
	  d_field_match_req_cancel(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_match_req(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    1 ->
		skip_64_match_req(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_match_req(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    3 ->
		skip_group_match_req(Rest, Key bsr 3, 0, F@_1, F@_2,
				     TrUserData);
	    5 ->
		skip_32_match_req(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_match_req(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #match_req{start = F@_1, cancel = F@_2}.

d_field_match_req_start(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_match_req_start(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_match_req_start(<<0:1, X:7, Rest/binary>>, N,
			Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_start_match(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_match_req(RestF, 0, 0,
				 if Prev == undefined -> NewFValue;
				    true ->
					merge_msg_start_match(Prev, NewFValue,
							      TrUserData)
				 end,
				 F@_2, TrUserData).

d_field_match_req_cancel(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_match_req_cancel(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_match_req_cancel(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_cancel_match(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_match_req(RestF, 0, 0, F@_1,
				 if Prev == undefined -> NewFValue;
				    true ->
					merge_msg_cancel_match(Prev, NewFValue,
							       TrUserData)
				 end,
				 TrUserData).

skip_varint_match_req(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    skip_varint_match_req(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
skip_varint_match_req(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_match_req(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_length_delimited_match_req(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_match_req(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_match_req(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_match_req(Rest2, 0, 0, F@_1, F@_2,
				 TrUserData).

skip_group_match_req(Bin, FNum, Z2, F@_1, F@_2,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_match_req(Rest, 0, Z2, F@_1, F@_2,
				 TrUserData).

skip_32_match_req(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_match_req(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_64_match_req(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_match_req(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

d_msg_team_leave(Bin, TrUserData) ->
    dfp_read_field_def_team_leave(Bin, 0, 0, TrUserData).

dfp_read_field_def_team_leave(<<>>, 0, 0, _) ->
    #team_leave{};
dfp_read_field_def_team_leave(Other, Z1, Z2,
			      TrUserData) ->
    dg_read_field_def_team_leave(Other, Z1, Z2, TrUserData).

dg_read_field_def_team_leave(<<1:1, X:7, Rest/binary>>,
			     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_team_leave(Rest, N + 7, X bsl N + Acc,
				 TrUserData);
dg_read_field_def_team_leave(<<0:1, X:7, Rest/binary>>,
			     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_team_leave(Rest, 0, 0, TrUserData);
      1 -> skip_64_team_leave(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_team_leave(Rest, 0, 0,
					   TrUserData);
      3 ->
	  skip_group_team_leave(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_team_leave(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_team_leave(<<>>, 0, 0, _) ->
    #team_leave{}.

skip_varint_team_leave(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, TrUserData) ->
    skip_varint_team_leave(Rest, Z1, Z2, TrUserData);
skip_varint_team_leave(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, TrUserData) ->
    dfp_read_field_def_team_leave(Rest, Z1, Z2, TrUserData).

skip_length_delimited_team_leave(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_team_leave(Rest, N + 7,
				     X bsl N + Acc, TrUserData);
skip_length_delimited_team_leave(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_team_leave(Rest2, 0, 0, TrUserData).

skip_group_team_leave(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_team_leave(Rest, 0, Z2, TrUserData).

skip_32_team_leave(<<_:32, Rest/binary>>, Z1, Z2,
		   TrUserData) ->
    dfp_read_field_def_team_leave(Rest, Z1, Z2, TrUserData).

skip_64_team_leave(<<_:64, Rest/binary>>, Z1, Z2,
		   TrUserData) ->
    dfp_read_field_def_team_leave(Rest, Z1, Z2, TrUserData).

d_msg_team_state(Bin, TrUserData) ->
    dfp_read_field_def_team_state(Bin, 0, 0,
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_team_state(<<8, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_team_state_state(Rest, Z1, Z2, F@_1,
			     TrUserData);
dfp_read_field_def_team_state(<<>>, 0, 0, F@_1, _) ->
    #team_state{state = F@_1};
dfp_read_field_def_team_state(Other, Z1, Z2, F@_1,
			      TrUserData) ->
    dg_read_field_def_team_state(Other, Z1, Z2, F@_1,
				 TrUserData).

dg_read_field_def_team_state(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_team_state(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
dg_read_field_def_team_state(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_team_state_state(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_team_state(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_team_state(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_team_state(Rest, 0, 0, F@_1,
						 TrUserData);
	    3 ->
		skip_group_team_state(Rest, Key bsr 3, 0, F@_1,
				      TrUserData);
	    5 -> skip_32_team_state(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_team_state(<<>>, 0, 0, F@_1, _) ->
    #team_state{state = F@_1}.

d_field_team_state_state(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_team_state_state(Rest, N + 7, X bsl N + Acc,
			     F@_1, TrUserData);
d_field_team_state_state(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, TrUserData) ->
    {NewFValue, RestF} = {d_enum_team_member_state(begin
						     <<Res:32/signed-native>> =
							 <<(X bsl N +
							      Acc):32/unsigned-native>>,
						     Res
						   end),
			  Rest},
    dfp_read_field_def_team_state(RestF, 0, 0, NewFValue,
				  TrUserData).

skip_varint_team_state(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    skip_varint_team_state(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_team_state(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    dfp_read_field_def_team_state(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_length_delimited_team_state(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_team_state(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_team_state(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_team_state(Rest2, 0, 0, F@_1,
				  TrUserData).

skip_group_team_state(Bin, FNum, Z2, F@_1,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_team_state(Rest, 0, Z2, F@_1,
				  TrUserData).

skip_32_team_state(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_team_state(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_64_team_state(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_team_state(Rest, Z1, Z2, F@_1,
				  TrUserData).

d_msg_team_refuse(Bin, TrUserData) ->
    dfp_read_field_def_team_refuse(Bin, 0, 0, TrUserData).

dfp_read_field_def_team_refuse(<<>>, 0, 0, _) ->
    #team_refuse{};
dfp_read_field_def_team_refuse(Other, Z1, Z2,
			       TrUserData) ->
    dg_read_field_def_team_refuse(Other, Z1, Z2,
				  TrUserData).

dg_read_field_def_team_refuse(<<1:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_team_refuse(Rest, N + 7,
				  X bsl N + Acc, TrUserData);
dg_read_field_def_team_refuse(<<0:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_team_refuse(Rest, 0, 0, TrUserData);
      1 -> skip_64_team_refuse(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_team_refuse(Rest, 0, 0,
					    TrUserData);
      3 ->
	  skip_group_team_refuse(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_team_refuse(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_team_refuse(<<>>, 0, 0, _) ->
    #team_refuse{}.

skip_varint_team_refuse(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    skip_varint_team_refuse(Rest, Z1, Z2, TrUserData);
skip_varint_team_refuse(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    dfp_read_field_def_team_refuse(Rest, Z1, Z2,
				   TrUserData).

skip_length_delimited_team_refuse(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_team_refuse(Rest, N + 7,
				      X bsl N + Acc, TrUserData);
skip_length_delimited_team_refuse(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_team_refuse(Rest2, 0, 0, TrUserData).

skip_group_team_refuse(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_team_refuse(Rest, 0, Z2, TrUserData).

skip_32_team_refuse(<<_:32, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_team_refuse(Rest, Z1, Z2,
				   TrUserData).

skip_64_team_refuse(<<_:64, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_team_refuse(Rest, Z1, Z2,
				   TrUserData).

d_msg_team_accept(Bin, TrUserData) ->
    dfp_read_field_def_team_accept(Bin, 0, 0, TrUserData).

dfp_read_field_def_team_accept(<<>>, 0, 0, _) ->
    #team_accept{};
dfp_read_field_def_team_accept(Other, Z1, Z2,
			       TrUserData) ->
    dg_read_field_def_team_accept(Other, Z1, Z2,
				  TrUserData).

dg_read_field_def_team_accept(<<1:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_team_accept(Rest, N + 7,
				  X bsl N + Acc, TrUserData);
dg_read_field_def_team_accept(<<0:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_team_accept(Rest, 0, 0, TrUserData);
      1 -> skip_64_team_accept(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_team_accept(Rest, 0, 0,
					    TrUserData);
      3 ->
	  skip_group_team_accept(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_team_accept(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_team_accept(<<>>, 0, 0, _) ->
    #team_accept{}.

skip_varint_team_accept(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    skip_varint_team_accept(Rest, Z1, Z2, TrUserData);
skip_varint_team_accept(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    dfp_read_field_def_team_accept(Rest, Z1, Z2,
				   TrUserData).

skip_length_delimited_team_accept(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_team_accept(Rest, N + 7,
				      X bsl N + Acc, TrUserData);
skip_length_delimited_team_accept(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_team_accept(Rest2, 0, 0, TrUserData).

skip_group_team_accept(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_team_accept(Rest, 0, Z2, TrUserData).

skip_32_team_accept(<<_:32, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_team_accept(Rest, Z1, Z2,
				   TrUserData).

skip_64_team_accept(<<_:64, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_team_accept(Rest, Z1, Z2,
				   TrUserData).

d_msg_team_req(Bin, TrUserData) ->
    dfp_read_field_def_team_req(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_team_req(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_team_req_invite(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_team_req(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_team_req_accept(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_team_req(<<26, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_team_req_refuse(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_team_req(<<34, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_team_req_state(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
dfp_read_field_def_team_req(<<42, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_team_req_leave(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
dfp_read_field_def_team_req(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, F@_4, F@_5, _) ->
    #team_req{invite = F@_1, accept = F@_2, refuse = F@_3,
	      state = F@_4, leave = F@_5};
dfp_read_field_def_team_req(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_team_req(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_team_req(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_team_req(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_team_req(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_team_req_invite(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      18 ->
	  d_field_team_req_accept(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      26 ->
	  d_field_team_req_refuse(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      34 ->
	  d_field_team_req_state(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, TrUserData);
      42 ->
	  d_field_team_req_leave(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_team_req(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
	    1 ->
		skip_64_team_req(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, TrUserData);
	    2 ->
		skip_length_delimited_team_req(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_team_req(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_team_req(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, TrUserData)
	  end
    end;
dg_read_field_def_team_req(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, _) ->
    #team_req{invite = F@_1, accept = F@_2, refuse = F@_3,
	      state = F@_4, leave = F@_5}.

d_field_team_req_invite(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_team_req_invite(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_team_req_invite(<<0:1, X:7, Rest/binary>>, N,
			Acc, Prev, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_team_invite(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_team_req(RestF, 0, 0,
				if Prev == undefined -> NewFValue;
				   true ->
				       merge_msg_team_invite(Prev, NewFValue,
							     TrUserData)
				end,
				F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_team_req_accept(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_team_req_accept(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_team_req_accept(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, Prev, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_team_accept(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_team_req(RestF, 0, 0, F@_1,
				if Prev == undefined -> NewFValue;
				   true ->
				       merge_msg_team_accept(Prev, NewFValue,
							     TrUserData)
				end,
				F@_3, F@_4, F@_5, TrUserData).

d_field_team_req_refuse(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_team_req_refuse(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_team_req_refuse(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, Prev, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_team_refuse(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_team_req(RestF, 0, 0, F@_1, F@_2,
				if Prev == undefined -> NewFValue;
				   true ->
				       merge_msg_team_refuse(Prev, NewFValue,
							     TrUserData)
				end,
				F@_4, F@_5, TrUserData).

d_field_team_req_state(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_team_req_state(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_team_req_state(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, Prev, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_team_state(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_team_req(RestF, 0, 0, F@_1, F@_2,
				F@_3,
				if Prev == undefined -> NewFValue;
				   true ->
				       merge_msg_team_state(Prev, NewFValue,
							    TrUserData)
				end,
				F@_5, TrUserData).

d_field_team_req_leave(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_team_req_leave(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_team_req_leave(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_team_leave(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_team_req(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4,
				if Prev == undefined -> NewFValue;
				   true ->
				       merge_msg_team_leave(Prev, NewFValue,
							    TrUserData)
				end,
				TrUserData).

skip_varint_team_req(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_team_req(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, TrUserData);
skip_varint_team_req(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_team_req(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_team_req(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_team_req(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData);
skip_length_delimited_team_req(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_team_req(Rest2, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_group_team_req(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_team_req(Rest, 0, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_32_team_req(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_team_req(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_64_team_req(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_team_req(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

d_msg_select_magic(Bin, TrUserData) ->
    dfp_read_field_def_select_magic(Bin, 0, 0,
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_select_magic(<<8, Rest/binary>>, Z1,
				Z2, F@_1, TrUserData) ->
    d_field_select_magic_magic_id(Rest, Z1, Z2, F@_1,
				  TrUserData);
dfp_read_field_def_select_magic(<<>>, 0, 0, F@_1, _) ->
    #select_magic{magic_id = F@_1};
dfp_read_field_def_select_magic(Other, Z1, Z2, F@_1,
				TrUserData) ->
    dg_read_field_def_select_magic(Other, Z1, Z2, F@_1,
				   TrUserData).

dg_read_field_def_select_magic(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_select_magic(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_select_magic(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_select_magic_magic_id(Rest, 0, 0, F@_1,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_select_magic(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_select_magic(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_select_magic(Rest, 0, 0, F@_1,
						   TrUserData);
	    3 ->
		skip_group_select_magic(Rest, Key bsr 3, 0, F@_1,
					TrUserData);
	    5 -> skip_32_select_magic(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_select_magic(<<>>, 0, 0, F@_1, _) ->
    #select_magic{magic_id = F@_1}.

d_field_select_magic_magic_id(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_select_magic_magic_id(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
d_field_select_magic_magic_id(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_select_magic(RestF, 0, 0, NewFValue,
				    TrUserData).

skip_varint_select_magic(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    skip_varint_select_magic(Rest, Z1, Z2, F@_1,
			     TrUserData);
skip_varint_select_magic(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    dfp_read_field_def_select_magic(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_length_delimited_select_magic(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_select_magic(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_select_magic(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_select_magic(Rest2, 0, 0, F@_1,
				    TrUserData).

skip_group_select_magic(Bin, FNum, Z2, F@_1,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_select_magic(Rest, 0, Z2, F@_1,
				    TrUserData).

skip_32_select_magic(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_select_magic(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_64_select_magic(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_select_magic(Rest, Z1, Z2, F@_1,
				    TrUserData).

d_msg_magic_req(Bin, TrUserData) ->
    dfp_read_field_def_magic_req(Bin, 0, 0,
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_magic_req(<<10, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    d_field_magic_req_select(Rest, Z1, Z2, F@_1,
			     TrUserData);
dfp_read_field_def_magic_req(<<>>, 0, 0, F@_1, _) ->
    #magic_req{select = F@_1};
dfp_read_field_def_magic_req(Other, Z1, Z2, F@_1,
			     TrUserData) ->
    dg_read_field_def_magic_req(Other, Z1, Z2, F@_1,
				TrUserData).

dg_read_field_def_magic_req(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_magic_req(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
dg_read_field_def_magic_req(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_magic_req_select(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_magic_req(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_magic_req(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_magic_req(Rest, 0, 0, F@_1,
						TrUserData);
	    3 ->
		skip_group_magic_req(Rest, Key bsr 3, 0, F@_1,
				     TrUserData);
	    5 -> skip_32_magic_req(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_magic_req(<<>>, 0, 0, F@_1, _) ->
    #magic_req{select = F@_1}.

d_field_magic_req_select(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_magic_req_select(Rest, N + 7, X bsl N + Acc,
			     F@_1, TrUserData);
d_field_magic_req_select(<<0:1, X:7, Rest/binary>>, N,
			 Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_select_magic(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_magic_req(RestF, 0, 0,
				 if Prev == undefined -> NewFValue;
				    true ->
					merge_msg_select_magic(Prev, NewFValue,
							       TrUserData)
				 end,
				 TrUserData).

skip_varint_magic_req(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    skip_varint_magic_req(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_magic_req(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_magic_req(Rest, Z1, Z2, F@_1,
				 TrUserData).

skip_length_delimited_magic_req(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_magic_req(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_magic_req(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_magic_req(Rest2, 0, 0, F@_1,
				 TrUserData).

skip_group_magic_req(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_magic_req(Rest, 0, Z2, F@_1,
				 TrUserData).

skip_32_magic_req(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  TrUserData) ->
    dfp_read_field_def_magic_req(Rest, Z1, Z2, F@_1,
				 TrUserData).

skip_64_magic_req(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  TrUserData) ->
    dfp_read_field_def_magic_req(Rest, Z1, Z2, F@_1,
				 TrUserData).

d_msg_rtnotify_callback(Bin, TrUserData) ->
    dfp_read_field_def_rtnotify_callback(Bin, 0, 0,
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rtnotify_callback(<<10,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    d_field_rtnotify_callback_data(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_rtnotify_callback(<<>>, 0, 0, F@_1,
				     _) ->
    #rtnotify_callback{data = F@_1};
dfp_read_field_def_rtnotify_callback(Other, Z1, Z2,
				     F@_1, TrUserData) ->
    dg_read_field_def_rtnotify_callback(Other, Z1, Z2, F@_1,
					TrUserData).

dg_read_field_def_rtnotify_callback(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rtnotify_callback(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_rtnotify_callback(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rtnotify_callback_data(Rest, 0, 0, F@_1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rtnotify_callback(Rest, 0, 0, F@_1,
					      TrUserData);
	    1 ->
		skip_64_rtnotify_callback(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_rtnotify_callback(Rest, 0, 0,
							F@_1, TrUserData);
	    3 ->
		skip_group_rtnotify_callback(Rest, Key bsr 3, 0, F@_1,
					     TrUserData);
	    5 ->
		skip_32_rtnotify_callback(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_rtnotify_callback(<<>>, 0, 0, F@_1,
				    _) ->
    #rtnotify_callback{data = F@_1}.

d_field_rtnotify_callback_data(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_rtnotify_callback_data(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_rtnotify_callback_data(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_rtnotify_callback(RestF, 0, 0,
					 NewFValue, TrUserData).

skip_varint_rtnotify_callback(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_rtnotify_callback(Rest, Z1, Z2, F@_1,
				  TrUserData);
skip_varint_rtnotify_callback(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_rtnotify_callback(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_length_delimited_rtnotify_callback(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rtnotify_callback(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_rtnotify_callback(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rtnotify_callback(Rest2, 0, 0, F@_1,
					 TrUserData).

skip_group_rtnotify_callback(Bin, FNum, Z2, F@_1,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_rtnotify_callback(Rest, 0, Z2, F@_1,
					 TrUserData).

skip_32_rtnotify_callback(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_rtnotify_callback(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_64_rtnotify_callback(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_rtnotify_callback(Rest, Z1, Z2, F@_1,
					 TrUserData).

d_msg_rtnotify_keepalive(Bin, TrUserData) ->
    dfp_read_field_def_rtnotify_keepalive(Bin, 0, 0,
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_rtnotify_keepalive(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_rtnotify_keepalive_time(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_rtnotify_keepalive(<<>>, 0, 0, F@_1,
				      _) ->
    #rtnotify_keepalive{time = F@_1};
dfp_read_field_def_rtnotify_keepalive(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_rtnotify_keepalive(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_rtnotify_keepalive(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rtnotify_keepalive(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_rtnotify_keepalive(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rtnotify_keepalive_time(Rest, 0, 0, F@_1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rtnotify_keepalive(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_rtnotify_keepalive(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_rtnotify_keepalive(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_rtnotify_keepalive(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_rtnotify_keepalive(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_rtnotify_keepalive(<<>>, 0, 0, F@_1,
				     _) ->
    #rtnotify_keepalive{time = F@_1}.

d_field_rtnotify_keepalive_time(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_rtnotify_keepalive_time(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
d_field_rtnotify_keepalive_time(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_rtnotify_keepalive(RestF, 0, 0,
					  NewFValue, TrUserData).

skip_varint_rtnotify_keepalive(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_rtnotify_keepalive(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_rtnotify_keepalive(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_rtnotify_keepalive(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_rtnotify_keepalive(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rtnotify_keepalive(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_rtnotify_keepalive(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rtnotify_keepalive(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_rtnotify_keepalive(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_rtnotify_keepalive(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_rtnotify_keepalive(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_rtnotify_keepalive(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_rtnotify_keepalive(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_rtnotify_keepalive(Rest, Z1, Z2,
					  F@_1, TrUserData).

d_msg_rtnotify_register(Bin, TrUserData) ->
    dfp_read_field_def_rtnotify_register(Bin, 0, 0,
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rtnotify_register(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    d_field_rtnotify_register_user_id(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_rtnotify_register(<<>>, 0, 0, F@_1,
				     _) ->
    #rtnotify_register{user_id = F@_1};
dfp_read_field_def_rtnotify_register(Other, Z1, Z2,
				     F@_1, TrUserData) ->
    dg_read_field_def_rtnotify_register(Other, Z1, Z2, F@_1,
					TrUserData).

dg_read_field_def_rtnotify_register(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rtnotify_register(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_rtnotify_register(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rtnotify_register_user_id(Rest, 0, 0, F@_1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rtnotify_register(Rest, 0, 0, F@_1,
					      TrUserData);
	    1 ->
		skip_64_rtnotify_register(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_rtnotify_register(Rest, 0, 0,
							F@_1, TrUserData);
	    3 ->
		skip_group_rtnotify_register(Rest, Key bsr 3, 0, F@_1,
					     TrUserData);
	    5 ->
		skip_32_rtnotify_register(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_rtnotify_register(<<>>, 0, 0, F@_1,
				    _) ->
    #rtnotify_register{user_id = F@_1}.

d_field_rtnotify_register_user_id(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_rtnotify_register_user_id(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_rtnotify_register_user_id(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_rtnotify_register(RestF, 0, 0,
					 NewFValue, TrUserData).

skip_varint_rtnotify_register(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_rtnotify_register(Rest, Z1, Z2, F@_1,
				  TrUserData);
skip_varint_rtnotify_register(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_rtnotify_register(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_length_delimited_rtnotify_register(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rtnotify_register(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_rtnotify_register(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rtnotify_register(Rest2, 0, 0, F@_1,
					 TrUserData).

skip_group_rtnotify_register(Bin, FNum, Z2, F@_1,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_rtnotify_register(Rest, 0, Z2, F@_1,
					 TrUserData).

skip_32_rtnotify_register(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_rtnotify_register(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_64_rtnotify_register(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_rtnotify_register(Rest, Z1, Z2, F@_1,
					 TrUserData).

d_msg_rtnotify_req(Bin, TrUserData) ->
    dfp_read_field_def_rtnotify_req(Bin, 0, 0,
				    id(undefined, TrUserData),
				    id(undefined, TrUserData),
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_rtnotify_req(<<10, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_rtnotify_req_register(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_rtnotify_req(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_rtnotify_req_keepalive(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
dfp_read_field_def_rtnotify_req(<<26, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_rtnotify_req_callback(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_rtnotify_req(<<>>, 0, 0, F@_1, F@_2,
				F@_3, _) ->
    #rtnotify_req{register = F@_1, keepalive = F@_2,
		  callback = F@_3};
dfp_read_field_def_rtnotify_req(Other, Z1, Z2, F@_1,
				F@_2, F@_3, TrUserData) ->
    dg_read_field_def_rtnotify_req(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, TrUserData).

dg_read_field_def_rtnotify_req(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rtnotify_req(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_rtnotify_req(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rtnotify_req_register(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      18 ->
	  d_field_rtnotify_req_keepalive(Rest, 0, 0, F@_1, F@_2,
					 F@_3, TrUserData);
      26 ->
	  d_field_rtnotify_req_callback(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rtnotify_req(Rest, 0, 0, F@_1, F@_2, F@_3,
					 TrUserData);
	    1 ->
		skip_64_rtnotify_req(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
	    2 ->
		skip_length_delimited_rtnotify_req(Rest, 0, 0, F@_1,
						   F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_rtnotify_req(Rest, Key bsr 3, 0, F@_1, F@_2,
					F@_3, TrUserData);
	    5 ->
		skip_32_rtnotify_req(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData)
	  end
    end;
dg_read_field_def_rtnotify_req(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, _) ->
    #rtnotify_req{register = F@_1, keepalive = F@_2,
		  callback = F@_3}.

d_field_rtnotify_req_register(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_rtnotify_req_register(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_rtnotify_req_register(<<0:1, X:7, Rest/binary>>,
			      N, Acc, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_rtnotify_register(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_rtnotify_req(RestF, 0, 0,
				    if Prev == undefined -> NewFValue;
				       true ->
					   merge_msg_rtnotify_register(Prev,
								       NewFValue,
								       TrUserData)
				    end,
				    F@_2, F@_3, TrUserData).

d_field_rtnotify_req_keepalive(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_rtnotify_req_keepalive(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_rtnotify_req_keepalive(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_rtnotify_keepalive(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_rtnotify_req(RestF, 0, 0, F@_1,
				    if Prev == undefined -> NewFValue;
				       true ->
					   merge_msg_rtnotify_keepalive(Prev,
									NewFValue,
									TrUserData)
				    end,
				    F@_3, TrUserData).

d_field_rtnotify_req_callback(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_rtnotify_req_callback(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_rtnotify_req_callback(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_rtnotify_callback(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_rtnotify_req(RestF, 0, 0, F@_1, F@_2,
				    if Prev == undefined -> NewFValue;
				       true ->
					   merge_msg_rtnotify_callback(Prev,
								       NewFValue,
								       TrUserData)
				    end,
				    TrUserData).

skip_varint_rtnotify_req(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_rtnotify_req(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData);
skip_varint_rtnotify_req(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_rtnotify_req(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

skip_length_delimited_rtnotify_req(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_rtnotify_req(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3,
				       TrUserData);
skip_length_delimited_rtnotify_req(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rtnotify_req(Rest2, 0, 0, F@_1, F@_2,
				    F@_3, TrUserData).

skip_group_rtnotify_req(Bin, FNum, Z2, F@_1, F@_2, F@_3,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_rtnotify_req(Rest, 0, Z2, F@_1, F@_2,
				    F@_3, TrUserData).

skip_32_rtnotify_req(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_rtnotify_req(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

skip_64_rtnotify_req(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_rtnotify_req(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

d_msg_lookup_role(Bin, TrUserData) ->
    dfp_read_field_def_lookup_role(Bin, 0, 0, TrUserData).

dfp_read_field_def_lookup_role(<<>>, 0, 0, _) ->
    #lookup_role{};
dfp_read_field_def_lookup_role(Other, Z1, Z2,
			       TrUserData) ->
    dg_read_field_def_lookup_role(Other, Z1, Z2,
				  TrUserData).

dg_read_field_def_lookup_role(<<1:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_lookup_role(Rest, N + 7,
				  X bsl N + Acc, TrUserData);
dg_read_field_def_lookup_role(<<0:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_lookup_role(Rest, 0, 0, TrUserData);
      1 -> skip_64_lookup_role(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_lookup_role(Rest, 0, 0,
					    TrUserData);
      3 ->
	  skip_group_lookup_role(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_lookup_role(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_lookup_role(<<>>, 0, 0, _) ->
    #lookup_role{}.

skip_varint_lookup_role(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    skip_varint_lookup_role(Rest, Z1, Z2, TrUserData);
skip_varint_lookup_role(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    dfp_read_field_def_lookup_role(Rest, Z1, Z2,
				   TrUserData).

skip_length_delimited_lookup_role(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_lookup_role(Rest, N + 7,
				      X bsl N + Acc, TrUserData);
skip_length_delimited_lookup_role(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_lookup_role(Rest2, 0, 0, TrUserData).

skip_group_lookup_role(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_lookup_role(Rest, 0, Z2, TrUserData).

skip_32_lookup_role(<<_:32, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_lookup_role(Rest, Z1, Z2,
				   TrUserData).

skip_64_lookup_role(<<_:64, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_lookup_role(Rest, Z1, Z2,
				   TrUserData).

d_msg_select_role(Bin, TrUserData) ->
    dfp_read_field_def_select_role(Bin, 0, 0,
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_select_role(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_select_role_role_id(Rest, Z1, Z2, F@_1,
				TrUserData);
dfp_read_field_def_select_role(<<>>, 0, 0, F@_1, _) ->
    #select_role{role_id = F@_1};
dfp_read_field_def_select_role(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_select_role(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_select_role(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_select_role(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_select_role(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_select_role_role_id(Rest, 0, 0, F@_1,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_select_role(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_select_role(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_select_role(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_select_role(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_select_role(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_select_role(<<>>, 0, 0, F@_1, _) ->
    #select_role{role_id = F@_1}.

d_field_select_role_role_id(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_select_role_role_id(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
d_field_select_role_role_id(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_select_role(RestF, 0, 0, NewFValue,
				   TrUserData).

skip_varint_select_role(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_select_role(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_select_role(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_select_role(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_select_role(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_select_role(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_select_role(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_select_role(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_select_role(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_select_role(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_select_role(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_select_role(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_select_role(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_select_role(Rest, Z1, Z2, F@_1,
				   TrUserData).

d_msg_create_role(Bin, TrUserData) ->
    dfp_read_field_def_create_role(Bin, 0, 0,
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_create_role(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_create_role_role_cid(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_create_role(<<>>, 0, 0, F@_1, _) ->
    #create_role{role_cid = F@_1};
dfp_read_field_def_create_role(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_create_role(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_create_role(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_create_role(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_create_role(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_create_role_role_cid(Rest, 0, 0, F@_1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_create_role(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_create_role(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_create_role(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_create_role(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_create_role(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_create_role(<<>>, 0, 0, F@_1, _) ->
    #create_role{role_cid = F@_1}.

d_field_create_role_role_cid(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_create_role_role_cid(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_field_create_role_role_cid(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_create_role(RestF, 0, 0, NewFValue,
				   TrUserData).

skip_varint_create_role(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_create_role(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_create_role(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_create_role(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_create_role(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_create_role(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_create_role(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_create_role(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_create_role(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_create_role(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_create_role(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_create_role(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_create_role(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_create_role(Rest, Z1, Z2, F@_1,
				   TrUserData).

d_msg_role_req(Bin, TrUserData) ->
    dfp_read_field_def_role_req(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_role_req(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_role_req_create(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
dfp_read_field_def_role_req(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_role_req_select(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
dfp_read_field_def_role_req(<<26, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_role_req_lookup(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
dfp_read_field_def_role_req(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, _) ->
    #role_req{create = F@_1, select = F@_2, lookup = F@_3};
dfp_read_field_def_role_req(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, TrUserData) ->
    dg_read_field_def_role_req(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

dg_read_field_def_role_req(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_role_req(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_role_req(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_role_req_create(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
      18 ->
	  d_field_role_req_select(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
      26 ->
	  d_field_role_req_lookup(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_role_req(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
	    1 ->
		skip_64_role_req(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
	    2 ->
		skip_length_delimited_role_req(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData);
	    3 ->
		skip_group_role_req(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, TrUserData);
	    5 ->
		skip_32_role_req(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData)
	  end
    end;
dg_read_field_def_role_req(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   _) ->
    #role_req{create = F@_1, select = F@_2, lookup = F@_3}.

d_field_role_req_create(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_role_req_create(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, TrUserData);
d_field_role_req_create(<<0:1, X:7, Rest/binary>>, N,
			Acc, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_create_role(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_role_req(RestF, 0, 0,
				if Prev == undefined -> NewFValue;
				   true ->
				       merge_msg_create_role(Prev, NewFValue,
							     TrUserData)
				end,
				F@_2, F@_3, TrUserData).

d_field_role_req_select(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_role_req_select(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, TrUserData);
d_field_role_req_select(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_select_role(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_role_req(RestF, 0, 0, F@_1,
				if Prev == undefined -> NewFValue;
				   true ->
				       merge_msg_select_role(Prev, NewFValue,
							     TrUserData)
				end,
				F@_3, TrUserData).

d_field_role_req_lookup(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_role_req_lookup(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, TrUserData);
d_field_role_req_lookup(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_lookup_role(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_role_req(RestF, 0, 0, F@_1, F@_2,
				if Prev == undefined -> NewFValue;
				   true ->
				       merge_msg_lookup_role(Prev, NewFValue,
							     TrUserData)
				end,
				TrUserData).

skip_varint_role_req(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_role_req(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
skip_varint_role_req(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_role_req(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_length_delimited_role_req(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_role_req(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_role_req(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_role_req(Rest2, 0, 0, F@_1, F@_2,
				F@_3, TrUserData).

skip_group_role_req(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_role_req(Rest, 0, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_32_role_req(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_role_req(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_64_role_req(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_role_req(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

d_msg_login_req(Bin, TrUserData) ->
    dfp_read_field_def_login_req(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_login_req(<<10, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_login_req_device_id(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_login_req(<<18, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_login_req_version(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_login_req(<<>>, 0, 0, F@_1, F@_2,
			     _) ->
    #login_req{device_id = F@_1, version = F@_2};
dfp_read_field_def_login_req(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData) ->
    dg_read_field_def_login_req(Other, Z1, Z2, F@_1, F@_2,
				TrUserData).

dg_read_field_def_login_req(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_login_req(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
dg_read_field_def_login_req(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_login_req_device_id(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      18 ->
	  d_field_login_req_version(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_login_req(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    1 ->
		skip_64_login_req(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_login_req(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    3 ->
		skip_group_login_req(Rest, Key bsr 3, 0, F@_1, F@_2,
				     TrUserData);
	    5 ->
		skip_32_login_req(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_login_req(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #login_req{device_id = F@_1, version = F@_2}.

d_field_login_req_device_id(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_login_req_device_id(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
d_field_login_req_device_id(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_login_req(RestF, 0, 0, NewFValue,
				 F@_2, TrUserData).

d_field_login_req_version(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_login_req_version(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_login_req_version(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_login_req(RestF, 0, 0, F@_1,
				 NewFValue, TrUserData).

skip_varint_login_req(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    skip_varint_login_req(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
skip_varint_login_req(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_login_req(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_length_delimited_login_req(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_login_req(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_login_req(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_login_req(Rest2, 0, 0, F@_1, F@_2,
				 TrUserData).

skip_group_login_req(Bin, FNum, Z2, F@_1, F@_2,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_login_req(Rest, 0, Z2, F@_1, F@_2,
				 TrUserData).

skip_32_login_req(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_login_req(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_64_login_req(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_login_req(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

d_msg_sdk_login_req(Bin, TrUserData) ->
    dfp_read_field_def_sdk_login_req(Bin, 0, 0, TrUserData).

dfp_read_field_def_sdk_login_req(<<>>, 0, 0, _) ->
    #sdk_login_req{};
dfp_read_field_def_sdk_login_req(Other, Z1, Z2,
				 TrUserData) ->
    dg_read_field_def_sdk_login_req(Other, Z1, Z2,
				    TrUserData).

dg_read_field_def_sdk_login_req(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_sdk_login_req(Rest, N + 7,
				    X bsl N + Acc, TrUserData);
dg_read_field_def_sdk_login_req(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_sdk_login_req(Rest, 0, 0, TrUserData);
      1 -> skip_64_sdk_login_req(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_sdk_login_req(Rest, 0, 0,
					      TrUserData);
      3 ->
	  skip_group_sdk_login_req(Rest, Key bsr 3, 0,
				   TrUserData);
      5 -> skip_32_sdk_login_req(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_sdk_login_req(<<>>, 0, 0, _) ->
    #sdk_login_req{}.

skip_varint_sdk_login_req(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    skip_varint_sdk_login_req(Rest, Z1, Z2, TrUserData);
skip_varint_sdk_login_req(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    dfp_read_field_def_sdk_login_req(Rest, Z1, Z2,
				     TrUserData).

skip_length_delimited_sdk_login_req(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_sdk_login_req(Rest, N + 7,
					X bsl N + Acc, TrUserData);
skip_length_delimited_sdk_login_req(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_sdk_login_req(Rest2, 0, 0,
				     TrUserData).

skip_group_sdk_login_req(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_sdk_login_req(Rest, 0, Z2,
				     TrUserData).

skip_32_sdk_login_req(<<_:32, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_sdk_login_req(Rest, Z1, Z2,
				     TrUserData).

skip_64_sdk_login_req(<<_:64, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_sdk_login_req(Rest, Z1, Z2,
				     TrUserData).

d_msg_up_msg(Bin, TrUserData) ->
    dfp_read_field_def_up_msg(Bin, 0, 0,
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_up_msg(<<8, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_up_msg_sequence(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    TrUserData);
dfp_read_field_def_up_msg(<<16, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_up_msg_repeat(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  TrUserData);
dfp_read_field_def_up_msg(<<24, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_up_msg_user_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			   TrUserData);
dfp_read_field_def_up_msg(<<32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_up_msg_role_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			   TrUserData);
dfp_read_field_def_up_msg(<<42, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_up_msg_sdk_login(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     TrUserData);
dfp_read_field_def_up_msg(<<50, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_up_msg_login(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 TrUserData);
dfp_read_field_def_up_msg(<<58, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_up_msg_role(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			TrUserData);
dfp_read_field_def_up_msg(<<66, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_up_msg_rtnotify(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    TrUserData);
dfp_read_field_def_up_msg(<<74, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_up_msg_magic(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 TrUserData);
dfp_read_field_def_up_msg(<<82, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_up_msg_team(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			TrUserData);
dfp_read_field_def_up_msg(<<90, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_up_msg_match(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 TrUserData);
dfp_read_field_def_up_msg(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  _) ->
    #up_msg{sequence = F@_1, repeat = F@_2, user_id = F@_3,
	    role_id = F@_4, sdk_login = F@_5, login = F@_6,
	    role = F@_7, rtnotify = F@_8, magic = F@_9,
	    team = F@_10, match = F@_11};
dfp_read_field_def_up_msg(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, TrUserData) ->
    dg_read_field_def_up_msg(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			     F@_11, TrUserData).

dg_read_field_def_up_msg(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_up_msg(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, TrUserData);
dg_read_field_def_up_msg(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_up_msg_sequence(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, TrUserData);
      16 ->
	  d_field_up_msg_repeat(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, TrUserData);
      24 ->
	  d_field_up_msg_user_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				 F@_11, TrUserData);
      32 ->
	  d_field_up_msg_role_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				 F@_11, TrUserData);
      42 ->
	  d_field_up_msg_sdk_login(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, TrUserData);
      50 ->
	  d_field_up_msg_login(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       TrUserData);
      58 ->
	  d_field_up_msg_role(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      TrUserData);
      66 ->
	  d_field_up_msg_rtnotify(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, TrUserData);
      74 ->
	  d_field_up_msg_magic(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       TrUserData);
      82 ->
	  d_field_up_msg_team(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      TrUserData);
      90 ->
	  d_field_up_msg_match(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_up_msg(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				   TrUserData);
	    1 ->
		skip_64_up_msg(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       TrUserData);
	    2 ->
		skip_length_delimited_up_msg(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					     F@_9, F@_10, F@_11, TrUserData);
	    3 ->
		skip_group_up_msg(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, TrUserData);
	    5 ->
		skip_32_up_msg(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
	  end
    end;
dg_read_field_def_up_msg(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, _) ->
    #up_msg{sequence = F@_1, repeat = F@_2, user_id = F@_3,
	    role_id = F@_4, sdk_login = F@_5, login = F@_6,
	    role = F@_7, rtnotify = F@_8, magic = F@_9,
	    team = F@_10, match = F@_11}.

d_field_up_msg_sequence(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_up_msg_sequence(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, TrUserData);
d_field_up_msg_sequence(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_up_msg(RestF, 0, 0, NewFValue, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

d_field_up_msg_repeat(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_up_msg_repeat(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, TrUserData);
d_field_up_msg_repeat(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc =/= 0, Rest},
    dfp_read_field_def_up_msg(RestF, 0, 0, F@_1, NewFValue,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

d_field_up_msg_user_id(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_up_msg_user_id(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, TrUserData);
d_field_up_msg_user_id(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		       F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_up_msg(RestF, 0, 0, F@_1, F@_2,
			      NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			      F@_10, F@_11, TrUserData).

d_field_up_msg_role_id(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_up_msg_role_id(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, TrUserData);
d_field_up_msg_role_id(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9,
		       F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_up_msg(RestF, 0, 0, F@_1, F@_2, F@_3,
			      NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

d_field_up_msg_sdk_login(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_up_msg_sdk_login(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, TrUserData);
d_field_up_msg_sdk_login(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, Prev, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_sdk_login_req(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_up_msg(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4,
			      if Prev == undefined -> NewFValue;
				 true ->
				     merge_msg_sdk_login_req(Prev, NewFValue,
							     TrUserData)
			      end,
			      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

d_field_up_msg_login(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_up_msg_login(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, TrUserData);
d_field_up_msg_login(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, Prev, F@_7, F@_8, F@_9,
		     F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_login_req(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_up_msg(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5,
			      if Prev == undefined -> NewFValue;
				 true ->
				     merge_msg_login_req(Prev, NewFValue,
							 TrUserData)
			      end,
			      F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

d_field_up_msg_role(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_up_msg_role(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			F@_11, TrUserData);
d_field_up_msg_role(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, Prev, F@_8, F@_9,
		    F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_role_req(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_up_msg(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6,
			      if Prev == undefined -> NewFValue;
				 true ->
				     merge_msg_role_req(Prev, NewFValue,
							TrUserData)
			      end,
			      F@_8, F@_9, F@_10, F@_11, TrUserData).

d_field_up_msg_rtnotify(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_up_msg_rtnotify(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, TrUserData);
d_field_up_msg_rtnotify(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, Prev,
			F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_rtnotify_req(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_up_msg(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7,
			      if Prev == undefined -> NewFValue;
				 true ->
				     merge_msg_rtnotify_req(Prev, NewFValue,
							    TrUserData)
			      end,
			      F@_9, F@_10, F@_11, TrUserData).

d_field_up_msg_magic(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_up_msg_magic(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, TrUserData);
d_field_up_msg_magic(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, Prev,
		     F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_magic_req(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_up_msg(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8,
			      if Prev == undefined -> NewFValue;
				 true ->
				     merge_msg_magic_req(Prev, NewFValue,
							 TrUserData)
			      end,
			      F@_10, F@_11, TrUserData).

d_field_up_msg_team(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_up_msg_team(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			F@_11, TrUserData);
d_field_up_msg_team(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    Prev, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_team_req(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_up_msg(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			      if Prev == undefined -> NewFValue;
				 true ->
				     merge_msg_team_req(Prev, NewFValue,
							TrUserData)
			      end,
			      F@_11, TrUserData).

d_field_up_msg_match(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_up_msg_match(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, TrUserData);
d_field_up_msg_match(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_match_req(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_up_msg(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      if Prev == undefined -> NewFValue;
				 true ->
				     merge_msg_match_req(Prev, NewFValue,
							 TrUserData)
			      end,
			      TrUserData).

skip_varint_up_msg(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, F@_11, TrUserData) ->
    skip_varint_up_msg(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
skip_varint_up_msg(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_up_msg(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

skip_length_delimited_up_msg(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    skip_length_delimited_up_msg(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 F@_9, F@_10, F@_11, TrUserData);
skip_length_delimited_up_msg(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_up_msg(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      TrUserData).

skip_group_up_msg(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		  F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_up_msg(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      TrUserData).

skip_32_up_msg(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
	       F@_11, TrUserData) ->
    dfp_read_field_def_up_msg(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

skip_64_up_msg(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
	       F@_11, TrUserData) ->
    dfp_read_field_def_up_msg(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

d_msg_role_summary_st(Bin, TrUserData) ->
    dfp_read_field_def_role_summary_st(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_role_summary_st(<<8, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    d_field_role_summary_st_role_id(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_role_summary_st(<<16, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    d_field_role_summary_st_elf_id(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData);
dfp_read_field_def_role_summary_st(<<26, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    d_field_role_summary_st_name(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData);
dfp_read_field_def_role_summary_st(<<32, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    d_field_role_summary_st_level(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData);
dfp_read_field_def_role_summary_st(<<>>, 0, 0, F@_1,
				   F@_2, F@_3, F@_4, _) ->
    #role_summary_st{role_id = F@_1, elf_id = F@_2,
		     name = F@_3, level = F@_4};
dfp_read_field_def_role_summary_st(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_role_summary_st(Other, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_role_summary_st(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_role_summary_st(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData);
dg_read_field_def_role_summary_st(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_role_summary_st_role_id(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, TrUserData);
      16 ->
	  d_field_role_summary_st_elf_id(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, TrUserData);
      26 ->
	  d_field_role_summary_st_name(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, TrUserData);
      32 ->
	  d_field_role_summary_st_level(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_role_summary_st(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, TrUserData);
	    1 ->
		skip_64_role_summary_st(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, TrUserData);
	    2 ->
		skip_length_delimited_role_summary_st(Rest, 0, 0, F@_1,
						      F@_2, F@_3, F@_4,
						      TrUserData);
	    3 ->
		skip_group_role_summary_st(Rest, Key bsr 3, 0, F@_1,
					   F@_2, F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_role_summary_st(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, TrUserData)
	  end
    end;
dg_read_field_def_role_summary_st(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, F@_4, _) ->
    #role_summary_st{role_id = F@_1, elf_id = F@_2,
		     name = F@_3, level = F@_4}.

d_field_role_summary_st_role_id(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_role_summary_st_role_id(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
d_field_role_summary_st_role_id(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_role_summary_st(RestF, 0, 0,
				       NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_role_summary_st_elf_id(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_role_summary_st_elf_id(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				   TrUserData);
d_field_role_summary_st_elf_id(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_role_summary_st(RestF, 0, 0, F@_1,
				       NewFValue, F@_3, F@_4, TrUserData).

d_field_role_summary_st_name(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_role_summary_st_name(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_role_summary_st_name(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_role_summary_st(RestF, 0, 0, F@_1,
				       F@_2, NewFValue, F@_4, TrUserData).

d_field_role_summary_st_level(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_role_summary_st_level(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
d_field_role_summary_st_level(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_role_summary_st(RestF, 0, 0, F@_1,
				       F@_2, F@_3, NewFValue, TrUserData).

skip_varint_role_summary_st(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_role_summary_st(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData);
skip_varint_role_summary_st(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_role_summary_st(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_role_summary_st(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData)
    when N < 57 ->
    skip_length_delimited_role_summary_st(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData);
skip_length_delimited_role_summary_st(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_role_summary_st(Rest2, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, TrUserData).

skip_group_role_summary_st(Bin, FNum, Z2, F@_1, F@_2,
			   F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_role_summary_st(Rest, 0, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData).

skip_32_role_summary_st(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_role_summary_st(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData).

skip_64_role_summary_st(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_role_summary_st(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData).

d_msg_battle_team_member(Bin, TrUserData) ->
    dfp_read_field_def_battle_team_member(Bin, 0, 0,
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_battle_team_member(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    d_field_battle_team_member_role_id(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_battle_team_member(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    d_field_battle_team_member_elf_id(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_battle_team_member(<<26,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    d_field_battle_team_member_name(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_battle_team_member(<<32,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    d_field_battle_team_member_level(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_battle_team_member(<<40,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    d_field_battle_team_member_team_id(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_battle_team_member(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, _) ->
    #battle_team_member{role_id = F@_1, elf_id = F@_2,
			name = F@_3, level = F@_4, team_id = F@_5};
dfp_read_field_def_battle_team_member(Other, Z1, Z2,
				      F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    dg_read_field_def_battle_team_member(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData).

dg_read_field_def_battle_team_member(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_battle_team_member(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, TrUserData);
dg_read_field_def_battle_team_member(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_battle_team_member_role_id(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5,
					     TrUserData);
      16 ->
	  d_field_battle_team_member_elf_id(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, TrUserData);
      26 ->
	  d_field_battle_team_member_name(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, TrUserData);
      32 ->
	  d_field_battle_team_member_level(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, TrUserData);
      40 ->
	  d_field_battle_team_member_team_id(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_battle_team_member(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_battle_team_member(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_battle_team_member(Rest, 0, 0,
							 F@_1, F@_2, F@_3, F@_4,
							 F@_5, TrUserData);
	    3 ->
		skip_group_battle_team_member(Rest, Key bsr 3, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
	    5 ->
		skip_32_battle_team_member(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_battle_team_member(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, _) ->
    #battle_team_member{role_id = F@_1, elf_id = F@_2,
			name = F@_3, level = F@_4, team_id = F@_5}.

d_field_battle_team_member_role_id(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData)
    when N < 57 ->
    d_field_battle_team_member_role_id(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, TrUserData);
d_field_battle_team_member_role_id(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F@_2, F@_3, F@_4, F@_5,
				   TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_battle_team_member(RestF, 0, 0,
					  NewFValue, F@_2, F@_3, F@_4, F@_5,
					  TrUserData).

d_field_battle_team_member_elf_id(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData)
    when N < 57 ->
    d_field_battle_team_member_elf_id(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, TrUserData);
d_field_battle_team_member_elf_id(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, _, F@_3, F@_4, F@_5,
				  TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_battle_team_member(RestF, 0, 0, F@_1,
					  NewFValue, F@_3, F@_4, F@_5,
					  TrUserData).

d_field_battle_team_member_name(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 57 ->
    d_field_battle_team_member_name(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
d_field_battle_team_member_name(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, _, F@_4, F@_5,
				TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_battle_team_member(RestF, 0, 0, F@_1,
					  F@_2, NewFValue, F@_4, F@_5,
					  TrUserData).

d_field_battle_team_member_level(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 57 ->
    d_field_battle_team_member_level(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
d_field_battle_team_member_level(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, _, F@_5,
				 TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_battle_team_member(RestF, 0, 0, F@_1,
					  F@_2, F@_3, NewFValue, F@_5,
					  TrUserData).

d_field_battle_team_member_team_id(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData)
    when N < 57 ->
    d_field_battle_team_member_team_id(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, TrUserData);
d_field_battle_team_member_team_id(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, _,
				   TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_battle_team_member(RestF, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, NewFValue,
					  TrUserData).

skip_varint_battle_team_member(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData) ->
    skip_varint_battle_team_member(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData);
skip_varint_battle_team_member(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData) ->
    dfp_read_field_def_battle_team_member(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData).

skip_length_delimited_battle_team_member(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData)
    when N < 57 ->
    skip_length_delimited_battle_team_member(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, TrUserData);
skip_length_delimited_battle_team_member(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_battle_team_member(Rest2, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_battle_team_member(Bin, FNum, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_battle_team_member(Rest, 0, Z2, F@_1,
					  F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_battle_team_member(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_battle_team_member(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData).

skip_64_battle_team_member(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_battle_team_member(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData).

d_msg_battle_team(Bin, TrUserData) ->
    dfp_read_field_def_battle_team(Bin, 0, 0,
				   id([], TrUserData), TrUserData).

dfp_read_field_def_battle_team(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_battle_team_members(Rest, Z1, Z2, F@_1,
				TrUserData);
dfp_read_field_def_battle_team(<<>>, 0, 0, R1,
			       TrUserData) ->
    #battle_team{members = lists_reverse(R1, TrUserData)};
dfp_read_field_def_battle_team(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_battle_team(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_battle_team(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_battle_team(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_battle_team(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_battle_team_members(Rest, 0, 0, F@_1,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_battle_team(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_battle_team(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_battle_team(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_battle_team(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_battle_team(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_battle_team(<<>>, 0, 0, R1,
			      TrUserData) ->
    #battle_team{members = lists_reverse(R1, TrUserData)}.

d_field_battle_team_members(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_battle_team_members(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
d_field_battle_team_members(<<0:1, X:7, Rest/binary>>,
			    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_battle_team_member(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_battle_team(RestF, 0, 0,
				   cons(NewFValue, Prev, TrUserData),
				   TrUserData).

skip_varint_battle_team(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_battle_team(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_battle_team(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_battle_team(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_battle_team(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_battle_team(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_battle_team(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_battle_team(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_battle_team(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_battle_team(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_battle_team(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_battle_team(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_battle_team(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_battle_team(Rest, Z1, Z2, F@_1,
				   TrUserData).

d_msg_name_card_st(Bin, TrUserData) ->
    dfp_read_field_def_name_card_st(Bin, 0, 0,
				    id(undefined, TrUserData),
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_name_card_st(<<10, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_name_card_st_name(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_name_card_st(<<16, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_name_card_st_last_set_time(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
dfp_read_field_def_name_card_st(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    #name_card_st{name = F@_1, last_set_time = F@_2};
dfp_read_field_def_name_card_st(Other, Z1, Z2, F@_1,
				F@_2, TrUserData) ->
    dg_read_field_def_name_card_st(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData).

dg_read_field_def_name_card_st(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_name_card_st(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_name_card_st(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_name_card_st_name(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      16 ->
	  d_field_name_card_st_last_set_time(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_name_card_st(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    1 ->
		skip_64_name_card_st(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    2 ->
		skip_length_delimited_name_card_st(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    3 ->
		skip_group_name_card_st(Rest, Key bsr 3, 0, F@_1, F@_2,
					TrUserData);
	    5 ->
		skip_32_name_card_st(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_name_card_st(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #name_card_st{name = F@_1, last_set_time = F@_2}.

d_field_name_card_st_name(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_name_card_st_name(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_name_card_st_name(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_name_card_st(RestF, 0, 0, NewFValue,
				    F@_2, TrUserData).

d_field_name_card_st_last_set_time(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_name_card_st_last_set_time(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_name_card_st_last_set_time(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_name_card_st(RestF, 0, 0, F@_1,
				    NewFValue, TrUserData).

skip_varint_name_card_st(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_name_card_st(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
skip_varint_name_card_st(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_name_card_st(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_length_delimited_name_card_st(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_name_card_st(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_name_card_st(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_name_card_st(Rest2, 0, 0, F@_1, F@_2,
				    TrUserData).

skip_group_name_card_st(Bin, FNum, Z2, F@_1, F@_2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_name_card_st(Rest, 0, Z2, F@_1, F@_2,
				    TrUserData).

skip_32_name_card_st(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_name_card_st(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_64_name_card_st(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_name_card_st(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

d_msg_team_info_st(Bin, TrUserData) ->
    dfp_read_field_def_team_info_st(Bin, 0, 0,
				    id([], TrUserData),
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_team_info_st(<<10, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_team_info_st_members(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_team_info_st(<<16, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_team_info_st_leader_id(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
dfp_read_field_def_team_info_st(<<>>, 0, 0, R1, F@_2,
				TrUserData) ->
    #team_info_st{members = lists_reverse(R1, TrUserData),
		  leader_id = F@_2};
dfp_read_field_def_team_info_st(Other, Z1, Z2, F@_1,
				F@_2, TrUserData) ->
    dg_read_field_def_team_info_st(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData).

dg_read_field_def_team_info_st(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_team_info_st(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_team_info_st(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_team_info_st_members(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      16 ->
	  d_field_team_info_st_leader_id(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_team_info_st(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    1 ->
		skip_64_team_info_st(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    2 ->
		skip_length_delimited_team_info_st(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    3 ->
		skip_group_team_info_st(Rest, Key bsr 3, 0, F@_1, F@_2,
					TrUserData);
	    5 ->
		skip_32_team_info_st(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_team_info_st(<<>>, 0, 0, R1, F@_2,
			       TrUserData) ->
    #team_info_st{members = lists_reverse(R1, TrUserData),
		  leader_id = F@_2}.

d_field_team_info_st_members(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_team_info_st_members(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_team_info_st_members(<<0:1, X:7, Rest/binary>>,
			     N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_team_member_st(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_team_info_st(RestF, 0, 0,
				    cons(NewFValue, Prev, TrUserData), F@_2,
				    TrUserData).

d_field_team_info_st_leader_id(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_team_info_st_leader_id(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_team_info_st_leader_id(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_team_info_st(RestF, 0, 0, F@_1,
				    NewFValue, TrUserData).

skip_varint_team_info_st(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_team_info_st(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
skip_varint_team_info_st(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_team_info_st(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_length_delimited_team_info_st(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_team_info_st(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_team_info_st(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_team_info_st(Rest2, 0, 0, F@_1, F@_2,
				    TrUserData).

skip_group_team_info_st(Bin, FNum, Z2, F@_1, F@_2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_team_info_st(Rest, 0, Z2, F@_1, F@_2,
				    TrUserData).

skip_32_team_info_st(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_team_info_st(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_64_team_info_st(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_team_info_st(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

d_msg_battle_stat(Bin, TrUserData) ->
    dfp_read_field_def_battle_stat(Bin, 0, 0, TrUserData).

dfp_read_field_def_battle_stat(<<>>, 0, 0, _) ->
    #battle_stat{};
dfp_read_field_def_battle_stat(Other, Z1, Z2,
			       TrUserData) ->
    dg_read_field_def_battle_stat(Other, Z1, Z2,
				  TrUserData).

dg_read_field_def_battle_stat(<<1:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_battle_stat(Rest, N + 7,
				  X bsl N + Acc, TrUserData);
dg_read_field_def_battle_stat(<<0:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_battle_stat(Rest, 0, 0, TrUserData);
      1 -> skip_64_battle_stat(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_battle_stat(Rest, 0, 0,
					    TrUserData);
      3 ->
	  skip_group_battle_stat(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_battle_stat(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_battle_stat(<<>>, 0, 0, _) ->
    #battle_stat{}.

skip_varint_battle_stat(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    skip_varint_battle_stat(Rest, Z1, Z2, TrUserData);
skip_varint_battle_stat(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    dfp_read_field_def_battle_stat(Rest, Z1, Z2,
				   TrUserData).

skip_length_delimited_battle_stat(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_battle_stat(Rest, N + 7,
				      X bsl N + Acc, TrUserData);
skip_length_delimited_battle_stat(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_battle_stat(Rest2, 0, 0, TrUserData).

skip_group_battle_stat(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_battle_stat(Rest, 0, Z2, TrUserData).

skip_32_battle_stat(<<_:32, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_battle_stat(Rest, Z1, Z2,
				   TrUserData).

skip_64_battle_stat(<<_:64, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_battle_stat(Rest, Z1, Z2,
				   TrUserData).

d_msg_role_st(Bin, TrUserData) ->
    dfp_read_field_def_role_st(Bin, 0, 0,
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_role_st(<<8, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_role_st_role_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_role_st(<<16, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_role_st_elf_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
dfp_read_field_def_role_st(<<26, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_role_st_name_card(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_role_st(<<32, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_role_st_level(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, TrUserData);
dfp_read_field_def_role_st(<<40, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_role_st_exp(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, TrUserData);
dfp_read_field_def_role_st(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, _) ->
    #role_st{role_id = F@_1, elf_id = F@_2,
	     name_card = F@_3, level = F@_4, exp = F@_5};
dfp_read_field_def_role_st(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_role_st(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_role_st(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_role_st(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_role_st(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_role_st_role_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      16 ->
	  d_field_role_st_elf_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, TrUserData);
      26 ->
	  d_field_role_st_name_card(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, TrUserData);
      32 ->
	  d_field_role_st_level(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, TrUserData);
      40 ->
	  d_field_role_st_exp(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_role_st(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, TrUserData);
	    1 ->
		skip_64_role_st(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, TrUserData);
	    2 ->
		skip_length_delimited_role_st(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_role_st(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_role_st(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, TrUserData)
	  end
    end;
dg_read_field_def_role_st(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, _) ->
    #role_st{role_id = F@_1, elf_id = F@_2,
	     name_card = F@_3, level = F@_4, exp = F@_5}.

d_field_role_st_role_id(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_role_st_role_id(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_role_st_role_id(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_role_st(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

d_field_role_st_elf_id(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_role_st_elf_id(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_role_st_elf_id(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_role_st(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, F@_4, F@_5, TrUserData).

d_field_role_st_name_card(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_role_st_name_card(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_role_st_name_card(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, Prev, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_name_card_st(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_role_st(RestF, 0, 0, F@_1, F@_2,
			       if Prev == undefined -> NewFValue;
				  true ->
				      merge_msg_name_card_st(Prev, NewFValue,
							     TrUserData)
			       end,
			       F@_4, F@_5, TrUserData).

d_field_role_st_level(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_role_st_level(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_role_st_level(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_role_st(RestF, 0, 0, F@_1, F@_2,
			       F@_3, NewFValue, F@_5, TrUserData).

d_field_role_st_exp(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_role_st_exp(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_role_st_exp(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_role_st(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, NewFValue, TrUserData).

skip_varint_role_st(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_role_st(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, TrUserData);
skip_varint_role_st(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_role_st(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_role_st(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_role_st(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData);
skip_length_delimited_role_st(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_role_st(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_group_role_st(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_role_st(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_32_role_st(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_role_st(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_64_role_st(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_role_st(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

d_enum_team_member_state(1) -> inviting;
d_enum_team_member_state(2) -> unready;
d_enum_team_member_state(3) -> ready;
d_enum_team_member_state(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #team_member_st{} ->
	  merge_msg_team_member_st(Prev, New, TrUserData);
      #team_invite{} ->
	  merge_msg_team_invite(Prev, New, TrUserData);
      #cancel_match{} ->
	  merge_msg_cancel_match(Prev, New, TrUserData);
      #start_match{} ->
	  merge_msg_start_match(Prev, New, TrUserData);
      #match_req{} ->
	  merge_msg_match_req(Prev, New, TrUserData);
      #team_leave{} ->
	  merge_msg_team_leave(Prev, New, TrUserData);
      #team_state{} ->
	  merge_msg_team_state(Prev, New, TrUserData);
      #team_refuse{} ->
	  merge_msg_team_refuse(Prev, New, TrUserData);
      #team_accept{} ->
	  merge_msg_team_accept(Prev, New, TrUserData);
      #team_req{} ->
	  merge_msg_team_req(Prev, New, TrUserData);
      #select_magic{} ->
	  merge_msg_select_magic(Prev, New, TrUserData);
      #magic_req{} ->
	  merge_msg_magic_req(Prev, New, TrUserData);
      #rtnotify_callback{} ->
	  merge_msg_rtnotify_callback(Prev, New, TrUserData);
      #rtnotify_keepalive{} ->
	  merge_msg_rtnotify_keepalive(Prev, New, TrUserData);
      #rtnotify_register{} ->
	  merge_msg_rtnotify_register(Prev, New, TrUserData);
      #rtnotify_req{} ->
	  merge_msg_rtnotify_req(Prev, New, TrUserData);
      #lookup_role{} ->
	  merge_msg_lookup_role(Prev, New, TrUserData);
      #select_role{} ->
	  merge_msg_select_role(Prev, New, TrUserData);
      #create_role{} ->
	  merge_msg_create_role(Prev, New, TrUserData);
      #role_req{} ->
	  merge_msg_role_req(Prev, New, TrUserData);
      #login_req{} ->
	  merge_msg_login_req(Prev, New, TrUserData);
      #sdk_login_req{} ->
	  merge_msg_sdk_login_req(Prev, New, TrUserData);
      #up_msg{} -> merge_msg_up_msg(Prev, New, TrUserData);
      #role_summary_st{} ->
	  merge_msg_role_summary_st(Prev, New, TrUserData);
      #battle_team_member{} ->
	  merge_msg_battle_team_member(Prev, New, TrUserData);
      #battle_team{} ->
	  merge_msg_battle_team(Prev, New, TrUserData);
      #name_card_st{} ->
	  merge_msg_name_card_st(Prev, New, TrUserData);
      #team_info_st{} ->
	  merge_msg_team_info_st(Prev, New, TrUserData);
      #battle_stat{} ->
	  merge_msg_battle_stat(Prev, New, TrUserData);
      #role_st{} -> merge_msg_role_st(Prev, New, TrUserData)
    end.

merge_msg_team_member_st(#team_member_st{user_id =
					     PFuser_id,
					 state = PFstate, elf_id = PFelf_id,
					 name = PFname, level = PFlevel},
			 #team_member_st{user_id = NFuser_id, state = NFstate,
					 elf_id = NFelf_id, name = NFname,
					 level = NFlevel},
			 _) ->
    #team_member_st{user_id =
			if NFuser_id =:= undefined -> PFuser_id;
			   true -> NFuser_id
			end,
		    state =
			if NFstate =:= undefined -> PFstate;
			   true -> NFstate
			end,
		    elf_id =
			if NFelf_id =:= undefined -> PFelf_id;
			   true -> NFelf_id
			end,
		    name =
			if NFname =:= undefined -> PFname;
			   true -> NFname
			end,
		    level =
			if NFlevel =:= undefined -> PFlevel;
			   true -> NFlevel
			end}.

merge_msg_team_invite(#team_invite{},
		      #team_invite{role_id = NFrole_id}, _) ->
    #team_invite{role_id = NFrole_id}.

merge_msg_cancel_match(_Prev, New, _TrUserData) -> New.

merge_msg_start_match(_Prev, New, _TrUserData) -> New.

merge_msg_match_req(#match_req{start = PFstart,
			       cancel = PFcancel},
		    #match_req{start = NFstart, cancel = NFcancel},
		    TrUserData) ->
    #match_req{start =
		   if PFstart /= undefined, NFstart /= undefined ->
			  merge_msg_start_match(PFstart, NFstart, TrUserData);
		      PFstart == undefined -> NFstart;
		      NFstart == undefined -> PFstart
		   end,
	       cancel =
		   if PFcancel /= undefined, NFcancel /= undefined ->
			  merge_msg_cancel_match(PFcancel, NFcancel,
						 TrUserData);
		      PFcancel == undefined -> NFcancel;
		      NFcancel == undefined -> PFcancel
		   end}.

merge_msg_team_leave(_Prev, New, _TrUserData) -> New.

merge_msg_team_state(#team_state{},
		     #team_state{state = NFstate}, _) ->
    #team_state{state = NFstate}.

merge_msg_team_refuse(_Prev, New, _TrUserData) -> New.

merge_msg_team_accept(_Prev, New, _TrUserData) -> New.

merge_msg_team_req(#team_req{invite = PFinvite,
			     accept = PFaccept, refuse = PFrefuse,
			     state = PFstate, leave = PFleave},
		   #team_req{invite = NFinvite, accept = NFaccept,
			     refuse = NFrefuse, state = NFstate,
			     leave = NFleave},
		   TrUserData) ->
    #team_req{invite =
		  if PFinvite /= undefined, NFinvite /= undefined ->
			 merge_msg_team_invite(PFinvite, NFinvite, TrUserData);
		     PFinvite == undefined -> NFinvite;
		     NFinvite == undefined -> PFinvite
		  end,
	      accept =
		  if PFaccept /= undefined, NFaccept /= undefined ->
			 merge_msg_team_accept(PFaccept, NFaccept, TrUserData);
		     PFaccept == undefined -> NFaccept;
		     NFaccept == undefined -> PFaccept
		  end,
	      refuse =
		  if PFrefuse /= undefined, NFrefuse /= undefined ->
			 merge_msg_team_refuse(PFrefuse, NFrefuse, TrUserData);
		     PFrefuse == undefined -> NFrefuse;
		     NFrefuse == undefined -> PFrefuse
		  end,
	      state =
		  if PFstate /= undefined, NFstate /= undefined ->
			 merge_msg_team_state(PFstate, NFstate, TrUserData);
		     PFstate == undefined -> NFstate;
		     NFstate == undefined -> PFstate
		  end,
	      leave =
		  if PFleave /= undefined, NFleave /= undefined ->
			 merge_msg_team_leave(PFleave, NFleave, TrUserData);
		     PFleave == undefined -> NFleave;
		     NFleave == undefined -> PFleave
		  end}.

merge_msg_select_magic(#select_magic{},
		       #select_magic{magic_id = NFmagic_id}, _) ->
    #select_magic{magic_id = NFmagic_id}.

merge_msg_magic_req(#magic_req{select = PFselect},
		    #magic_req{select = NFselect}, TrUserData) ->
    #magic_req{select =
		   if PFselect /= undefined, NFselect /= undefined ->
			  merge_msg_select_magic(PFselect, NFselect,
						 TrUserData);
		      PFselect == undefined -> NFselect;
		      NFselect == undefined -> PFselect
		   end}.

merge_msg_rtnotify_callback(#rtnotify_callback{data =
						   PFdata},
			    #rtnotify_callback{data = NFdata}, _) ->
    #rtnotify_callback{data =
			   if NFdata =:= undefined -> PFdata;
			      true -> NFdata
			   end}.

merge_msg_rtnotify_keepalive(#rtnotify_keepalive{time =
						     PFtime},
			     #rtnotify_keepalive{time = NFtime}, _) ->
    #rtnotify_keepalive{time =
			    if NFtime =:= undefined -> PFtime;
			       true -> NFtime
			    end}.

merge_msg_rtnotify_register(#rtnotify_register{user_id =
						   PFuser_id},
			    #rtnotify_register{user_id = NFuser_id}, _) ->
    #rtnotify_register{user_id =
			   if NFuser_id =:= undefined -> PFuser_id;
			      true -> NFuser_id
			   end}.

merge_msg_rtnotify_req(#rtnotify_req{register =
					 PFregister,
				     keepalive = PFkeepalive,
				     callback = PFcallback},
		       #rtnotify_req{register = NFregister,
				     keepalive = NFkeepalive,
				     callback = NFcallback},
		       TrUserData) ->
    #rtnotify_req{register =
		      if PFregister /= undefined, NFregister /= undefined ->
			     merge_msg_rtnotify_register(PFregister, NFregister,
							 TrUserData);
			 PFregister == undefined -> NFregister;
			 NFregister == undefined -> PFregister
		      end,
		  keepalive =
		      if PFkeepalive /= undefined, NFkeepalive /= undefined ->
			     merge_msg_rtnotify_keepalive(PFkeepalive,
							  NFkeepalive,
							  TrUserData);
			 PFkeepalive == undefined -> NFkeepalive;
			 NFkeepalive == undefined -> PFkeepalive
		      end,
		  callback =
		      if PFcallback /= undefined, NFcallback /= undefined ->
			     merge_msg_rtnotify_callback(PFcallback, NFcallback,
							 TrUserData);
			 PFcallback == undefined -> NFcallback;
			 NFcallback == undefined -> PFcallback
		      end}.

merge_msg_lookup_role(_Prev, New, _TrUserData) -> New.

merge_msg_select_role(#select_role{},
		      #select_role{role_id = NFrole_id}, _) ->
    #select_role{role_id = NFrole_id}.

merge_msg_create_role(#create_role{},
		      #create_role{role_cid = NFrole_cid}, _) ->
    #create_role{role_cid = NFrole_cid}.

merge_msg_role_req(#role_req{create = PFcreate,
			     select = PFselect, lookup = PFlookup},
		   #role_req{create = NFcreate, select = NFselect,
			     lookup = NFlookup},
		   TrUserData) ->
    #role_req{create =
		  if PFcreate /= undefined, NFcreate /= undefined ->
			 merge_msg_create_role(PFcreate, NFcreate, TrUserData);
		     PFcreate == undefined -> NFcreate;
		     NFcreate == undefined -> PFcreate
		  end,
	      select =
		  if PFselect /= undefined, NFselect /= undefined ->
			 merge_msg_select_role(PFselect, NFselect, TrUserData);
		     PFselect == undefined -> NFselect;
		     NFselect == undefined -> PFselect
		  end,
	      lookup =
		  if PFlookup /= undefined, NFlookup /= undefined ->
			 merge_msg_lookup_role(PFlookup, NFlookup, TrUserData);
		     PFlookup == undefined -> NFlookup;
		     NFlookup == undefined -> PFlookup
		  end}.

merge_msg_login_req(#login_req{},
		    #login_req{device_id = NFdevice_id,
			       version = NFversion},
		    _) ->
    #login_req{device_id = NFdevice_id,
	       version = NFversion}.

merge_msg_sdk_login_req(_Prev, New, _TrUserData) -> New.

merge_msg_up_msg(#up_msg{sdk_login = PFsdk_login,
			 login = PFlogin, role = PFrole, rtnotify = PFrtnotify,
			 magic = PFmagic, team = PFteam, match = PFmatch},
		 #up_msg{sequence = NFsequence, repeat = NFrepeat,
			 user_id = NFuser_id, role_id = NFrole_id,
			 sdk_login = NFsdk_login, login = NFlogin,
			 role = NFrole, rtnotify = NFrtnotify, magic = NFmagic,
			 team = NFteam, match = NFmatch},
		 TrUserData) ->
    #up_msg{sequence = NFsequence, repeat = NFrepeat,
	    user_id = NFuser_id, role_id = NFrole_id,
	    sdk_login =
		if PFsdk_login /= undefined, NFsdk_login /= undefined ->
		       merge_msg_sdk_login_req(PFsdk_login, NFsdk_login,
					       TrUserData);
		   PFsdk_login == undefined -> NFsdk_login;
		   NFsdk_login == undefined -> PFsdk_login
		end,
	    login =
		if PFlogin /= undefined, NFlogin /= undefined ->
		       merge_msg_login_req(PFlogin, NFlogin, TrUserData);
		   PFlogin == undefined -> NFlogin;
		   NFlogin == undefined -> PFlogin
		end,
	    role =
		if PFrole /= undefined, NFrole /= undefined ->
		       merge_msg_role_req(PFrole, NFrole, TrUserData);
		   PFrole == undefined -> NFrole;
		   NFrole == undefined -> PFrole
		end,
	    rtnotify =
		if PFrtnotify /= undefined, NFrtnotify /= undefined ->
		       merge_msg_rtnotify_req(PFrtnotify, NFrtnotify,
					      TrUserData);
		   PFrtnotify == undefined -> NFrtnotify;
		   NFrtnotify == undefined -> PFrtnotify
		end,
	    magic =
		if PFmagic /= undefined, NFmagic /= undefined ->
		       merge_msg_magic_req(PFmagic, NFmagic, TrUserData);
		   PFmagic == undefined -> NFmagic;
		   NFmagic == undefined -> PFmagic
		end,
	    team =
		if PFteam /= undefined, NFteam /= undefined ->
		       merge_msg_team_req(PFteam, NFteam, TrUserData);
		   PFteam == undefined -> NFteam;
		   NFteam == undefined -> PFteam
		end,
	    match =
		if PFmatch /= undefined, NFmatch /= undefined ->
		       merge_msg_match_req(PFmatch, NFmatch, TrUserData);
		   PFmatch == undefined -> NFmatch;
		   NFmatch == undefined -> PFmatch
		end}.

merge_msg_role_summary_st(#role_summary_st{role_id =
					       PFrole_id,
					   elf_id = PFelf_id, name = PFname,
					   level = PFlevel},
			  #role_summary_st{role_id = NFrole_id,
					   elf_id = NFelf_id, name = NFname,
					   level = NFlevel},
			  _) ->
    #role_summary_st{role_id =
			 if NFrole_id =:= undefined -> PFrole_id;
			    true -> NFrole_id
			 end,
		     elf_id =
			 if NFelf_id =:= undefined -> PFelf_id;
			    true -> NFelf_id
			 end,
		     name =
			 if NFname =:= undefined -> PFname;
			    true -> NFname
			 end,
		     level =
			 if NFlevel =:= undefined -> PFlevel;
			    true -> NFlevel
			 end}.

merge_msg_battle_team_member(#battle_team_member{role_id
						     = PFrole_id,
						 elf_id = PFelf_id,
						 name = PFname, level = PFlevel,
						 team_id = PFteam_id},
			     #battle_team_member{role_id = NFrole_id,
						 elf_id = NFelf_id,
						 name = NFname, level = NFlevel,
						 team_id = NFteam_id},
			     _) ->
    #battle_team_member{role_id =
			    if NFrole_id =:= undefined -> PFrole_id;
			       true -> NFrole_id
			    end,
			elf_id =
			    if NFelf_id =:= undefined -> PFelf_id;
			       true -> NFelf_id
			    end,
			name =
			    if NFname =:= undefined -> PFname;
			       true -> NFname
			    end,
			level =
			    if NFlevel =:= undefined -> PFlevel;
			       true -> NFlevel
			    end,
			team_id =
			    if NFteam_id =:= undefined -> PFteam_id;
			       true -> NFteam_id
			    end}.

merge_msg_battle_team(#battle_team{members = PFmembers},
		      #battle_team{members = NFmembers}, TrUserData) ->
    #battle_team{members =
		     if PFmembers /= undefined, NFmembers /= undefined ->
			    'erlang_++'(PFmembers, NFmembers, TrUserData);
			PFmembers == undefined -> NFmembers;
			NFmembers == undefined -> PFmembers
		     end}.

merge_msg_name_card_st(#name_card_st{name = PFname,
				     last_set_time = PFlast_set_time},
		       #name_card_st{name = NFname,
				     last_set_time = NFlast_set_time},
		       _) ->
    #name_card_st{name =
		      if NFname =:= undefined -> PFname;
			 true -> NFname
		      end,
		  last_set_time =
		      if NFlast_set_time =:= undefined -> PFlast_set_time;
			 true -> NFlast_set_time
		      end}.

merge_msg_team_info_st(#team_info_st{members =
					 PFmembers,
				     leader_id = PFleader_id},
		       #team_info_st{members = NFmembers,
				     leader_id = NFleader_id},
		       TrUserData) ->
    #team_info_st{members =
		      if PFmembers /= undefined, NFmembers /= undefined ->
			     'erlang_++'(PFmembers, NFmembers, TrUserData);
			 PFmembers == undefined -> NFmembers;
			 NFmembers == undefined -> PFmembers
		      end,
		  leader_id =
		      if NFleader_id =:= undefined -> PFleader_id;
			 true -> NFleader_id
		      end}.

merge_msg_battle_stat(_Prev, New, _TrUserData) -> New.

merge_msg_role_st(#role_st{role_id = PFrole_id,
			   elf_id = PFelf_id, name_card = PFname_card,
			   level = PFlevel, exp = PFexp},
		  #role_st{role_id = NFrole_id, elf_id = NFelf_id,
			   name_card = NFname_card, level = NFlevel,
			   exp = NFexp},
		  TrUserData) ->
    #role_st{role_id =
		 if NFrole_id =:= undefined -> PFrole_id;
		    true -> NFrole_id
		 end,
	     elf_id =
		 if NFelf_id =:= undefined -> PFelf_id;
		    true -> NFelf_id
		 end,
	     name_card =
		 if PFname_card /= undefined, NFname_card /= undefined ->
			merge_msg_name_card_st(PFname_card, NFname_card,
					       TrUserData);
		    PFname_card == undefined -> NFname_card;
		    NFname_card == undefined -> PFname_card
		 end,
	     level =
		 if NFlevel =:= undefined -> PFlevel;
		    true -> NFlevel
		 end,
	     exp =
		 if NFexp =:= undefined -> PFexp;
		    true -> NFexp
		 end}.


verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #team_member_st{} ->
	  v_msg_team_member_st(Msg, [team_member_st], TrUserData);
      #team_invite{} ->
	  v_msg_team_invite(Msg, [team_invite], TrUserData);
      #cancel_match{} ->
	  v_msg_cancel_match(Msg, [cancel_match], TrUserData);
      #start_match{} ->
	  v_msg_start_match(Msg, [start_match], TrUserData);
      #match_req{} ->
	  v_msg_match_req(Msg, [match_req], TrUserData);
      #team_leave{} ->
	  v_msg_team_leave(Msg, [team_leave], TrUserData);
      #team_state{} ->
	  v_msg_team_state(Msg, [team_state], TrUserData);
      #team_refuse{} ->
	  v_msg_team_refuse(Msg, [team_refuse], TrUserData);
      #team_accept{} ->
	  v_msg_team_accept(Msg, [team_accept], TrUserData);
      #team_req{} ->
	  v_msg_team_req(Msg, [team_req], TrUserData);
      #select_magic{} ->
	  v_msg_select_magic(Msg, [select_magic], TrUserData);
      #magic_req{} ->
	  v_msg_magic_req(Msg, [magic_req], TrUserData);
      #rtnotify_callback{} ->
	  v_msg_rtnotify_callback(Msg, [rtnotify_callback],
				  TrUserData);
      #rtnotify_keepalive{} ->
	  v_msg_rtnotify_keepalive(Msg, [rtnotify_keepalive],
				   TrUserData);
      #rtnotify_register{} ->
	  v_msg_rtnotify_register(Msg, [rtnotify_register],
				  TrUserData);
      #rtnotify_req{} ->
	  v_msg_rtnotify_req(Msg, [rtnotify_req], TrUserData);
      #lookup_role{} ->
	  v_msg_lookup_role(Msg, [lookup_role], TrUserData);
      #select_role{} ->
	  v_msg_select_role(Msg, [select_role], TrUserData);
      #create_role{} ->
	  v_msg_create_role(Msg, [create_role], TrUserData);
      #role_req{} ->
	  v_msg_role_req(Msg, [role_req], TrUserData);
      #login_req{} ->
	  v_msg_login_req(Msg, [login_req], TrUserData);
      #sdk_login_req{} ->
	  v_msg_sdk_login_req(Msg, [sdk_login_req], TrUserData);
      #up_msg{} -> v_msg_up_msg(Msg, [up_msg], TrUserData);
      #role_summary_st{} ->
	  v_msg_role_summary_st(Msg, [role_summary_st],
				TrUserData);
      #battle_team_member{} ->
	  v_msg_battle_team_member(Msg, [battle_team_member],
				   TrUserData);
      #battle_team{} ->
	  v_msg_battle_team(Msg, [battle_team], TrUserData);
      #name_card_st{} ->
	  v_msg_name_card_st(Msg, [name_card_st], TrUserData);
      #team_info_st{} ->
	  v_msg_team_info_st(Msg, [team_info_st], TrUserData);
      #battle_stat{} ->
	  v_msg_battle_stat(Msg, [battle_stat], TrUserData);
      #role_st{} -> v_msg_role_st(Msg, [role_st], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_team_member_st/3}).
v_msg_team_member_st(#team_member_st{user_id = F1,
				     state = F2, elf_id = F3, name = F4,
				     level = F5},
		     Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [user_id | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_enum_team_member_state(F2, [state | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [elf_id | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [name | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [level | Path])
    end,
    ok;
v_msg_team_member_st(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, team_member_st}, X, Path).

-dialyzer({nowarn_function,v_msg_team_invite/3}).
v_msg_team_invite(#team_invite{role_id = F1}, Path,
		  _) ->
    v_type_uint32(F1, [role_id | Path]), ok;
v_msg_team_invite(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, team_invite}, X, Path).

-dialyzer({nowarn_function,v_msg_cancel_match/3}).
v_msg_cancel_match(#cancel_match{}, _Path, _) -> ok;
v_msg_cancel_match(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, cancel_match}, X, Path).

-dialyzer({nowarn_function,v_msg_start_match/3}).
v_msg_start_match(#start_match{}, _Path, _) -> ok;
v_msg_start_match(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, start_match}, X, Path).

-dialyzer({nowarn_function,v_msg_match_req/3}).
v_msg_match_req(#match_req{start = F1, cancel = F2},
		Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_start_match(F1, [start | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_cancel_match(F2, [cancel | Path], TrUserData)
    end,
    ok;
v_msg_match_req(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, match_req}, X, Path).

-dialyzer({nowarn_function,v_msg_team_leave/3}).
v_msg_team_leave(#team_leave{}, _Path, _) -> ok;
v_msg_team_leave(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, team_leave}, X, Path).

-dialyzer({nowarn_function,v_msg_team_state/3}).
v_msg_team_state(#team_state{state = F1}, Path, _) ->
    v_enum_team_member_state(F1, [state | Path]), ok;
v_msg_team_state(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, team_state}, X, Path).

-dialyzer({nowarn_function,v_msg_team_refuse/3}).
v_msg_team_refuse(#team_refuse{}, _Path, _) -> ok;
v_msg_team_refuse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, team_refuse}, X, Path).

-dialyzer({nowarn_function,v_msg_team_accept/3}).
v_msg_team_accept(#team_accept{}, _Path, _) -> ok;
v_msg_team_accept(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, team_accept}, X, Path).

-dialyzer({nowarn_function,v_msg_team_req/3}).
v_msg_team_req(#team_req{invite = F1, accept = F2,
			 refuse = F3, state = F4, leave = F5},
	       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_team_invite(F1, [invite | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_team_accept(F2, [accept | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_team_refuse(F3, [refuse | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_msg_team_state(F4, [state | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_msg_team_leave(F5, [leave | Path], TrUserData)
    end,
    ok;
v_msg_team_req(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, team_req}, X, Path).

-dialyzer({nowarn_function,v_msg_select_magic/3}).
v_msg_select_magic(#select_magic{magic_id = F1}, Path,
		   _) ->
    v_type_uint32(F1, [magic_id | Path]), ok;
v_msg_select_magic(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, select_magic}, X, Path).

-dialyzer({nowarn_function,v_msg_magic_req/3}).
v_msg_magic_req(#magic_req{select = F1}, Path,
		TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_select_magic(F1, [select | Path], TrUserData)
    end,
    ok;
v_msg_magic_req(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, magic_req}, X, Path).

-dialyzer({nowarn_function,v_msg_rtnotify_callback/3}).
v_msg_rtnotify_callback(#rtnotify_callback{data = F1},
			Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [data | Path])
    end,
    ok;
v_msg_rtnotify_callback(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, rtnotify_callback}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_rtnotify_keepalive/3}).
v_msg_rtnotify_keepalive(#rtnotify_keepalive{time = F1},
			 Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [time | Path])
    end,
    ok;
v_msg_rtnotify_keepalive(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, rtnotify_keepalive}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_rtnotify_register/3}).
v_msg_rtnotify_register(#rtnotify_register{user_id =
					       F1},
			Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [user_id | Path])
    end,
    ok;
v_msg_rtnotify_register(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, rtnotify_register}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_rtnotify_req/3}).
v_msg_rtnotify_req(#rtnotify_req{register = F1,
				 keepalive = F2, callback = F3},
		   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_rtnotify_register(F1, [register | Path],
				   TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_rtnotify_keepalive(F2, [keepalive | Path],
				    TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_rtnotify_callback(F3, [callback | Path],
				   TrUserData)
    end,
    ok;
v_msg_rtnotify_req(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, rtnotify_req}, X, Path).

-dialyzer({nowarn_function,v_msg_lookup_role/3}).
v_msg_lookup_role(#lookup_role{}, _Path, _) -> ok;
v_msg_lookup_role(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, lookup_role}, X, Path).

-dialyzer({nowarn_function,v_msg_select_role/3}).
v_msg_select_role(#select_role{role_id = F1}, Path,
		  _) ->
    v_type_uint32(F1, [role_id | Path]), ok;
v_msg_select_role(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, select_role}, X, Path).

-dialyzer({nowarn_function,v_msg_create_role/3}).
v_msg_create_role(#create_role{role_cid = F1}, Path,
		  _) ->
    v_type_uint32(F1, [role_cid | Path]), ok;
v_msg_create_role(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, create_role}, X, Path).

-dialyzer({nowarn_function,v_msg_role_req/3}).
v_msg_role_req(#role_req{create = F1, select = F2,
			 lookup = F3},
	       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_create_role(F1, [create | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_select_role(F2, [select | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_lookup_role(F3, [lookup | Path], TrUserData)
    end,
    ok;
v_msg_role_req(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, role_req}, X, Path).

-dialyzer({nowarn_function,v_msg_login_req/3}).
v_msg_login_req(#login_req{device_id = F1,
			   version = F2},
		Path, _) ->
    v_type_string(F1, [device_id | Path]),
    v_type_string(F2, [version | Path]),
    ok;
v_msg_login_req(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, login_req}, X, Path).

-dialyzer({nowarn_function,v_msg_sdk_login_req/3}).
v_msg_sdk_login_req(#sdk_login_req{}, _Path, _) -> ok;
v_msg_sdk_login_req(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, sdk_login_req}, X, Path).

-dialyzer({nowarn_function,v_msg_up_msg/3}).
v_msg_up_msg(#up_msg{sequence = F1, repeat = F2,
		     user_id = F3, role_id = F4, sdk_login = F5, login = F6,
		     role = F7, rtnotify = F8, magic = F9, team = F10,
		     match = F11},
	     Path, TrUserData) ->
    v_type_uint32(F1, [sequence | Path]),
    v_type_bool(F2, [repeat | Path]),
    v_type_uint32(F3, [user_id | Path]),
    v_type_uint32(F4, [role_id | Path]),
    if F5 == undefined -> ok;
       true ->
	   v_msg_sdk_login_req(F5, [sdk_login | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_msg_login_req(F6, [login | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_msg_role_req(F7, [role | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true ->
	   v_msg_rtnotify_req(F8, [rtnotify | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_msg_magic_req(F9, [magic | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true -> v_msg_team_req(F10, [team | Path], TrUserData)
    end,
    if F11 == undefined -> ok;
       true -> v_msg_match_req(F11, [match | Path], TrUserData)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_role_summary_st/3}).
v_msg_role_summary_st(#role_summary_st{role_id = F1,
				       elf_id = F2, name = F3, level = F4},
		      Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [role_id | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [elf_id | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [name | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [level | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_battle_team_member/3}).
v_msg_battle_team_member(#battle_team_member{role_id =
						 F1,
					     elf_id = F2, name = F3, level = F4,
					     team_id = F5},
			 Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [role_id | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [elf_id | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [name | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [level | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [team_id | Path])
    end,
    ok;
v_msg_battle_team_member(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, battle_team_member}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_battle_team/3}).
v_msg_battle_team(#battle_team{members = F1}, Path,
		  TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_battle_team_member(Elem, [members | Path],
					 TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, battle_team_member}},
			 F1, [members | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_name_card_st/3}).
v_msg_name_card_st(#name_card_st{name = F1,
				 last_set_time = F2},
		   Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [name | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [last_set_time | Path])
    end,
    ok;
v_msg_name_card_st(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, name_card_st}, X, Path).

-dialyzer({nowarn_function,v_msg_team_info_st/3}).
v_msg_team_info_st(#team_info_st{members = F1,
				 leader_id = F2},
		   Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_team_member_st(Elem, [members | Path],
				     TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, team_member_st}},
			 F1, [members | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [leader_id | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_battle_stat/3}).
v_msg_battle_stat(#battle_stat{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_role_st/3}).
v_msg_role_st(#role_st{role_id = F1, elf_id = F2,
		       name_card = F3, level = F4, exp = F5},
	      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [role_id | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [elf_id | Path])
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_name_card_st(F3, [name_card | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [level | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [exp | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_enum_team_member_state/2}).
v_enum_team_member_state(inviting, _Path) -> ok;
v_enum_team_member_state(unready, _Path) -> ok;
v_enum_team_member_state(ready, _Path) -> ok;
v_enum_team_member_state(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
v_enum_team_member_state(X, Path) ->
    mk_type_error({invalid_enum, team_member_state}, X,
		  Path).

-dialyzer({nowarn_function,v_type_sint32/2}).
v_type_sint32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_uint32/2}).
v_type_uint32(N, _Path) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_bool/2}).
v_type_bool(false, _Path) -> ok;
v_type_bool(true, _Path) -> ok;
v_type_bool(0, _Path) -> ok;
v_type_bool(1, _Path) -> ok;
v_type_bool(X, Path) ->
    mk_type_error(bad_boolean_value, X, Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).


-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{enum, team_member_state},
      [{inviting, 1}, {unready, 2}, {ready, 3}]},
     {{msg, team_member_st},
      [#field{name = user_id, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = state, fnum = 2, rnum = 3,
	      type = {enum, team_member_state}, occurrence = optional,
	      opts = []},
       #field{name = elf_id, fnum = 3, rnum = 4, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = name, fnum = 4, rnum = 5, type = string,
	      occurrence = optional, opts = []},
       #field{name = level, fnum = 5, rnum = 6, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, team_invite},
      [#field{name = role_id, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []}]},
     {{msg, cancel_match}, []}, {{msg, start_match}, []},
     {{msg, match_req},
      [#field{name = start, fnum = 1, rnum = 2,
	      type = {msg, start_match}, occurrence = optional,
	      opts = []},
       #field{name = cancel, fnum = 2, rnum = 3,
	      type = {msg, cancel_match}, occurrence = optional,
	      opts = []}]},
     {{msg, team_leave}, []},
     {{msg, team_state},
      [#field{name = state, fnum = 1, rnum = 2,
	      type = {enum, team_member_state}, occurrence = required,
	      opts = []}]},
     {{msg, team_refuse}, []}, {{msg, team_accept}, []},
     {{msg, team_req},
      [#field{name = invite, fnum = 1, rnum = 2,
	      type = {msg, team_invite}, occurrence = optional,
	      opts = []},
       #field{name = accept, fnum = 2, rnum = 3,
	      type = {msg, team_accept}, occurrence = optional,
	      opts = []},
       #field{name = refuse, fnum = 3, rnum = 4,
	      type = {msg, team_refuse}, occurrence = optional,
	      opts = []},
       #field{name = state, fnum = 4, rnum = 5,
	      type = {msg, team_state}, occurrence = optional,
	      opts = []},
       #field{name = leave, fnum = 5, rnum = 6,
	      type = {msg, team_leave}, occurrence = optional,
	      opts = []}]},
     {{msg, select_magic},
      [#field{name = magic_id, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []}]},
     {{msg, magic_req},
      [#field{name = select, fnum = 1, rnum = 2,
	      type = {msg, select_magic}, occurrence = optional,
	      opts = []}]},
     {{msg, rtnotify_callback},
      [#field{name = data, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, rtnotify_keepalive},
      [#field{name = time, fnum = 1, rnum = 2, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, rtnotify_register},
      [#field{name = user_id, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, rtnotify_req},
      [#field{name = register, fnum = 1, rnum = 2,
	      type = {msg, rtnotify_register}, occurrence = optional,
	      opts = []},
       #field{name = keepalive, fnum = 2, rnum = 3,
	      type = {msg, rtnotify_keepalive}, occurrence = optional,
	      opts = []},
       #field{name = callback, fnum = 3, rnum = 4,
	      type = {msg, rtnotify_callback}, occurrence = optional,
	      opts = []}]},
     {{msg, lookup_role}, []},
     {{msg, select_role},
      [#field{name = role_id, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []}]},
     {{msg, create_role},
      [#field{name = role_cid, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []}]},
     {{msg, role_req},
      [#field{name = create, fnum = 1, rnum = 2,
	      type = {msg, create_role}, occurrence = optional,
	      opts = []},
       #field{name = select, fnum = 2, rnum = 3,
	      type = {msg, select_role}, occurrence = optional,
	      opts = []},
       #field{name = lookup, fnum = 3, rnum = 4,
	      type = {msg, lookup_role}, occurrence = optional,
	      opts = []}]},
     {{msg, login_req},
      [#field{name = device_id, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = version, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []}]},
     {{msg, sdk_login_req}, []},
     {{msg, up_msg},
      [#field{name = sequence, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = repeat, fnum = 2, rnum = 3, type = bool,
	      occurrence = required, opts = []},
       #field{name = user_id, fnum = 3, rnum = 4,
	      type = uint32, occurrence = required, opts = []},
       #field{name = role_id, fnum = 4, rnum = 5,
	      type = uint32, occurrence = required, opts = []},
       #field{name = sdk_login, fnum = 5, rnum = 6,
	      type = {msg, sdk_login_req}, occurrence = optional,
	      opts = []},
       #field{name = login, fnum = 6, rnum = 7,
	      type = {msg, login_req}, occurrence = optional,
	      opts = []},
       #field{name = role, fnum = 7, rnum = 8,
	      type = {msg, role_req}, occurrence = optional,
	      opts = []},
       #field{name = rtnotify, fnum = 8, rnum = 9,
	      type = {msg, rtnotify_req}, occurrence = optional,
	      opts = []},
       #field{name = magic, fnum = 9, rnum = 10,
	      type = {msg, magic_req}, occurrence = optional,
	      opts = []},
       #field{name = team, fnum = 10, rnum = 11,
	      type = {msg, team_req}, occurrence = optional,
	      opts = []},
       #field{name = match, fnum = 11, rnum = 12,
	      type = {msg, match_req}, occurrence = optional,
	      opts = []}]},
     {{msg, role_summary_st},
      [#field{name = role_id, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = elf_id, fnum = 2, rnum = 3, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = name, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []},
       #field{name = level, fnum = 4, rnum = 5, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, battle_team_member},
      [#field{name = role_id, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = elf_id, fnum = 2, rnum = 3, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = name, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []},
       #field{name = level, fnum = 4, rnum = 5, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = team_id, fnum = 5, rnum = 6,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, battle_team},
      [#field{name = members, fnum = 1, rnum = 2,
	      type = {msg, battle_team_member}, occurrence = repeated,
	      opts = []}]},
     {{msg, name_card_st},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = last_set_time, fnum = 2, rnum = 3,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, team_info_st},
      [#field{name = members, fnum = 1, rnum = 2,
	      type = {msg, team_member_st}, occurrence = repeated,
	      opts = []},
       #field{name = leader_id, fnum = 2, rnum = 3,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, battle_stat}, []},
     {{msg, role_st},
      [#field{name = role_id, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = elf_id, fnum = 2, rnum = 3, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = name_card, fnum = 3, rnum = 4,
	      type = {msg, name_card_st}, occurrence = optional,
	      opts = []},
       #field{name = level, fnum = 4, rnum = 5, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = exp, fnum = 5, rnum = 6, type = uint32,
	      occurrence = optional, opts = []}]}].


get_msg_names() ->
    [team_member_st, team_invite, cancel_match, start_match,
     match_req, team_leave, team_state, team_refuse,
     team_accept, team_req, select_magic, magic_req,
     rtnotify_callback, rtnotify_keepalive,
     rtnotify_register, rtnotify_req, lookup_role,
     select_role, create_role, role_req, login_req,
     sdk_login_req, up_msg, role_summary_st,
     battle_team_member, battle_team, name_card_st,
     team_info_st, battle_stat, role_st].


get_group_names() -> [].


get_msg_or_group_names() ->
    [team_member_st, team_invite, cancel_match, start_match,
     match_req, team_leave, team_state, team_refuse,
     team_accept, team_req, select_magic, magic_req,
     rtnotify_callback, rtnotify_keepalive,
     rtnotify_register, rtnotify_req, lookup_role,
     select_role, create_role, role_req, login_req,
     sdk_login_req, up_msg, role_summary_st,
     battle_team_member, battle_team, name_card_st,
     team_info_st, battle_stat, role_st].


get_enum_names() -> [team_member_state].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(team_member_st) ->
    [#field{name = user_id, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = state, fnum = 2, rnum = 3,
	    type = {enum, team_member_state}, occurrence = optional,
	    opts = []},
     #field{name = elf_id, fnum = 3, rnum = 4, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = name, fnum = 4, rnum = 5, type = string,
	    occurrence = optional, opts = []},
     #field{name = level, fnum = 5, rnum = 6, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def(team_invite) ->
    [#field{name = role_id, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []}];
find_msg_def(cancel_match) -> [];
find_msg_def(start_match) -> [];
find_msg_def(match_req) ->
    [#field{name = start, fnum = 1, rnum = 2,
	    type = {msg, start_match}, occurrence = optional,
	    opts = []},
     #field{name = cancel, fnum = 2, rnum = 3,
	    type = {msg, cancel_match}, occurrence = optional,
	    opts = []}];
find_msg_def(team_leave) -> [];
find_msg_def(team_state) ->
    [#field{name = state, fnum = 1, rnum = 2,
	    type = {enum, team_member_state}, occurrence = required,
	    opts = []}];
find_msg_def(team_refuse) -> [];
find_msg_def(team_accept) -> [];
find_msg_def(team_req) ->
    [#field{name = invite, fnum = 1, rnum = 2,
	    type = {msg, team_invite}, occurrence = optional,
	    opts = []},
     #field{name = accept, fnum = 2, rnum = 3,
	    type = {msg, team_accept}, occurrence = optional,
	    opts = []},
     #field{name = refuse, fnum = 3, rnum = 4,
	    type = {msg, team_refuse}, occurrence = optional,
	    opts = []},
     #field{name = state, fnum = 4, rnum = 5,
	    type = {msg, team_state}, occurrence = optional,
	    opts = []},
     #field{name = leave, fnum = 5, rnum = 6,
	    type = {msg, team_leave}, occurrence = optional,
	    opts = []}];
find_msg_def(select_magic) ->
    [#field{name = magic_id, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []}];
find_msg_def(magic_req) ->
    [#field{name = select, fnum = 1, rnum = 2,
	    type = {msg, select_magic}, occurrence = optional,
	    opts = []}];
find_msg_def(rtnotify_callback) ->
    [#field{name = data, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []}];
find_msg_def(rtnotify_keepalive) ->
    [#field{name = time, fnum = 1, rnum = 2, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def(rtnotify_register) ->
    [#field{name = user_id, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def(rtnotify_req) ->
    [#field{name = register, fnum = 1, rnum = 2,
	    type = {msg, rtnotify_register}, occurrence = optional,
	    opts = []},
     #field{name = keepalive, fnum = 2, rnum = 3,
	    type = {msg, rtnotify_keepalive}, occurrence = optional,
	    opts = []},
     #field{name = callback, fnum = 3, rnum = 4,
	    type = {msg, rtnotify_callback}, occurrence = optional,
	    opts = []}];
find_msg_def(lookup_role) -> [];
find_msg_def(select_role) ->
    [#field{name = role_id, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []}];
find_msg_def(create_role) ->
    [#field{name = role_cid, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []}];
find_msg_def(role_req) ->
    [#field{name = create, fnum = 1, rnum = 2,
	    type = {msg, create_role}, occurrence = optional,
	    opts = []},
     #field{name = select, fnum = 2, rnum = 3,
	    type = {msg, select_role}, occurrence = optional,
	    opts = []},
     #field{name = lookup, fnum = 3, rnum = 4,
	    type = {msg, lookup_role}, occurrence = optional,
	    opts = []}];
find_msg_def(login_req) ->
    [#field{name = device_id, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = version, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []}];
find_msg_def(sdk_login_req) -> [];
find_msg_def(up_msg) ->
    [#field{name = sequence, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = repeat, fnum = 2, rnum = 3, type = bool,
	    occurrence = required, opts = []},
     #field{name = user_id, fnum = 3, rnum = 4,
	    type = uint32, occurrence = required, opts = []},
     #field{name = role_id, fnum = 4, rnum = 5,
	    type = uint32, occurrence = required, opts = []},
     #field{name = sdk_login, fnum = 5, rnum = 6,
	    type = {msg, sdk_login_req}, occurrence = optional,
	    opts = []},
     #field{name = login, fnum = 6, rnum = 7,
	    type = {msg, login_req}, occurrence = optional,
	    opts = []},
     #field{name = role, fnum = 7, rnum = 8,
	    type = {msg, role_req}, occurrence = optional,
	    opts = []},
     #field{name = rtnotify, fnum = 8, rnum = 9,
	    type = {msg, rtnotify_req}, occurrence = optional,
	    opts = []},
     #field{name = magic, fnum = 9, rnum = 10,
	    type = {msg, magic_req}, occurrence = optional,
	    opts = []},
     #field{name = team, fnum = 10, rnum = 11,
	    type = {msg, team_req}, occurrence = optional,
	    opts = []},
     #field{name = match, fnum = 11, rnum = 12,
	    type = {msg, match_req}, occurrence = optional,
	    opts = []}];
find_msg_def(role_summary_st) ->
    [#field{name = role_id, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = elf_id, fnum = 2, rnum = 3, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = name, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []},
     #field{name = level, fnum = 4, rnum = 5, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def(battle_team_member) ->
    [#field{name = role_id, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = elf_id, fnum = 2, rnum = 3, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = name, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []},
     #field{name = level, fnum = 4, rnum = 5, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = team_id, fnum = 5, rnum = 6,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def(battle_team) ->
    [#field{name = members, fnum = 1, rnum = 2,
	    type = {msg, battle_team_member}, occurrence = repeated,
	    opts = []}];
find_msg_def(name_card_st) ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = last_set_time, fnum = 2, rnum = 3,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def(team_info_st) ->
    [#field{name = members, fnum = 1, rnum = 2,
	    type = {msg, team_member_st}, occurrence = repeated,
	    opts = []},
     #field{name = leader_id, fnum = 2, rnum = 3,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def(battle_stat) -> [];
find_msg_def(role_st) ->
    [#field{name = role_id, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = elf_id, fnum = 2, rnum = 3, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = name_card, fnum = 3, rnum = 4,
	    type = {msg, name_card_st}, occurrence = optional,
	    opts = []},
     #field{name = level, fnum = 4, rnum = 5, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = exp, fnum = 5, rnum = 6, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def(team_member_state) ->
    [{inviting, 1}, {unready, 2}, {ready, 3}];
find_enum_def(_) -> error.


enum_symbol_by_value(team_member_state, Value) ->
    enum_symbol_by_value_team_member_state(Value).


enum_value_by_symbol(team_member_state, Sym) ->
    enum_value_by_symbol_team_member_state(Sym).


enum_symbol_by_value_team_member_state(1) -> inviting;
enum_symbol_by_value_team_member_state(2) -> unready;
enum_symbol_by_value_team_member_state(3) -> ready.


enum_value_by_symbol_team_member_state(inviting) -> 1;
enum_value_by_symbol_team_member_state(unready) -> 2;
enum_value_by_symbol_team_member_state(ready) -> 3.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "4.0.1".

gpb_version_as_list() ->
    [4,0,1].
