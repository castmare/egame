%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.0.1
-module(common_pb).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_team_member_state/1, enum_value_by_symbol_team_member_state/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("common_pb.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'team_member_state'() :: 'inviting' | 'unready' | 'ready'.
-export_type(['team_member_state'/0]).

%% message types
-type battle_team_member() :: #battle_team_member{}.
-type team_member_st() :: #team_member_st{}.
-type team_info_st() :: #team_info_st{}.
-type name_card_st() :: #name_card_st{}.
-type role_summary_st() :: #role_summary_st{}.
-type role_st() :: #role_st{}.
-type battle_stat() :: #battle_stat{}.
-type battle_team() :: #battle_team{}.
-export_type(['battle_team_member'/0, 'team_member_st'/0, 'team_info_st'/0, 'name_card_st'/0, 'role_summary_st'/0, 'role_st'/0, 'battle_stat'/0, 'battle_team'/0]).

-spec encode_msg(#battle_team_member{} | #team_member_st{} | #team_info_st{} | #name_card_st{} | #role_summary_st{} | #role_st{} | #battle_stat{} | #battle_team{}) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(#battle_team_member{} | #team_member_st{} | #team_info_st{} | #name_card_st{} | #role_summary_st{} | #role_st{} | #battle_stat{} | #battle_team{}, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #battle_team_member{} ->
	  e_msg_battle_team_member(Msg, TrUserData);
      #team_member_st{} ->
	  e_msg_team_member_st(Msg, TrUserData);
      #team_info_st{} -> e_msg_team_info_st(Msg, TrUserData);
      #name_card_st{} -> e_msg_name_card_st(Msg, TrUserData);
      #role_summary_st{} ->
	  e_msg_role_summary_st(Msg, TrUserData);
      #role_st{} -> e_msg_role_st(Msg, TrUserData);
      #battle_stat{} -> e_msg_battle_stat(Msg, TrUserData);
      #battle_team{} -> e_msg_battle_team(Msg, TrUserData)
    end.



e_msg_battle_team_member(Msg, TrUserData) ->
    e_msg_battle_team_member(Msg, <<>>, TrUserData).


e_msg_battle_team_member(#battle_team_member{role_id =
						 F1,
					     elf_id = F2, name = F3, level = F4,
					     team_id = F5},
			 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_varint(TrF1, <<Bin/binary, 8>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_varint(TrF2, <<B1/binary, 16>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_string(TrF3, <<B2/binary, 26>>)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_varint(TrF4, <<B3/binary, 32>>)
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     e_varint(TrF5, <<B4/binary, 40>>)
	   end
    end.

e_msg_team_member_st(Msg, TrUserData) ->
    e_msg_team_member_st(Msg, <<>>, TrUserData).


e_msg_team_member_st(#team_member_st{user_id = F1,
				     state = F2, elf_id = F3, name = F4,
				     level = F5},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_varint(TrF1, <<Bin/binary, 8>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_enum_team_member_state(TrF2, <<B1/binary, 16>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_varint(TrF3, <<B2/binary, 24>>)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_string(TrF4, <<B3/binary, 34>>)
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     e_varint(TrF5, <<B4/binary, 40>>)
	   end
    end.

e_msg_team_info_st(Msg, TrUserData) ->
    e_msg_team_info_st(Msg, <<>>, TrUserData).


e_msg_team_info_st(#team_info_st{members = F1,
				 leader_id = F2},
		   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  e_field_team_info_st_members(TrF1, Bin, TrUserData)
	   end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_varint(TrF2, <<B1/binary, 16>>)
	   end
    end.

e_msg_name_card_st(Msg, TrUserData) ->
    e_msg_name_card_st(Msg, <<>>, TrUserData).


e_msg_name_card_st(#name_card_st{name = F1,
				 last_set_time = F2},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_string(TrF1, <<Bin/binary, 10>>)
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_varint(TrF2, <<B1/binary, 16>>)
	   end
    end.

e_msg_role_summary_st(Msg, TrUserData) ->
    e_msg_role_summary_st(Msg, <<>>, TrUserData).


e_msg_role_summary_st(#role_summary_st{role_id = F1,
				       elf_id = F2, name = F3, level = F4},
		      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_varint(TrF1, <<Bin/binary, 8>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_varint(TrF2, <<B1/binary, 16>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_string(TrF3, <<B2/binary, 26>>)
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     e_varint(TrF4, <<B3/binary, 32>>)
	   end
    end.

e_msg_role_st(Msg, TrUserData) ->
    e_msg_role_st(Msg, <<>>, TrUserData).


e_msg_role_st(#role_st{role_id = F1, elf_id = F2,
		       name_card = F3, level = F4, exp = F5},
	      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_varint(TrF1, <<Bin/binary, 8>>)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_varint(TrF2, <<B1/binary, 16>>)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_mfield_role_st_name_card(TrF3, <<B2/binary, 26>>,
					     TrUserData)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_varint(TrF4, <<B3/binary, 32>>)
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     e_varint(TrF5, <<B4/binary, 40>>)
	   end
    end.

e_msg_battle_stat(_Msg, _TrUserData) -> <<>>.

e_msg_battle_team(Msg, TrUserData) ->
    e_msg_battle_team(Msg, <<>>, TrUserData).


e_msg_battle_team(#battle_team{members = F1}, Bin,
		  TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_battle_team_members(TrF1, Bin, TrUserData)
      end
    end.

e_mfield_team_info_st_members(Msg, Bin, TrUserData) ->
    SubBin = e_msg_team_member_st(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_team_info_st_members([Elem | Rest], Bin,
			     TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_team_info_st_members(id(Elem,
					    TrUserData),
					 Bin2, TrUserData),
    e_field_team_info_st_members(Rest, Bin3, TrUserData);
e_field_team_info_st_members([], Bin, _TrUserData) ->
    Bin.

e_mfield_role_st_name_card(Msg, Bin, TrUserData) ->
    SubBin = e_msg_name_card_st(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_battle_team_members(Msg, Bin, TrUserData) ->
    SubBin = e_msg_battle_team_member(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_battle_team_members([Elem | Rest], Bin,
			    TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_battle_team_members(id(Elem,
					   TrUserData),
					Bin2, TrUserData),
    e_field_battle_team_members(Rest, Bin3, TrUserData);
e_field_battle_team_members([], Bin, _TrUserData) ->
    Bin.

e_enum_team_member_state(inviting, Bin) ->
    <<Bin/binary, 1>>;
e_enum_team_member_state(unready, Bin) ->
    <<Bin/binary, 2>>;
e_enum_team_member_state(ready, Bin) ->
    <<Bin/binary, 3>>;
e_enum_team_member_state(V, Bin) -> e_varint(V, Bin).

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      battle_team_member ->
	  try d_msg_battle_team_member(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, battle_team_member,
			 {Class, Reason, StackTrace}}}})
	  end;
      team_member_st ->
	  try d_msg_team_member_st(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, team_member_st, {Class, Reason, StackTrace}}}})
	  end;
      team_info_st ->
	  try d_msg_team_info_st(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, team_info_st, {Class, Reason, StackTrace}}}})
	  end;
      name_card_st ->
	  try d_msg_name_card_st(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, name_card_st, {Class, Reason, StackTrace}}}})
	  end;
      role_summary_st ->
	  try d_msg_role_summary_st(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, role_summary_st, {Class, Reason, StackTrace}}}})
	  end;
      role_st ->
	  try d_msg_role_st(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, role_st, {Class, Reason, StackTrace}}}})
	  end;
      battle_stat ->
	  try d_msg_battle_stat(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, battle_stat, {Class, Reason, StackTrace}}}})
	  end;
      battle_team ->
	  try d_msg_battle_team(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, battle_team, {Class, Reason, StackTrace}}}})
	  end
    end.



d_msg_battle_team_member(Bin, TrUserData) ->
    dfp_read_field_def_battle_team_member(Bin, 0, 0,
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_battle_team_member(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    d_field_battle_team_member_role_id(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_battle_team_member(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    d_field_battle_team_member_elf_id(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_battle_team_member(<<26,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    d_field_battle_team_member_name(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_battle_team_member(<<32,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    d_field_battle_team_member_level(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_battle_team_member(<<40,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    d_field_battle_team_member_team_id(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_battle_team_member(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, _) ->
    #battle_team_member{role_id = F@_1, elf_id = F@_2,
			name = F@_3, level = F@_4, team_id = F@_5};
dfp_read_field_def_battle_team_member(Other, Z1, Z2,
				      F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    dg_read_field_def_battle_team_member(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData).

dg_read_field_def_battle_team_member(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_battle_team_member(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, TrUserData);
dg_read_field_def_battle_team_member(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_battle_team_member_role_id(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5,
					     TrUserData);
      16 ->
	  d_field_battle_team_member_elf_id(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, TrUserData);
      26 ->
	  d_field_battle_team_member_name(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, TrUserData);
      32 ->
	  d_field_battle_team_member_level(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, TrUserData);
      40 ->
	  d_field_battle_team_member_team_id(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_battle_team_member(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_battle_team_member(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_battle_team_member(Rest, 0, 0,
							 F@_1, F@_2, F@_3, F@_4,
							 F@_5, TrUserData);
	    3 ->
		skip_group_battle_team_member(Rest, Key bsr 3, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
	    5 ->
		skip_32_battle_team_member(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_battle_team_member(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, _) ->
    #battle_team_member{role_id = F@_1, elf_id = F@_2,
			name = F@_3, level = F@_4, team_id = F@_5}.

d_field_battle_team_member_role_id(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData)
    when N < 57 ->
    d_field_battle_team_member_role_id(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, TrUserData);
d_field_battle_team_member_role_id(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F@_2, F@_3, F@_4, F@_5,
				   TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_battle_team_member(RestF, 0, 0,
					  NewFValue, F@_2, F@_3, F@_4, F@_5,
					  TrUserData).

d_field_battle_team_member_elf_id(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData)
    when N < 57 ->
    d_field_battle_team_member_elf_id(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, TrUserData);
d_field_battle_team_member_elf_id(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, _, F@_3, F@_4, F@_5,
				  TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_battle_team_member(RestF, 0, 0, F@_1,
					  NewFValue, F@_3, F@_4, F@_5,
					  TrUserData).

d_field_battle_team_member_name(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 57 ->
    d_field_battle_team_member_name(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
d_field_battle_team_member_name(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, _, F@_4, F@_5,
				TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_battle_team_member(RestF, 0, 0, F@_1,
					  F@_2, NewFValue, F@_4, F@_5,
					  TrUserData).

d_field_battle_team_member_level(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 57 ->
    d_field_battle_team_member_level(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
d_field_battle_team_member_level(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, _, F@_5,
				 TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_battle_team_member(RestF, 0, 0, F@_1,
					  F@_2, F@_3, NewFValue, F@_5,
					  TrUserData).

d_field_battle_team_member_team_id(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData)
    when N < 57 ->
    d_field_battle_team_member_team_id(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, TrUserData);
d_field_battle_team_member_team_id(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, _,
				   TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_battle_team_member(RestF, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, NewFValue,
					  TrUserData).

skip_varint_battle_team_member(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData) ->
    skip_varint_battle_team_member(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData);
skip_varint_battle_team_member(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData) ->
    dfp_read_field_def_battle_team_member(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData).

skip_length_delimited_battle_team_member(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData)
    when N < 57 ->
    skip_length_delimited_battle_team_member(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, TrUserData);
skip_length_delimited_battle_team_member(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_battle_team_member(Rest2, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_battle_team_member(Bin, FNum, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_battle_team_member(Rest, 0, Z2, F@_1,
					  F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_battle_team_member(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_battle_team_member(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData).

skip_64_battle_team_member(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_battle_team_member(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData).

d_msg_team_member_st(Bin, TrUserData) ->
    dfp_read_field_def_team_member_st(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_team_member_st(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_team_member_st_user_id(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_team_member_st(<<16, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_team_member_st_state(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_team_member_st(<<24, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_team_member_st_elf_id(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_team_member_st(<<34, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_team_member_st_name(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_team_member_st(<<40, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    d_field_team_member_st_level(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_team_member_st(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, F@_4, F@_5, _) ->
    #team_member_st{user_id = F@_1, state = F@_2,
		    elf_id = F@_3, name = F@_4, level = F@_5};
dfp_read_field_def_team_member_st(Other, Z1, Z2, F@_1,
				  F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_team_member_st(Other, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_team_member_st(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_team_member_st(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
dg_read_field_def_team_member_st(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_team_member_st_user_id(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, TrUserData);
      16 ->
	  d_field_team_member_st_state(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, TrUserData);
      24 ->
	  d_field_team_member_st_elf_id(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, TrUserData);
      34 ->
	  d_field_team_member_st_name(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, TrUserData);
      40 ->
	  d_field_team_member_st_level(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_team_member_st(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_team_member_st(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_team_member_st(Rest, 0, 0, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     TrUserData);
	    3 ->
		skip_group_team_member_st(Rest, Key bsr 3, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_team_member_st(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_team_member_st(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, _) ->
    #team_member_st{user_id = F@_1, state = F@_2,
		    elf_id = F@_3, name = F@_4, level = F@_5}.

d_field_team_member_st_user_id(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_team_member_st_user_id(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData);
d_field_team_member_st_user_id(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_team_member_st(RestF, 0, 0,
				      NewFValue, F@_2, F@_3, F@_4, F@_5,
				      TrUserData).

d_field_team_member_st_state(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_team_member_st_state(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_team_member_st_state(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {d_enum_team_member_state(begin
						     <<Res:32/signed-native>> =
							 <<(X bsl N +
							      Acc):32/unsigned-native>>,
						     Res
						   end),
			  Rest},
    dfp_read_field_def_team_member_st(RestF, 0, 0, F@_1,
				      NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_team_member_st_elf_id(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_team_member_st_elf_id(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData);
d_field_team_member_st_elf_id(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_team_member_st(RestF, 0, 0, F@_1,
				      F@_2, NewFValue, F@_4, F@_5, TrUserData).

d_field_team_member_st_name(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_team_member_st_name(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_team_member_st_name(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_team_member_st(RestF, 0, 0, F@_1,
				      F@_2, F@_3, NewFValue, F@_5, TrUserData).

d_field_team_member_st_level(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_team_member_st_level(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_team_member_st_level(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_team_member_st(RestF, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, NewFValue, TrUserData).

skip_varint_team_member_st(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_team_member_st(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
skip_varint_team_member_st(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_team_member_st(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_team_member_st(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData)
    when N < 57 ->
    skip_length_delimited_team_member_st(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, TrUserData);
skip_length_delimited_team_member_st(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_team_member_st(Rest2, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_team_member_st(Bin, FNum, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_team_member_st(Rest, 0, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_team_member_st(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_team_member_st(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_team_member_st(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_team_member_st(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

d_msg_team_info_st(Bin, TrUserData) ->
    dfp_read_field_def_team_info_st(Bin, 0, 0,
				    id([], TrUserData),
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_team_info_st(<<10, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_team_info_st_members(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_team_info_st(<<16, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_team_info_st_leader_id(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
dfp_read_field_def_team_info_st(<<>>, 0, 0, R1, F@_2,
				TrUserData) ->
    #team_info_st{members = lists_reverse(R1, TrUserData),
		  leader_id = F@_2};
dfp_read_field_def_team_info_st(Other, Z1, Z2, F@_1,
				F@_2, TrUserData) ->
    dg_read_field_def_team_info_st(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData).

dg_read_field_def_team_info_st(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_team_info_st(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_team_info_st(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_team_info_st_members(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      16 ->
	  d_field_team_info_st_leader_id(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_team_info_st(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    1 ->
		skip_64_team_info_st(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    2 ->
		skip_length_delimited_team_info_st(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    3 ->
		skip_group_team_info_st(Rest, Key bsr 3, 0, F@_1, F@_2,
					TrUserData);
	    5 ->
		skip_32_team_info_st(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_team_info_st(<<>>, 0, 0, R1, F@_2,
			       TrUserData) ->
    #team_info_st{members = lists_reverse(R1, TrUserData),
		  leader_id = F@_2}.

d_field_team_info_st_members(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_team_info_st_members(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_team_info_st_members(<<0:1, X:7, Rest/binary>>,
			     N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_team_member_st(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_team_info_st(RestF, 0, 0,
				    cons(NewFValue, Prev, TrUserData), F@_2,
				    TrUserData).

d_field_team_info_st_leader_id(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_team_info_st_leader_id(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_team_info_st_leader_id(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_team_info_st(RestF, 0, 0, F@_1,
				    NewFValue, TrUserData).

skip_varint_team_info_st(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_team_info_st(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
skip_varint_team_info_st(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_team_info_st(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_length_delimited_team_info_st(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_team_info_st(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_team_info_st(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_team_info_st(Rest2, 0, 0, F@_1, F@_2,
				    TrUserData).

skip_group_team_info_st(Bin, FNum, Z2, F@_1, F@_2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_team_info_st(Rest, 0, Z2, F@_1, F@_2,
				    TrUserData).

skip_32_team_info_st(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_team_info_st(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_64_team_info_st(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_team_info_st(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

d_msg_name_card_st(Bin, TrUserData) ->
    dfp_read_field_def_name_card_st(Bin, 0, 0,
				    id(undefined, TrUserData),
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_name_card_st(<<10, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_name_card_st_name(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_name_card_st(<<16, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_name_card_st_last_set_time(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
dfp_read_field_def_name_card_st(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    #name_card_st{name = F@_1, last_set_time = F@_2};
dfp_read_field_def_name_card_st(Other, Z1, Z2, F@_1,
				F@_2, TrUserData) ->
    dg_read_field_def_name_card_st(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData).

dg_read_field_def_name_card_st(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_name_card_st(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_name_card_st(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_name_card_st_name(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      16 ->
	  d_field_name_card_st_last_set_time(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_name_card_st(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    1 ->
		skip_64_name_card_st(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    2 ->
		skip_length_delimited_name_card_st(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    3 ->
		skip_group_name_card_st(Rest, Key bsr 3, 0, F@_1, F@_2,
					TrUserData);
	    5 ->
		skip_32_name_card_st(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_name_card_st(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #name_card_st{name = F@_1, last_set_time = F@_2}.

d_field_name_card_st_name(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_name_card_st_name(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_name_card_st_name(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_name_card_st(RestF, 0, 0, NewFValue,
				    F@_2, TrUserData).

d_field_name_card_st_last_set_time(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_name_card_st_last_set_time(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_name_card_st_last_set_time(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_name_card_st(RestF, 0, 0, F@_1,
				    NewFValue, TrUserData).

skip_varint_name_card_st(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_name_card_st(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
skip_varint_name_card_st(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_name_card_st(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_length_delimited_name_card_st(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_name_card_st(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_name_card_st(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_name_card_st(Rest2, 0, 0, F@_1, F@_2,
				    TrUserData).

skip_group_name_card_st(Bin, FNum, Z2, F@_1, F@_2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_name_card_st(Rest, 0, Z2, F@_1, F@_2,
				    TrUserData).

skip_32_name_card_st(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_name_card_st(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_64_name_card_st(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_name_card_st(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

d_msg_role_summary_st(Bin, TrUserData) ->
    dfp_read_field_def_role_summary_st(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_role_summary_st(<<8, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    d_field_role_summary_st_role_id(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_role_summary_st(<<16, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    d_field_role_summary_st_elf_id(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData);
dfp_read_field_def_role_summary_st(<<26, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    d_field_role_summary_st_name(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData);
dfp_read_field_def_role_summary_st(<<32, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    d_field_role_summary_st_level(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData);
dfp_read_field_def_role_summary_st(<<>>, 0, 0, F@_1,
				   F@_2, F@_3, F@_4, _) ->
    #role_summary_st{role_id = F@_1, elf_id = F@_2,
		     name = F@_3, level = F@_4};
dfp_read_field_def_role_summary_st(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_role_summary_st(Other, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_role_summary_st(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_role_summary_st(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData);
dg_read_field_def_role_summary_st(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_role_summary_st_role_id(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, TrUserData);
      16 ->
	  d_field_role_summary_st_elf_id(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, TrUserData);
      26 ->
	  d_field_role_summary_st_name(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, TrUserData);
      32 ->
	  d_field_role_summary_st_level(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_role_summary_st(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, TrUserData);
	    1 ->
		skip_64_role_summary_st(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, TrUserData);
	    2 ->
		skip_length_delimited_role_summary_st(Rest, 0, 0, F@_1,
						      F@_2, F@_3, F@_4,
						      TrUserData);
	    3 ->
		skip_group_role_summary_st(Rest, Key bsr 3, 0, F@_1,
					   F@_2, F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_role_summary_st(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, TrUserData)
	  end
    end;
dg_read_field_def_role_summary_st(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, F@_4, _) ->
    #role_summary_st{role_id = F@_1, elf_id = F@_2,
		     name = F@_3, level = F@_4}.

d_field_role_summary_st_role_id(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_role_summary_st_role_id(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
d_field_role_summary_st_role_id(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_role_summary_st(RestF, 0, 0,
				       NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_role_summary_st_elf_id(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_role_summary_st_elf_id(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				   TrUserData);
d_field_role_summary_st_elf_id(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_role_summary_st(RestF, 0, 0, F@_1,
				       NewFValue, F@_3, F@_4, TrUserData).

d_field_role_summary_st_name(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_role_summary_st_name(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_role_summary_st_name(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {unicode:characters_to_list(Utf8, unicode), Rest2}
			 end,
    dfp_read_field_def_role_summary_st(RestF, 0, 0, F@_1,
				       F@_2, NewFValue, F@_4, TrUserData).

d_field_role_summary_st_level(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_role_summary_st_level(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
d_field_role_summary_st_level(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_role_summary_st(RestF, 0, 0, F@_1,
				       F@_2, F@_3, NewFValue, TrUserData).

skip_varint_role_summary_st(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_role_summary_st(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData);
skip_varint_role_summary_st(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_role_summary_st(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_role_summary_st(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData)
    when N < 57 ->
    skip_length_delimited_role_summary_st(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData);
skip_length_delimited_role_summary_st(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_role_summary_st(Rest2, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, TrUserData).

skip_group_role_summary_st(Bin, FNum, Z2, F@_1, F@_2,
			   F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_role_summary_st(Rest, 0, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData).

skip_32_role_summary_st(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_role_summary_st(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData).

skip_64_role_summary_st(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_role_summary_st(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData).

d_msg_role_st(Bin, TrUserData) ->
    dfp_read_field_def_role_st(Bin, 0, 0,
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_role_st(<<8, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_role_st_role_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_role_st(<<16, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_role_st_elf_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
dfp_read_field_def_role_st(<<26, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_role_st_name_card(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_role_st(<<32, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_role_st_level(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, TrUserData);
dfp_read_field_def_role_st(<<40, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_role_st_exp(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, TrUserData);
dfp_read_field_def_role_st(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, _) ->
    #role_st{role_id = F@_1, elf_id = F@_2,
	     name_card = F@_3, level = F@_4, exp = F@_5};
dfp_read_field_def_role_st(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_role_st(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_role_st(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_role_st(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_role_st(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_role_st_role_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      16 ->
	  d_field_role_st_elf_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, TrUserData);
      26 ->
	  d_field_role_st_name_card(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, TrUserData);
      32 ->
	  d_field_role_st_level(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, TrUserData);
      40 ->
	  d_field_role_st_exp(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_role_st(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, TrUserData);
	    1 ->
		skip_64_role_st(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, TrUserData);
	    2 ->
		skip_length_delimited_role_st(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_role_st(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_role_st(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, TrUserData)
	  end
    end;
dg_read_field_def_role_st(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, _) ->
    #role_st{role_id = F@_1, elf_id = F@_2,
	     name_card = F@_3, level = F@_4, exp = F@_5}.

d_field_role_st_role_id(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_role_st_role_id(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_role_st_role_id(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_role_st(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

d_field_role_st_elf_id(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_role_st_elf_id(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_role_st_elf_id(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_role_st(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, F@_4, F@_5, TrUserData).

d_field_role_st_name_card(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_role_st_name_card(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_role_st_name_card(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, Prev, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_name_card_st(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_role_st(RestF, 0, 0, F@_1, F@_2,
			       if Prev == undefined -> NewFValue;
				  true ->
				      merge_msg_name_card_st(Prev, NewFValue,
							     TrUserData)
			       end,
			       F@_4, F@_5, TrUserData).

d_field_role_st_level(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_role_st_level(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_role_st_level(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_role_st(RestF, 0, 0, F@_1, F@_2,
			       F@_3, NewFValue, F@_5, TrUserData).

d_field_role_st_exp(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_role_st_exp(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_role_st_exp(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_role_st(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, NewFValue, TrUserData).

skip_varint_role_st(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_role_st(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, TrUserData);
skip_varint_role_st(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_role_st(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_role_st(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_role_st(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData);
skip_length_delimited_role_st(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_role_st(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_group_role_st(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_role_st(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_32_role_st(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_role_st(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_64_role_st(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_role_st(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

d_msg_battle_stat(Bin, TrUserData) ->
    dfp_read_field_def_battle_stat(Bin, 0, 0, TrUserData).

dfp_read_field_def_battle_stat(<<>>, 0, 0, _) ->
    #battle_stat{};
dfp_read_field_def_battle_stat(Other, Z1, Z2,
			       TrUserData) ->
    dg_read_field_def_battle_stat(Other, Z1, Z2,
				  TrUserData).

dg_read_field_def_battle_stat(<<1:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_battle_stat(Rest, N + 7,
				  X bsl N + Acc, TrUserData);
dg_read_field_def_battle_stat(<<0:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_battle_stat(Rest, 0, 0, TrUserData);
      1 -> skip_64_battle_stat(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_battle_stat(Rest, 0, 0,
					    TrUserData);
      3 ->
	  skip_group_battle_stat(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_battle_stat(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_battle_stat(<<>>, 0, 0, _) ->
    #battle_stat{}.

skip_varint_battle_stat(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    skip_varint_battle_stat(Rest, Z1, Z2, TrUserData);
skip_varint_battle_stat(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    dfp_read_field_def_battle_stat(Rest, Z1, Z2,
				   TrUserData).

skip_length_delimited_battle_stat(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_battle_stat(Rest, N + 7,
				      X bsl N + Acc, TrUserData);
skip_length_delimited_battle_stat(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_battle_stat(Rest2, 0, 0, TrUserData).

skip_group_battle_stat(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_battle_stat(Rest, 0, Z2, TrUserData).

skip_32_battle_stat(<<_:32, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_battle_stat(Rest, Z1, Z2,
				   TrUserData).

skip_64_battle_stat(<<_:64, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_battle_stat(Rest, Z1, Z2,
				   TrUserData).

d_msg_battle_team(Bin, TrUserData) ->
    dfp_read_field_def_battle_team(Bin, 0, 0,
				   id([], TrUserData), TrUserData).

dfp_read_field_def_battle_team(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_battle_team_members(Rest, Z1, Z2, F@_1,
				TrUserData);
dfp_read_field_def_battle_team(<<>>, 0, 0, R1,
			       TrUserData) ->
    #battle_team{members = lists_reverse(R1, TrUserData)};
dfp_read_field_def_battle_team(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_battle_team(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_battle_team(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_battle_team(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_battle_team(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_battle_team_members(Rest, 0, 0, F@_1,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_battle_team(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_battle_team(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_battle_team(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_battle_team(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_battle_team(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_battle_team(<<>>, 0, 0, R1,
			      TrUserData) ->
    #battle_team{members = lists_reverse(R1, TrUserData)}.

d_field_battle_team_members(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_battle_team_members(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
d_field_battle_team_members(<<0:1, X:7, Rest/binary>>,
			    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_battle_team_member(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_battle_team(RestF, 0, 0,
				   cons(NewFValue, Prev, TrUserData),
				   TrUserData).

skip_varint_battle_team(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_battle_team(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_battle_team(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_battle_team(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_battle_team(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_battle_team(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_battle_team(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_battle_team(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_battle_team(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_battle_team(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_battle_team(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_battle_team(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_battle_team(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_battle_team(Rest, Z1, Z2, F@_1,
				   TrUserData).

d_enum_team_member_state(1) -> inviting;
d_enum_team_member_state(2) -> unready;
d_enum_team_member_state(3) -> ready;
d_enum_team_member_state(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #battle_team_member{} ->
	  merge_msg_battle_team_member(Prev, New, TrUserData);
      #team_member_st{} ->
	  merge_msg_team_member_st(Prev, New, TrUserData);
      #team_info_st{} ->
	  merge_msg_team_info_st(Prev, New, TrUserData);
      #name_card_st{} ->
	  merge_msg_name_card_st(Prev, New, TrUserData);
      #role_summary_st{} ->
	  merge_msg_role_summary_st(Prev, New, TrUserData);
      #role_st{} -> merge_msg_role_st(Prev, New, TrUserData);
      #battle_stat{} ->
	  merge_msg_battle_stat(Prev, New, TrUserData);
      #battle_team{} ->
	  merge_msg_battle_team(Prev, New, TrUserData)
    end.

merge_msg_battle_team_member(#battle_team_member{role_id
						     = PFrole_id,
						 elf_id = PFelf_id,
						 name = PFname, level = PFlevel,
						 team_id = PFteam_id},
			     #battle_team_member{role_id = NFrole_id,
						 elf_id = NFelf_id,
						 name = NFname, level = NFlevel,
						 team_id = NFteam_id},
			     _) ->
    #battle_team_member{role_id =
			    if NFrole_id =:= undefined -> PFrole_id;
			       true -> NFrole_id
			    end,
			elf_id =
			    if NFelf_id =:= undefined -> PFelf_id;
			       true -> NFelf_id
			    end,
			name =
			    if NFname =:= undefined -> PFname;
			       true -> NFname
			    end,
			level =
			    if NFlevel =:= undefined -> PFlevel;
			       true -> NFlevel
			    end,
			team_id =
			    if NFteam_id =:= undefined -> PFteam_id;
			       true -> NFteam_id
			    end}.

merge_msg_team_member_st(#team_member_st{user_id =
					     PFuser_id,
					 state = PFstate, elf_id = PFelf_id,
					 name = PFname, level = PFlevel},
			 #team_member_st{user_id = NFuser_id, state = NFstate,
					 elf_id = NFelf_id, name = NFname,
					 level = NFlevel},
			 _) ->
    #team_member_st{user_id =
			if NFuser_id =:= undefined -> PFuser_id;
			   true -> NFuser_id
			end,
		    state =
			if NFstate =:= undefined -> PFstate;
			   true -> NFstate
			end,
		    elf_id =
			if NFelf_id =:= undefined -> PFelf_id;
			   true -> NFelf_id
			end,
		    name =
			if NFname =:= undefined -> PFname;
			   true -> NFname
			end,
		    level =
			if NFlevel =:= undefined -> PFlevel;
			   true -> NFlevel
			end}.

merge_msg_team_info_st(#team_info_st{members =
					 PFmembers,
				     leader_id = PFleader_id},
		       #team_info_st{members = NFmembers,
				     leader_id = NFleader_id},
		       TrUserData) ->
    #team_info_st{members =
		      if PFmembers /= undefined, NFmembers /= undefined ->
			     'erlang_++'(PFmembers, NFmembers, TrUserData);
			 PFmembers == undefined -> NFmembers;
			 NFmembers == undefined -> PFmembers
		      end,
		  leader_id =
		      if NFleader_id =:= undefined -> PFleader_id;
			 true -> NFleader_id
		      end}.

merge_msg_name_card_st(#name_card_st{name = PFname,
				     last_set_time = PFlast_set_time},
		       #name_card_st{name = NFname,
				     last_set_time = NFlast_set_time},
		       _) ->
    #name_card_st{name =
		      if NFname =:= undefined -> PFname;
			 true -> NFname
		      end,
		  last_set_time =
		      if NFlast_set_time =:= undefined -> PFlast_set_time;
			 true -> NFlast_set_time
		      end}.

merge_msg_role_summary_st(#role_summary_st{role_id =
					       PFrole_id,
					   elf_id = PFelf_id, name = PFname,
					   level = PFlevel},
			  #role_summary_st{role_id = NFrole_id,
					   elf_id = NFelf_id, name = NFname,
					   level = NFlevel},
			  _) ->
    #role_summary_st{role_id =
			 if NFrole_id =:= undefined -> PFrole_id;
			    true -> NFrole_id
			 end,
		     elf_id =
			 if NFelf_id =:= undefined -> PFelf_id;
			    true -> NFelf_id
			 end,
		     name =
			 if NFname =:= undefined -> PFname;
			    true -> NFname
			 end,
		     level =
			 if NFlevel =:= undefined -> PFlevel;
			    true -> NFlevel
			 end}.

merge_msg_role_st(#role_st{role_id = PFrole_id,
			   elf_id = PFelf_id, name_card = PFname_card,
			   level = PFlevel, exp = PFexp},
		  #role_st{role_id = NFrole_id, elf_id = NFelf_id,
			   name_card = NFname_card, level = NFlevel,
			   exp = NFexp},
		  TrUserData) ->
    #role_st{role_id =
		 if NFrole_id =:= undefined -> PFrole_id;
		    true -> NFrole_id
		 end,
	     elf_id =
		 if NFelf_id =:= undefined -> PFelf_id;
		    true -> NFelf_id
		 end,
	     name_card =
		 if PFname_card /= undefined, NFname_card /= undefined ->
			merge_msg_name_card_st(PFname_card, NFname_card,
					       TrUserData);
		    PFname_card == undefined -> NFname_card;
		    NFname_card == undefined -> PFname_card
		 end,
	     level =
		 if NFlevel =:= undefined -> PFlevel;
		    true -> NFlevel
		 end,
	     exp =
		 if NFexp =:= undefined -> PFexp;
		    true -> NFexp
		 end}.

merge_msg_battle_stat(_Prev, New, _TrUserData) -> New.

merge_msg_battle_team(#battle_team{members = PFmembers},
		      #battle_team{members = NFmembers}, TrUserData) ->
    #battle_team{members =
		     if PFmembers /= undefined, NFmembers /= undefined ->
			    'erlang_++'(PFmembers, NFmembers, TrUserData);
			PFmembers == undefined -> NFmembers;
			NFmembers == undefined -> PFmembers
		     end}.


verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #battle_team_member{} ->
	  v_msg_battle_team_member(Msg, [battle_team_member],
				   TrUserData);
      #team_member_st{} ->
	  v_msg_team_member_st(Msg, [team_member_st], TrUserData);
      #team_info_st{} ->
	  v_msg_team_info_st(Msg, [team_info_st], TrUserData);
      #name_card_st{} ->
	  v_msg_name_card_st(Msg, [name_card_st], TrUserData);
      #role_summary_st{} ->
	  v_msg_role_summary_st(Msg, [role_summary_st],
				TrUserData);
      #role_st{} -> v_msg_role_st(Msg, [role_st], TrUserData);
      #battle_stat{} ->
	  v_msg_battle_stat(Msg, [battle_stat], TrUserData);
      #battle_team{} ->
	  v_msg_battle_team(Msg, [battle_team], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_battle_team_member/3}).
v_msg_battle_team_member(#battle_team_member{role_id =
						 F1,
					     elf_id = F2, name = F3, level = F4,
					     team_id = F5},
			 Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [role_id | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [elf_id | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [name | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [level | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [team_id | Path])
    end,
    ok;
v_msg_battle_team_member(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, battle_team_member}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_team_member_st/3}).
v_msg_team_member_st(#team_member_st{user_id = F1,
				     state = F2, elf_id = F3, name = F4,
				     level = F5},
		     Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [user_id | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_enum_team_member_state(F2, [state | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [elf_id | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [name | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [level | Path])
    end,
    ok;
v_msg_team_member_st(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, team_member_st}, X, Path).

-dialyzer({nowarn_function,v_msg_team_info_st/3}).
v_msg_team_info_st(#team_info_st{members = F1,
				 leader_id = F2},
		   Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_team_member_st(Elem, [members | Path],
				     TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, team_member_st}},
			 F1, [members | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [leader_id | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_name_card_st/3}).
v_msg_name_card_st(#name_card_st{name = F1,
				 last_set_time = F2},
		   Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [name | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [last_set_time | Path])
    end,
    ok;
v_msg_name_card_st(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, name_card_st}, X, Path).

-dialyzer({nowarn_function,v_msg_role_summary_st/3}).
v_msg_role_summary_st(#role_summary_st{role_id = F1,
				       elf_id = F2, name = F3, level = F4},
		      Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [role_id | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [elf_id | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [name | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [level | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_role_st/3}).
v_msg_role_st(#role_st{role_id = F1, elf_id = F2,
		       name_card = F3, level = F4, exp = F5},
	      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [role_id | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [elf_id | Path])
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_name_card_st(F3, [name_card | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [level | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [exp | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_battle_stat/3}).
v_msg_battle_stat(#battle_stat{}, _Path, _) -> ok.

-dialyzer({nowarn_function,v_msg_battle_team/3}).
v_msg_battle_team(#battle_team{members = F1}, Path,
		  TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_battle_team_member(Elem, [members | Path],
					 TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, battle_team_member}},
			 F1, [members | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_enum_team_member_state/2}).
v_enum_team_member_state(inviting, _Path) -> ok;
v_enum_team_member_state(unready, _Path) -> ok;
v_enum_team_member_state(ready, _Path) -> ok;
v_enum_team_member_state(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
v_enum_team_member_state(X, Path) ->
    mk_type_error({invalid_enum, team_member_state}, X,
		  Path).

-dialyzer({nowarn_function,v_type_sint32/2}).
v_type_sint32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_uint32/2}).
v_type_uint32(N, _Path) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).


-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{enum, team_member_state},
      [{inviting, 1}, {unready, 2}, {ready, 3}]},
     {{msg, battle_team_member},
      [#field{name = role_id, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = elf_id, fnum = 2, rnum = 3, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = name, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []},
       #field{name = level, fnum = 4, rnum = 5, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = team_id, fnum = 5, rnum = 6,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, team_member_st},
      [#field{name = user_id, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = state, fnum = 2, rnum = 3,
	      type = {enum, team_member_state}, occurrence = optional,
	      opts = []},
       #field{name = elf_id, fnum = 3, rnum = 4, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = name, fnum = 4, rnum = 5, type = string,
	      occurrence = optional, opts = []},
       #field{name = level, fnum = 5, rnum = 6, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, team_info_st},
      [#field{name = members, fnum = 1, rnum = 2,
	      type = {msg, team_member_st}, occurrence = repeated,
	      opts = []},
       #field{name = leader_id, fnum = 2, rnum = 3,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, name_card_st},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = last_set_time, fnum = 2, rnum = 3,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, role_summary_st},
      [#field{name = role_id, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = elf_id, fnum = 2, rnum = 3, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = name, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []},
       #field{name = level, fnum = 4, rnum = 5, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, role_st},
      [#field{name = role_id, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = elf_id, fnum = 2, rnum = 3, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = name_card, fnum = 3, rnum = 4,
	      type = {msg, name_card_st}, occurrence = optional,
	      opts = []},
       #field{name = level, fnum = 4, rnum = 5, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = exp, fnum = 5, rnum = 6, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, battle_stat}, []},
     {{msg, battle_team},
      [#field{name = members, fnum = 1, rnum = 2,
	      type = {msg, battle_team_member}, occurrence = repeated,
	      opts = []}]}].


get_msg_names() ->
    [battle_team_member, team_member_st, team_info_st,
     name_card_st, role_summary_st, role_st, battle_stat,
     battle_team].


get_group_names() -> [].


get_msg_or_group_names() ->
    [battle_team_member, team_member_st, team_info_st,
     name_card_st, role_summary_st, role_st, battle_stat,
     battle_team].


get_enum_names() -> [team_member_state].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(battle_team_member) ->
    [#field{name = role_id, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = elf_id, fnum = 2, rnum = 3, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = name, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []},
     #field{name = level, fnum = 4, rnum = 5, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = team_id, fnum = 5, rnum = 6,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def(team_member_st) ->
    [#field{name = user_id, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = state, fnum = 2, rnum = 3,
	    type = {enum, team_member_state}, occurrence = optional,
	    opts = []},
     #field{name = elf_id, fnum = 3, rnum = 4, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = name, fnum = 4, rnum = 5, type = string,
	    occurrence = optional, opts = []},
     #field{name = level, fnum = 5, rnum = 6, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def(team_info_st) ->
    [#field{name = members, fnum = 1, rnum = 2,
	    type = {msg, team_member_st}, occurrence = repeated,
	    opts = []},
     #field{name = leader_id, fnum = 2, rnum = 3,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def(name_card_st) ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = last_set_time, fnum = 2, rnum = 3,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def(role_summary_st) ->
    [#field{name = role_id, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = elf_id, fnum = 2, rnum = 3, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = name, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []},
     #field{name = level, fnum = 4, rnum = 5, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def(role_st) ->
    [#field{name = role_id, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = elf_id, fnum = 2, rnum = 3, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = name_card, fnum = 3, rnum = 4,
	    type = {msg, name_card_st}, occurrence = optional,
	    opts = []},
     #field{name = level, fnum = 4, rnum = 5, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = exp, fnum = 5, rnum = 6, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def(battle_stat) -> [];
find_msg_def(battle_team) ->
    [#field{name = members, fnum = 1, rnum = 2,
	    type = {msg, battle_team_member}, occurrence = repeated,
	    opts = []}];
find_msg_def(_) -> error.


find_enum_def(team_member_state) ->
    [{inviting, 1}, {unready, 2}, {ready, 3}];
find_enum_def(_) -> error.


enum_symbol_by_value(team_member_state, Value) ->
    enum_symbol_by_value_team_member_state(Value).


enum_value_by_symbol(team_member_state, Sym) ->
    enum_value_by_symbol_team_member_state(Sym).


enum_symbol_by_value_team_member_state(1) -> inviting;
enum_symbol_by_value_team_member_state(2) -> unready;
enum_symbol_by_value_team_member_state(3) -> ready.


enum_value_by_symbol_team_member_state(inviting) -> 1;
enum_value_by_symbol_team_member_state(unready) -> 2;
enum_value_by_symbol_team_member_state(ready) -> 3.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "4.0.1".

gpb_version_as_list() ->
    [4,0,1].
